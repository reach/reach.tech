(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{fVd4:function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"c",(function(){return p})),n.d(t,"b",(function(){return d}));n("xtjI"),n("4DPX"),n("rzGZ"),n("Dq+y"),n("8npG"),n("Ggvi"),n("E5k/");var a=n("q1tI"),o=n.n(a),l=n("mh+Z");function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){b(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}function c(e){var t=e.children,n=e.label,a=void 0===n?"Table of Contents":n,i=r(e,["children","label"]);return o.a.createElement("nav",Object.assign({className:"toc"},i),o.a.createElement(l.a,null,o.a.createElement("h2",null,a)),t)}function p(e){var t=e.children,n=e.style,a=void 0===n?{}:n,l=r(e,["children","style"]);return o.a.createElement("ul",Object.assign({style:s({display:"block",padding:0,listStyle:"none"},a)},l),t)}function d(e){var t=e.href,n=e.children,a=r(e,["href","children"]);return o.a.createElement("li",{style:{display:"inline-block",margin:0,padding:0}},o.a.createElement("a",Object.assign({href:t},a),n))}},qeBV:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return s})),n.d(t,"default",(function(){return c}));n("rzGZ"),n("Dq+y"),n("8npG"),n("Ggvi"),n("E5k/"),n("q1tI");var a=n("7ljp"),o=n("LmON"),l=n("EYWl"),i=n("fVd4");var s={},b={_frontmatter:s},r=o.a;function c(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["components"]);return Object(a.b)(r,Object.assign({},b,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)(l.a,{title:"Dialog (Modal)",description:"An accessible modal dialog component for React",mdxType:"SEO"}),Object(a.b)("h1",{id:"dialog-modal"},"Dialog (Modal)"),Object(a.b)(i.a,{mdxType:"TOC"},Object(a.b)(i.c,{mdxType:"TOCList"},Object(a.b)(i.b,{href:"#dialog",mdxType:"TOCLink"},"Dialog"),Object(a.b)(i.b,{href:"#dialogoverlay",mdxType:"TOCLink"},"DialogOverlay"),Object(a.b)(i.b,{href:"#dialogcontent",mdxType:"TOCLink"},"DialogContent"))),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Source: ",Object(a.b)("a",Object.assign({parentName:"li"},{href:"https://github.com/reach/reach-ui/tree/main/packages/dialog"}),"https://github.com/reach/reach-ui/tree/main/packages/dialog")),Object(a.b)("li",{parentName:"ul"},"WAI-ARIA: ",Object(a.b)("a",Object.assign({parentName:"li"},{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal"}),"https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal"))),Object(a.b)("p",null,'An accessible dialog or "modal" window.'),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// jsx-demo\nfunction Example(props) {\n  const [showDialog, setShowDialog] = React.useState(false);\n  const open = () => setShowDialog(true);\n  const close = () => setShowDialog(false);\n\n  return (\n    <div>\n      <button onClick={open}>Open Dialog</button>\n\n      <Dialog isOpen={showDialog} onDismiss={close}>\n        <button className="close-button" onClick={close}>\n          <VisuallyHidden>Close</VisuallyHidden>\n          <span aria-hidden>Ã—</span>\n        </button>\n        <p>Hello there. I am a dialog</p>\n      </Dialog>\n    </div>\n  );\n}\n')),Object(a.b)("h2",{id:"installation"},"Installation"),Object(a.b)("p",null,"From the command line in your project directory, run ",Object(a.b)("inlineCode",{parentName:"p"},"npm install @reach/dialog")," or ",Object(a.b)("inlineCode",{parentName:"p"},"yarn add @reach/dialog"),". Then import the components and styles that you need:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"npm install @reach/dialog\n# or\nyarn add @reach/dialog\n")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'import { Dialog, DialogOverlay, DialogContent } from "@reach/dialog";\nimport "@reach/dialog/styles.css";\n')),Object(a.b)("h2",{id:"component-api"},"Component API"),Object(a.b)("h3",{id:"dialog"},"Dialog"),Object(a.b)("p",null,"High-level component to render a modal dialog window over the top of the page (or another dialog)."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Dialog>\n  <p>Some Content</p>\n</Dialog>\n")),Object(a.b)("h4",{id:"dialog-props"},"Dialog Props"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Prop"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Required"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#dialog-div-props"}),Object(a.b)("inlineCode",{parentName:"a"},"div")," props")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#dialog-allowpinchzoom"}),Object(a.b)("inlineCode",{parentName:"a"},"allowPinchZoom"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"bool")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#dialog-children"}),Object(a.b)("inlineCode",{parentName:"a"},"children"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"node")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"true")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#dialog-initialfocusref"}),Object(a.b)("inlineCode",{parentName:"a"},"initialFocusRef"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"ref")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#dialog-isopen"}),Object(a.b)("inlineCode",{parentName:"a"},"isOpen"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"bool")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#dialog-ondismiss"}),Object(a.b)("inlineCode",{parentName:"a"},"onDismiss"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"func")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")))),Object(a.b)("h5",{id:"dialog-div-props"},"Dialog div props"),Object(a.b)("p",null,"Any props not listed above will be spread onto the underlying ",Object(a.b)("inlineCode",{parentName:"p"},"DialogContent")," element, which in turn is spread onto the underlying ",Object(a.b)("inlineCode",{parentName:"p"},"div[data-reach-dialog-content]"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// jsx-demo\nfunction Example(props) {\n  const [showDialog, setShowDialog] = React.useState(false);\n  const open = () => setShowDialog(true);\n  const close = () => setShowDialog(false);\n\n  return (\n    <div>\n      <button onClick={open}>Show Dialog</button>\n\n      <Dialog style={{ color: "red" }} isOpen={showDialog} onDismiss={close}>\n        <p>My text is red because the style prop got applied to the div</p>\n        <button onClick={close}>Okay</button>\n      </Dialog>\n    </div>\n  );\n}\n')),Object(a.b)("h5",{id:"dialog-allowpinchzoom"},"Dialog allowPinchZoom"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"allowPinchZoom?: boolean")),Object(a.b)("p",null,"Handle zoom/pinch gestures on iOS devices when scroll locking is enabled. Defaults to ",Object(a.b)("inlineCode",{parentName:"p"},"false"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Dialog allowPinchZoom={true}>\n  <p>\n    I will allow zoom and pinch gestures on iOS devices even when scrolling is\n    locked!\n  </p>\n</Dialog>\n")),Object(a.b)("h5",{id:"dialog-children"},"Dialog children"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"children: React.ReactNode")),Object(a.b)("p",null,"Accepts any renderable content."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Dialog>\n  <p>Anything you want, you got it.</p>\n</Dialog>\n")),Object(a.b)("h5",{id:"dialog-initialfocusref"},"Dialog initialFocusRef"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"initialFocusRef?: React.RefObject<any>")),Object(a.b)("p",null,"By default the first focusable element will receive focus when the dialog opens but you can provide a ref to focus instead."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"// jsx-demo\nfunction Example(props) {\n  const [showDialog, setShowDialog] = React.useState(false);\n  const buttonRef = React.useRef();\n  const open = () => setShowDialog(true);\n  const close = () => setShowDialog(false);\n\n  return (\n    <div>\n      <button onClick={open}>Show Dialog</button>\n      <Dialog isOpen={showDialog} initialFocusRef={buttonRef} onDismiss={close}>\n        <p>Pass the button ref to Dialog and the button.</p>\n        <button onClick={close}>Not me</button>\n        <button ref={buttonRef} onClick={close}>\n          Got me!\n        </button>\n      </Dialog>\n    </div>\n  );\n}\n")),Object(a.b)("h5",{id:"dialog-isopen"},"Dialog isOpen"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"isOpen?: boolean")),Object(a.b)("p",null,"Controls whether or not the dialog is open."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Dialog isOpen={true}>\n  <p>I will be open</p>\n</Dialog>\n\n<Dialog isOpen={false}>\n  <p>I will be closed</p>\n</Dialog>\n")),Object(a.b)("p",null,"If you'd rather not have the dialog always rendered, you can put a guard in front of it and only render when it should be open. In this case you donâ€™t need the ",Object(a.b)("inlineCode",{parentName:"p"},"isOpen")," prop at all."),Object(a.b)("p",null,"Note, however, that the dialog will not render to the DOM when ",Object(a.b)("inlineCode",{parentName:"p"},"isOpen={false}"),", but you may want to save on the number of elements created in your render function. You should probably do this when your dialog contains a lot of elements."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"// jsx-demo\nfunction Example(props) {\n  const [showDialog, setShowDialog] = React.useState(false);\n  const open = () => setShowDialog(true);\n  const close = () => setShowDialog(false);\n\n  return (\n    <div>\n      <button onClick={open}>Show Dialog</button>\n\n      {showDialog && (\n        <Dialog onDismiss={close}>\n          <p>\n            I donâ€™t use <code>isOpen</code>, I just render when I should and not\n            when I shouldnâ€™t.\n          </p>\n          <button onClick={close}>Okay</button>\n        </Dialog>\n      )}\n    </div>\n  );\n}\n")),Object(a.b)("h5",{id:"dialog-ondismiss"},"Dialog onDismiss"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"onDismiss?: (event?: React.SyntheticEvent) => void")),Object(a.b)("p",null,'This function is called whenever the user hits "Escape" or clicks outside the dialog. ',Object(a.b)("em",{parentName:"p"},"It's important to close the dialog ",Object(a.b)("inlineCode",{parentName:"em"},"onDismiss"))," as seen in all the demos on this page."),Object(a.b)("p",null,'The only time you shouldn\'t close the dialog on dismiss is when the dialog requires a choice and none of them are "cancel". For example, perhaps two records need to be merged and the user needs to pick the surviving record. Neither choice is less destructive than the other, in these cases you may want to alert the user they need to a make a choice on dismiss instead of closing the dialog.'),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"// jsx-demo\nfunction Example(props) {\n  const [showDialog, setShowDialog] = React.useState(false);\n  const open = () => setShowDialog(true);\n  const close = () => setShowDialog(false);\n\n  return (\n    <div>\n      <button onClick={open}>Show Dialog</button>\n\n      <Dialog isOpen={showDialog} onDismiss={close}>\n        <p>\n          It is your job to close this with state when the user clicks outside\n          or presses escape.\n        </p>\n        <button onClick={close}>Okay</button>\n      </Dialog>\n    </div>\n  );\n}\n")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// jsx-demo\nfunction Example(props) {\n  const [showDialog, setShowDialog] = React.useState(false);\n  const [showWarning, setShowWarning] = React.useState(false);\n  const open = () => {\n    setShowDialog(true);\n    setShowWarning(false);\n  };\n  const close = () => setShowDialog(false);\n  const dismiss = () => setShowWarning(true);\n\n  return (\n    <div>\n      <button onClick={open}>Show Dialog</button>\n\n      <Dialog isOpen={showDialog} onDismiss={dismiss}>\n        {showWarning && (\n          <p style={{ color: "red" }}>You must make a choice, sorry :(</p>\n        )}\n        <p>Which router should survive the merge?</p>\n        <button onClick={close}>React Router</button>{" "}\n        <button onClick={close}>@reach/router</button>\n      </Dialog>\n    </div>\n  );\n}\n')),Object(a.b)("h3",{id:"dialogoverlay"},"DialogOverlay"),Object(a.b)("p",null,"Low-level component if you need more control over the styles or rendering of the dialog overlay."),Object(a.b)("p",null,"Note: You must render a ",Object(a.b)("inlineCode",{parentName:"p"},"DialogContent")," inside."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// jsx-demo\nfunction Example(props) {\n  const [showDialog, setShowDialog] = React.useState(false);\n  const open = () => setShowDialog(true);\n  const close = () => setShowDialog(false);\n\n  return (\n    <div>\n      <button onClick={open}>Show Dialog</button>\n\n      <DialogOverlay\n        style={{ background: "hsla(0, 100%, 100%, 0.9)" }}\n        isOpen={showDialog}\n        onDismiss={close}\n      >\n        <DialogContent\n          style={{ boxShadow: "0px 10px 50px hsla(0, 0%, 0%, 0.33)" }}\n        >\n          <p>\n            The overlay styles are a white fade instead of the default black\n            fade.\n          </p>\n          <button onClick={close}>Very nice.</button>\n        </DialogContent>\n      </DialogOverlay>\n    </div>\n  );\n}\n')),Object(a.b)("h4",{id:"dialogoverlay-css-selectors"},"DialogOverlay CSS Selectors"),Object(a.b)("p",null,"Please see the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/reach-ui/styling"}),"styling guide"),"."),Object(a.b)("p",null,"Use the following CSS to target the overlay:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"[data-reach-dialog-overlay] {\n}\n")),Object(a.b)("h4",{id:"dialogoverlay-props"},"DialogOverlay Props"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Prop"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Required"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#dialogoverlay-div-props"}),Object(a.b)("inlineCode",{parentName:"a"},"div")," props")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#dialogoverlay-allowpinchzoom"}),Object(a.b)("inlineCode",{parentName:"a"},"allowPinchZoom"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"bool")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#dialogoverlay-children"}),Object(a.b)("inlineCode",{parentName:"a"},"children"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"node")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"true")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#dialog-dangerouslybypassfocuslock"}),Object(a.b)("inlineCode",{parentName:"a"},"dangerouslyBypassFocusLock"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"bool")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#dialog-dangerouslybypassscrolllock"}),Object(a.b)("inlineCode",{parentName:"a"},"dangerouslyBypassScrollLock"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"bool")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#dialogoverlay-initialfocusref"}),Object(a.b)("inlineCode",{parentName:"a"},"initialFocusRef"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"ref")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#dialogoverlay-isopen"}),Object(a.b)("inlineCode",{parentName:"a"},"isOpen"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"bool")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#dialogoverlay-ondismiss"}),Object(a.b)("inlineCode",{parentName:"a"},"onDismiss"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"func")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")))),Object(a.b)("h5",{id:"dialogoverlay-div-props"},"DialogOverlay div props"),Object(a.b)("p",null,"Any props not listed above will be spread onto the underlying ",Object(a.b)("inlineCode",{parentName:"p"},"div"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<DialogOverlay className="light-modal">\n  <p>The underlying element will receive a class</p>\n</DialogOverlay>\n')),Object(a.b)("h5",{id:"dialogoverlay-allowpinchzoom"},"DialogOverlay allowPinchZoom"),Object(a.b)("p",null,"Same as ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"#dialog-allowpinchzoom"}),"Dialog ",Object(a.b)("inlineCode",{parentName:"a"},"allowPinchZoom")),"."),Object(a.b)("h5",{id:"dialogoverlay-children"},"DialogOverlay children"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"children: React.ReactNode")),Object(a.b)("p",null,"Should be a ",Object(a.b)("inlineCode",{parentName:"p"},"DialogContent")," component."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<DialogOverlay>\n  <DialogContent>Hey!</DialogContent>\n</DialogOverlay>\n")),Object(a.b)("h5",{id:"dialogoverlay-dangerouslybypassfocuslock"},"DialogOverlay dangerouslyBypassFocusLock"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"dangerouslyBypassFocusLock?: boolean")),Object(a.b)("p",null,"By default the dialog locks the focus inside it. Normally this is what you want. This prop is provided so that this feature can be disabled. This, however, is strongly discouraged."),Object(a.b)("p",null,"The reason it is provided is not to disable the focus lock entirely. Rather, there are certain situations where you may need more control on how the focus lock works. This should be complemented by setting up a focus lock yourself that would allow more flexibility for your specific use case."),Object(a.b)("p",null,"If you do set this prop to ",Object(a.b)("inlineCode",{parentName:"p"},"true"),", make sure you set up your own ",Object(a.b)("inlineCode",{parentName:"p"},"FocusLock")," component. You can likely use ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/theKashey/react-focus-lock"}),Object(a.b)("inlineCode",{parentName:"a"},"react-focus-lock")),", which is what Reach UI uses internally by default. It has various settings to allow more customization, but it takes care of a lot of hard work that you probably don't want or need to do."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'function DialogWithCustomFocusLock() {\n  const [showDialog, setShowDialog] = useState(false);\n  const open = () => setShowDialog(true);\n  const close = () => setShowDialog(false);\n  return (\n    <div>\n      <button onClick={open}>Show Dialog</button>\n      <DialogOverlay\n        isOpen={showDialog}\n        onDismiss={close}\n        dangerouslyBypassFocusLock\n      >\n        <MyCustomFocusLock>\n          <DialogContent aria-label="Announcement">\n            This is an important announcement!\n          </DialogContent>\n        </MyCustomFocusLock>\n      </DialogOverlay>\n    </div>\n  );\n}\n')),Object(a.b)("h5",{id:"dialogoverlay-dangerouslybypassscrolllock"},"DialogOverlay dangerouslyBypassScrollLock"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"dangerouslyBypassScrollLock?: boolean")),Object(a.b)("p",null,"By default the dialog locks scrolling with ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/theKashey/react-remove-scroll"}),Object(a.b)("inlineCode",{parentName:"a"},"react-remove-scroll")),", which also injecs some styles on the body element to remove the scrollbar while maintaining its gap to prevent jank when the dialog's open state is toggled. This is almost always what you want in a dialog, but in some cases you may have the need to customize this behavior further."),Object(a.b)("p",null,"This prop will disable ",Object(a.b)("inlineCode",{parentName:"p"},"react-remove-scroll")," and allow you to compose your own scroll lock component to meet your needs. Like the ",Object(a.b)("inlineCode",{parentName:"p"},"dangerouslyBypassFocusLock")," prop, this is generally discouraged and should only be used if a proper fallback for managing scroll behavior is provided."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'function DialogWithCustomScrollLock() {\n  const [showDialog, setShowDialog] = useState(false);\n  const open = () => setShowDialog(true);\n  const close = () => setShowDialog(false);\n  return (\n    <div>\n      <button onClick={open}>Show Dialog</button>\n      <DialogOverlay\n        isOpen={showDialog}\n        onDismiss={close}\n        dangerouslyBypassScrollLock\n      >\n        <MyCustomScrollLock>\n          <DialogContent aria-label="Announcement">\n            This is an important announcement!\n          </DialogContent>\n        </MyCustomScrollLock>\n      </DialogOverlay>\n    </div>\n  );\n}\n')),Object(a.b)("h5",{id:"dialogoverlay-initialfocusref"},"DialogOverlay initialFocusRef"),Object(a.b)("p",null,"Same as ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"#dialog-initialfocusref"}),"Dialog ",Object(a.b)("inlineCode",{parentName:"a"},"initialFocusRef")),"."),Object(a.b)("h5",{id:"dialogoverlay-isopen"},"DialogOverlay isOpen"),Object(a.b)("p",null,"Same as ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"#dialog-isopen"}),"Dialog ",Object(a.b)("inlineCode",{parentName:"a"},"isOpen")),"."),Object(a.b)("h5",{id:"dialogoverlay-ondismiss"},"DialogOverlay onDismiss"),Object(a.b)("p",null,"Same as ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"#dialog-ondismiss"}),"Dialog ",Object(a.b)("inlineCode",{parentName:"a"},"onDismiss")),"."),Object(a.b)("h3",{id:"dialogcontent"},"DialogContent"),Object(a.b)("p",null,"Low-level component if you need more control over the styles or rendering of the dialog content."),Object(a.b)("p",null,"Note: Must be a child of ",Object(a.b)("inlineCode",{parentName:"p"},"DialogOverlay"),"."),Object(a.b)("p",null,"Note: You only need to use this when you are also styling ",Object(a.b)("inlineCode",{parentName:"p"},"DialogOverlay"),", otherwise you can use the high-level ",Object(a.b)("inlineCode",{parentName:"p"},"Dialog")," component and pass the props to it. Any props passed to ",Object(a.b)("inlineCode",{parentName:"p"},"Dialog")," component (besides ",Object(a.b)("inlineCode",{parentName:"p"},"isOpen")," and ",Object(a.b)("inlineCode",{parentName:"p"},"onDismiss"),") will be spread onto ",Object(a.b)("inlineCode",{parentName:"p"},"DialogContent"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// jsx-demo\nfunction Example(props) {\n  const [showDialog, setShowDialog] = React.useState(false);\n  const buttonRef = React.useRef();\n  const open = () => setShowDialog(true);\n  const close = () => setShowDialog(false);\n\n  return (\n    <div>\n      <button onClick={open}>Show Dialog</button>\n\n      <DialogOverlay isOpen={showDialog} onDismiss={close}>\n        <DialogContent\n          style={{\n            border: "solid 5px hsla(0, 0%, 0%, 0.5)",\n            borderRadius: "10px",\n          }}\n        >\n          <p>I have a nice border now.</p>\n          <p>\n            Note that we could have used the simpler <code>Dialog</code>{" "}\n            instead.\n          </p>\n          <button onClick={close}>Got it.</button>\n        </DialogContent>\n      </DialogOverlay>\n    </div>\n  );\n}\n')),Object(a.b)("h4",{id:"dialogcontent-css-selectors"},"DialogContent CSS Selectors"),Object(a.b)("p",null,"Please see the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/reach-ui/styling"}),"styling guide"),"."),Object(a.b)("p",null,"Use the following CSS to target the overlay:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"[data-reach-dialog-content] {\n}\n")),Object(a.b)("h4",{id:"dialogcontent-props"},"DialogContent Props"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Prop"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Required"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#dialogcontent-div-props"}),Object(a.b)("inlineCode",{parentName:"a"},"div")," props")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#dialogcontent-children"}),Object(a.b)("inlineCode",{parentName:"a"},"children"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"node")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"true")))),Object(a.b)("h5",{id:"dialogcontent-div-props"},"DialogContent div props"),Object(a.b)("p",null,"Any props not listed above will be spread onto the underlying ",Object(a.b)("inlineCode",{parentName:"p"},"div"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<DialogContent className="nice-border">\n  <p>The underlying element will receive a class</p>\n</DialogContent>\n')),Object(a.b)("h5",{id:"dialogcontent-children"},"DialogContent children"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"children: React.ReactNode")),Object(a.b)("p",null,"Accepts any renderable content."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<DialogContent>\n  <p>Anything you want, you got it.</p>\n</DialogContent>\n")),Object(a.b)("h2",{id:"animation-example"},"Animation Example"),Object(a.b)("p",null,"If you'd like to animate the content, give ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/drcmda/react-spring"}),"React Spring")," a shot."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// jsx-demo\nfunction Example(props) {\n  const AnimatedDialogOverlay = animated(DialogOverlay);\n  const AnimatedDialogContent = animated(DialogContent);\n  const [showDialog, setShowDialog] = React.useState(false);\n  const transitions = useTransition(showDialog, null, {\n    from: { opacity: 0, y: -10 },\n    enter: { opacity: 1, y: 0 },\n    leave: { opacity: 0, y: 10 },\n  });\n  return (\n    <div>\n      <button onClick={() => setShowDialog(true)}>Show Dialog</button>\n      {transitions.map(\n        ({ item, key, props: styles }) =>\n          item && (\n            <AnimatedDialogOverlay style={{ opacity: styles.opacity }}>\n              <AnimatedDialogContent\n                style={{\n                  transform: styles.y.interpolate(\n                    (value) => `translate3d(0px, ${value}px, 0px)`\n                  ),\n                  border: "4px solid hsla(0, 0%, 0%, 0.5)",\n                  borderRadius: 10,\n                }}\n              >\n                <button onClick={() => setShowDialog(false)}>\n                  Close Dialog\n                </button>\n                <p>React Spring makes it too easy!</p>\n                <input type="text" />\n                <br />\n                <input type="text" />\n                <button>Ayyyyyy</button>\n              </AnimatedDialogContent>\n            </AnimatedDialogOverlay>\n          )\n      )}\n    </div>\n  );\n}\n')),Object(a.b)("h2",{id:"accessibility"},"Accessibility"),Object(a.b)("h3",{id:"tabbable-elements"},"Tabbable Elements"),Object(a.b)("p",null,"It is recommended to have at least one tabbable element in the dialog content. Ideally the first element in the dialog is a close button. If no tabbable elements are found, the dialog content element itself will receive focus."),Object(a.b)("h3",{id:"labeling"},"Labeling"),Object(a.b)("p",null,"As with many other complex UI components, a dialog needs to be properly labeled to provide context for users with assistive technology such as screen readers. If a dialog is announced to the user without a label, it can be confusing and difficult to navigate."),Object(a.b)("p",null,"There are two general approaches to labeling UI components on the web: ",Object(a.b)("inlineCode",{parentName:"p"},"aria-label")," and ",Object(a.b)("inlineCode",{parentName:"p"},"aria-labelledby"),". If the text is visible on screen, you should provide the label's HTML element with a unique ",Object(a.b)("inlineCode",{parentName:"p"},"id")," attribute. That ",Object(a.b)("inlineCode",{parentName:"p"},"id")," value is then given to an ",Object(a.b)("inlineCode",{parentName:"p"},"aria-labelledby")," attribute (or in React, an ",Object(a.b)("inlineCode",{parentName:"p"},"aria-labelledby")," prop) on the ",Object(a.b)("inlineCode",{parentName:"p"},"Dialog"),". With this context, the screen reader will announce whatever text is nested inside that ID'd markup as the title for the ",Object(a.b)("inlineCode",{parentName:"p"},"Dialog"),"."),Object(a.b)("p",null,"Alternatively, a design may not include a visible label on the screen, but this context is still important for non-sighted users. In this case, you need to provide an ",Object(a.b)("inlineCode",{parentName:"p"},"aria-label")," prop to your ",Object(a.b)("inlineCode",{parentName:"p"},"Dialog")," instead."),Object(a.b)("h4",{id:"with-aria-label"},"With aria-label"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'function Example(props) {\n  return (\n    <Dialog aria-label="Warning about next steps">\n      <p>This might take a while! Are you sure?</p>\n      <button>Go Forward</button> <button>Go Back</button>\n    </Dialog>\n  );\n}\n')),Object(a.b)("h4",{id:"with-aria-labelledby"},"With aria-labelledby"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"function Example(props) {\n  const labelId = `label--${useId(props.id)}`;\n  return (\n    <Dialog aria-labelledby={labelId}>\n      <h1 id={labelId}>Next Steps</h1>\n      <p>Follow these steps carefully!</p>\n      <button>Go Forward</button> <button>Go Back</button>\n    </Dialog>\n  );\n}\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"NOTE: American users may see ",Object(a.b)("inlineCode",{parentName:"p"},"aria-labelledby")," and suspect a typo. In some regions (including the UK and Great Britain), the word is indeed spelled ",Object(a.b)("inlineCode",{parentName:"p"},"labelled")," instead of ",Object(a.b)("inlineCode",{parentName:"p"},"labeled"),". The correct HTML attribute is ",Object(a.b)("inlineCode",{parentName:"p"},"aria-labelledby"),".")),Object(a.b)("p",null,"For more details, see the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://www.w3.org/TR/wai-aria/#aria-label"}),"W3C recommendations for ",Object(a.b)("inlineCode",{parentName:"a"},"aria-label")),"."),Object(a.b)("h3",{id:"using-aria-hidden-for-other-elements"},"Using aria-hidden for Other Elements"),Object(a.b)("p",null,'The aria role "dialog" has been problematic in the past with the virtual cursor, effectively hiding a lot of dialog content from screen reader users. Instead, Dialog will set ',Object(a.b)("inlineCode",{parentName:"p"},"aria-hidden")," on all nodes at the ",Object(a.b)("inlineCode",{parentName:"p"},"document.body")," root except for the currently active dialog. This traps the virtual cursor inside the dialog."),Object(a.b)("p",null,"This is a little unusual for a React component to traverse the DOM that it isn't a part of. Care has been taken to restore the manipulated attributes back to their original values."),Object(a.b)("h3",{id:"keyboard-accessibility"},"Keyboard Accessibility"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"key"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"action"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("kbd",null,"Escape")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"Dismisses the dialog (if the app allows)")))),Object(a.b)("h2",{id:"z-index-wars"},"Z-Index Wars"),Object(a.b)("p",null,"Dialog does not set a ",Object(a.b)("inlineCode",{parentName:"p"},"z-index"),"; it depends on the DOM order to be on top of the rest of the app (the overlay is inserted at the end of the document when it is opened). If your app is already battling in the Z-Index Wars, be sure to add a ",Object(a.b)("inlineCode",{parentName:"p"},"z-index")," to the ",Object(a.b)("inlineCode",{parentName:"p"},"<Dialog>")," or ",Object(a.b)("inlineCode",{parentName:"p"},"<DialogOverlay>")," that you render."))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-dialog-mdx-ae36d892e67ffb85b863.js.map