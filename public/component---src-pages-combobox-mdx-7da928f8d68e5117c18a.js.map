{"version":3,"sources":["webpack://reach-ui-website/./src/pages/combobox.mdx","webpack://reach-ui-website/./src/components/AsPropWarning.js","webpack://reach-ui-website/./src/components/Note.js","webpack://reach-ui-website/./src/components/Note.module.scss","webpack://reach-ui-website/./src/components/Pipe.js","webpack://reach-ui-website/./src/components/TOC.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","title","description","href","parentName","isMDXComponent","AsPropWarning","Note","className","cx","Pipe","TOC","children","label","TOCList","style","display","padding","listStyle","TOCLink","margin"],"mappings":"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","file":"component---src-pages-combobox-mdx-7da928f8d68e5117c18a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/reach/reach-ui/website/src/components/mdx-layout.js\";\nimport SEO from \"../components/SEO\";\nimport { TOC, TOCList, TOCLink } from \"../components/TOC\";\nimport { AsPropWarning } from \"../components/AsPropWarning\";\nimport { Pipe } from \"../components/Pipe\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <SEO title=\"Combobox\" description=\"Accessible combobox (autocomplete or autosuggest) component for React\" mdxType=\"SEO\" />\n    <h1 {...{\n      \"id\": \"combobox\"\n    }}>{`Combobox`}</h1>\n    <TOC mdxType=\"TOC\">\n  <TOCList mdxType=\"TOCList\">\n    <TOCLink href=\"#combobox-1\" mdxType=\"TOCLink\">Combobox</TOCLink>\n    <TOCLink href=\"#comboboxinput\" mdxType=\"TOCLink\">ComboboxInput</TOCLink>\n    <TOCLink href=\"#comboboxpopover\" mdxType=\"TOCLink\">ComboboxPopover</TOCLink>\n    <TOCLink href=\"#comboboxlist\" mdxType=\"TOCLink\">ComboboxList</TOCLink>\n    <TOCLink href=\"#comboboxoption\" mdxType=\"TOCLink\">ComboboxOption</TOCLink>\n    <TOCLink href=\"#comboboxoptiontext\" mdxType=\"TOCLink\">ComboboxOptionText</TOCLink>\n    <TOCLink href=\"#usecomboboxcontext\" mdxType=\"TOCLink\">useComboboxContext</TOCLink>\n    <TOCLink href=\"#usecomboboxoptioncontext\" mdxType=\"TOCLink\">useComboboxOptionContext</TOCLink>\n  </TOCList>\n    </TOC>\n    <ul>\n      <li parentName=\"ul\">{`Source: `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/reach/reach-ui/tree/main/packages/combobox\"\n        }}>{`https://github.com/reach/reach-ui/tree/main/packages/combobox`}</a></li>\n      <li parentName=\"ul\">{`WAI-ARIA: `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.w3.org/TR/wai-aria-practices-1.2/#combobox\"\n        }}>{`https://www.w3.org/TR/wai-aria-practices-1.2/#combobox`}</a></li>\n    </ul>\n    <p>{`Accessible combobox (autocomplete or autosuggest) component for React.`}</p>\n    <p>{`A combobox is the combination of an `}<inlineCode parentName=\"p\">{`<input type=\"text\"/>`}</inlineCode>{` and a list. The list is designed to help the user arrive at a value, but the value does not necessarily have to come from that list. Don't think of it like a `}<inlineCode parentName=\"p\">{`<select/>`}</inlineCode>{`, but more of an `}<inlineCode parentName=\"p\">{`<input type=\"text\"/>`}</inlineCode>{` with some suggestions. You can, however, validate that the value comes from the list, that's up to your app.`}</p>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p>{`From the command line in your project directory, run `}<inlineCode parentName=\"p\">{`npm install @reach/combobox`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`yarn add @reach/combobox`}</inlineCode>{`. Then import the components and styles that you need:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @reach/combobox\n# or\nyarn add @reach/combobox\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n  ComboboxOptionText,\n} from \"@reach/combobox\";\nimport \"@reach/combobox/styles.css\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"accessibility\"\n    }}>{`Accessibility`}</h2>\n    <p>{`Reach UI aims to handle most ARIA and accessibility concerns so that developers don't have to worry about it. Labeling is often the one thing Reach can't do for you by default since there are many ways to accomplish it, and some of those methods require app-level context.`}</p>\n    <p>{`However, we still aim to make accessibility as easy as possible. Labels for the compound `}<inlineCode parentName=\"p\">{`Combobox`}</inlineCode>{` component can go on the parent and we will forward the label to the correct nested component where it belongs.`}</p>\n    <p>{`For instance, instead of adding `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`<ComboboxInput>`}</inlineCode>{`, we can add it to `}<inlineCode parentName=\"p\">{`<Combobox>`}</inlineCode>{`. The same goes for `}<inlineCode parentName=\"p\">{`aria-labelledby`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Combobox aria-label=\"choose a fruit\">\n  <ComboboxInput />\n  <ComboboxPopover>\n    <ComboboxList>\n      <ComboboxOption value=\"Apple\" />\n      <ComboboxOption value=\"Banana\" />\n    </ComboboxList>\n  </ComboboxPopover>\n</Combobox>\n`}</code></pre>\n    <p>{`One benefit reaped from this pattern is that it alleviates the need for developers to think about where the `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`aria-labelledby`}</inlineCode>{` attributes belong in the component tree. Another benefit is that if the ARIA spec changes in the future (as it did from 1.1 to 1.2 for `}<inlineCode parentName=\"p\">{`Combobox`}</inlineCode>{`), Reach doesn't introduce a breaking API change to make accessibility improvements.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` You can still pass either `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`aria-labelledby`}</inlineCode>{` directly to `}<inlineCode parentName=\"p\">{`ComboboxInput`}</inlineCode>{` if you'd prefer and those values will override either respective prop passed into `}<inlineCode parentName=\"p\">{`Combobox`}</inlineCode>{`, though we discourage this. It's helpful for the component's context to keep a reference to its label. We may remove this option in a future release.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`To get you started, let's take a look at a few examples that grow from simple to complex, after the examples you can see the API for each component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-fixed-list-combobox\"\n    }}>{`Basic, Fixed List Combobox`}</h3>\n    <p>{`Like a `}<inlineCode parentName=\"p\">{`<table><tr><td/></tr></table>`}</inlineCode>{`, a full combobox is made up of multiple components. This example demonstrates all of the pieces you need in the simplest form possible.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <div>\n      <h4 id=\"demo\">Basic, Fixed List Combobox</h4>\n      <Combobox aria-labelledby=\"demo\">\n        <ComboboxInput />\n        <ComboboxPopover>\n          <ComboboxList>\n            <ComboboxOption value=\"Apple\" />\n            <ComboboxOption value=\"Banana\" />\n            <ComboboxOption value=\"Orange\" />\n            <ComboboxOption value=\"Pineapple\" />\n            <ComboboxOption value=\"Kiwi\" />\n          </ComboboxList>\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"custom-rendering-in-comboboxoption\"\n    }}>{`Custom Rendering in ComboboxOption`}</h3>\n    <p>{`Sometimes your items need to be more than just text, in these cases you can pass children to `}<inlineCode parentName=\"p\">{`ComboboxOption`}</inlineCode>{`, and then render a `}<inlineCode parentName=\"p\">{`<ComboboxOptionText/>`}</inlineCode>{` to keep the built-in text highlighting. Only the `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` is used to match, not the children.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Combobox aria-label=\"custom option demo\">\n      <ComboboxInput\n        placeholder=\"Custom Option Rendering\"\n        style={{ width: 300 }}\n      />\n      <ComboboxPopover>\n        <ComboboxList>\n          <ComboboxOption value=\"Apple\">\n            🍎 <ComboboxOptionText />\n          </ComboboxOption>\n          <ComboboxOption value=\"Banana\">\n            🍌 <ComboboxOptionText />\n          </ComboboxOption>\n          <ComboboxOption value=\"Orange\">\n            🍊 <ComboboxOptionText />\n          </ComboboxOption>\n          <ComboboxOption value=\"Pineapple\">\n            🍍 <ComboboxOptionText />\n          </ComboboxOption>\n          <ComboboxOption value=\"Kiwi\">\n            🥝 <ComboboxOptionText />\n          </ComboboxOption>\n        </ComboboxList>\n      </ComboboxPopover>\n    </Combobox>\n  );\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"clientside-search\"\n    }}>{`Clientside Search`}</h3>\n    <p>{`This demo searches a client-side list of all US Cities. Combobox does not implement any matching on your list (aside from highlighting the matched phrases in an option). Instead, you render an Option for each result you want in the list. So your job is to:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Establish the search term state`}</li>\n      <li parentName=\"ul\">{`Match the search to your list`}</li>\n      <li parentName=\"ul\">{`Render a `}<inlineCode parentName=\"li\">{`ComboboxOption`}</inlineCode>{` for each match`}</li>\n    </ul>\n    <p>{`There is nothing special about managing state for a combobox, it's like managing state for any other list in your app. As the input changes, you figure out what state you need, then render as many ComboboxOption elements as you want.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\n(() => {\n  function Example() {\n    const [term, setTerm] = React.useState(\"\");\n    const results = useCityMatch(term);\n    const handleChange = (event) => setTerm(event.target.value);\n\n    return (\n      <div>\n        <h4>Clientside Search</h4>\n        <Combobox aria-label=\"Cities\">\n          <ComboboxInput\n            className=\"city-search-input\"\n            onChange={handleChange}\n          />\n          {results && (\n            <ComboboxPopover className=\"shadow-popup\">\n              {results.length > 0 ? (\n                <ComboboxList>\n                  {results.slice(0, 10).map((result, index) => (\n                    <ComboboxOption\n                      key={index}\n                      value={\\`\\${result.city}, \\${result.state}\\`}\n                    />\n                  ))}\n                </ComboboxList>\n              ) : (\n                <span style={{ display: \"block\", margin: 8 }}>\n                  No results found\n                </span>\n              )}\n            </ComboboxPopover>\n          )}\n        </Combobox>\n      </div>\n    );\n  }\n\n  function useCityMatch(term) {\n    const throttledTerm = useThrottle(term, 100);\n    return React.useMemo(\n      () =>\n        term.trim() === \"\"\n          ? null\n          : matchSorter(cities, term, {\n              keys: [(item) => \\`\\${item.city}, \\${item.state}\\`],\n            }),\n      [throttledTerm]\n    );\n  }\n\n  return <Example />;\n})();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"server-side-search\"\n    }}>{`Server Side Search`}</h3>\n    <p>{`This is the same demo as above, except this time we're going to a server to get the match. This is recommended as the previous example had to download 350kb of city text! Again, there is nothing special about a ComboboxList as any other list in React. As the input changes, fetch data, set state, render options.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\n(() => {\n  function Example() {\n    const [searchTerm, setSearchTerm] = React.useState(\"\");\n    const cities = useCitySearch(searchTerm);\n    const handleSearchTermChange = (event) => {\n      setSearchTerm(event.target.value);\n    };\n\n    return (\n      <Combobox aria-label=\"Cities\">\n        <ComboboxInput\n          className=\"city-search-input\"\n          onChange={handleSearchTermChange}\n        />\n        {cities && (\n          <ComboboxPopover className=\"shadow-popup\">\n            {cities.length > 0 ? (\n              <ComboboxList>\n                {cities.map((city) => {\n                  const str = \\`\\${city.city}, \\${city.state}\\`;\n                  return <ComboboxOption key={str} value={str} />;\n                })}\n              </ComboboxList>\n            ) : (\n              <span style={{ display: \"block\", margin: 8 }}>\n                No results found\n              </span>\n            )}\n          </ComboboxPopover>\n        )}\n      </Combobox>\n    );\n  }\n\n  function useCitySearch(searchTerm) {\n    const [cities, setCities] = React.useState([]);\n\n    React.useEffect(() => {\n      if (searchTerm.trim() !== \"\") {\n        let isFresh = true;\n        fetchCities(searchTerm).then((cities) => {\n          if (isFresh) setCities(cities);\n        });\n        return () => (isFresh = false);\n      }\n    }, [searchTerm]);\n\n    return cities;\n  }\n\n  const cache = {};\n  function fetchCities(value) {\n    if (cache[value]) {\n      return Promise.resolve(cache[value]);\n    }\n    return fetch(\"https://city-search.chaance.vercel.app/api?\" + value)\n      .then((res) => res.json())\n      .then((result) => {\n        cache[value] = result;\n        return result;\n      });\n  }\n\n  return <Example />;\n})();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"lots-of-arbitrary-elements\"\n    }}>{`Lots of arbitrary elements`}</h3>\n    <p>{`Sometimes your list is a bit more complicated, like categories of results, and lots of elements besides options inside the popover.`}</p>\n    <p>{`You can even have other interactive elements inside the popover, it won't close when the user interacts with them.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\n(() => {\n  function Example() {\n    const [term, setTerm] = React.useState(\"\");\n    const results = useCityMatch(term);\n    const handleChange = (event) => setTerm(event.target.value);\n\n    return (\n      <div>\n        <h4>Lots of stuff going on</h4>\n        <Combobox>\n          <ComboboxInput\n            onChange={handleChange}\n            style={{ width: 300, margin: 0 }}\n          />\n          {results && (\n            <ComboboxPopover style={{ width: 300 }}>\n              {results.length > 0 ? (\n                <ComboboxList>\n                  <h5 style={heading}>Top 3 results!</h5>\n                  {results.slice(0, 3).map((result, index) => (\n                    <ComboboxOption\n                      key={index}\n                      value={\\`\\${result.city}, \\${result.state}\\`}\n                    />\n                  ))}\n                  {results.length > 3 && (\n                    <React.Fragment>\n                      <h5 style={heading}>The Rest</h5>\n                      {results.slice(3, 10).map((result, index) => (\n                        <ComboboxOption\n                          key={index}\n                          value={\\`\\${result.city}, \\${result.state}\\`}\n                        />\n                      ))}\n                    </React.Fragment>\n                  )}\n                </ComboboxList>\n              ) : (\n                <div>\n                  <p style={{ padding: 10, textAlign: \"center\" }}>\n                    No results 😞\n                  </p>\n                </div>\n              )}\n              <p style={{ textAlign: \"center\", padding: 10 }}>\n                <button>Create a new record</button>\n              </p>\n            </ComboboxPopover>\n          )}\n        </Combobox>\n      </div>\n    );\n  }\n\n  function useCityMatch(term) {\n    const throttledTerm = useThrottle(term, 100);\n    return React.useMemo(\n      () =>\n        term.trim() === \"\"\n          ? null\n          : matchSorter(cities, term, {\n              keys: [(item) => \\`\\${item.city}, \\${item.state}\\`],\n            }),\n      [throttledTerm]\n    );\n  }\n\n  const heading = {\n    fontSize: \"100%\",\n    color: \"red\",\n    fontWeight: \"bold\",\n    textTransform: \"uppercase\",\n    margin: 0,\n    padding: 5,\n  };\n\n  return <Example />;\n})();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"custom-styling\"\n    }}>{`Custom styling`}</h3>\n    <p>{`This demo shows how you can control a lot about the styling. It uses `}<inlineCode parentName=\"p\">{`portal={false}`}</inlineCode>{` on the ComboboxPopover which allows us to create a continuous outline around the entire thing.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\n(() => {\n  function Example() {\n    let [term, setTerm] = React.useState(\"\");\n    let results = useCityMatch(term);\n    const handleChange = (event) => setTerm(event.target.value);\n\n    return (\n      <Combobox className=\"pink\">\n        <ComboboxInput onChange={handleChange} />\n        {results && (\n          <ComboboxPopover portal={false}>\n            <hr />\n            {results.length > 0 ? (\n              <ComboboxList>\n                {results.slice(0, 10).map((result, index) => (\n                  <ComboboxOption\n                    key={index}\n                    value={\\`\\${result.city}, \\${result.state}\\`}\n                  />\n                ))}\n              </ComboboxList>\n            ) : (\n              <p\n                style={{\n                  margin: 0,\n                  color: \"#454545\",\n                  padding: \"0.25rem 1rem 0.75rem 1rem\",\n                  fontStyle: \"italic\",\n                }}\n              >\n                No results :(\n              </p>\n            )}\n          </ComboboxPopover>\n        )}\n      </Combobox>\n    );\n  }\n\n  function useCityMatch(term) {\n    let throttledTerm = useThrottle(term, 100);\n    return React.useMemo(\n      () =>\n        term.trim() === \"\"\n          ? null\n          : matchSorter(cities, term, {\n              keys: [(item) => \\`\\${item.city}, \\${item.state}\\`],\n            }),\n      [throttledTerm]\n    );\n  }\n\n  return <Example />;\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"component-api\"\n    }}>{`Component API`}</h2>\n    <h3 {...{\n      \"id\": \"combobox-1\"\n    }}>{`Combobox`}</h3>\n    <p>{`Parent component that sets up the proper ARIA roles and context for the rest of the components.`}</p>\n    <h4 {...{\n      \"id\": \"combobox-css-selectors\"\n    }}>{`Combobox CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-combobox] {\n}\n\n/* root element in a specific state  */\n/* possible states: \"idle\" | \"suggesting\" | \"navigating\" | \"interacting\"  */\n[data-reach-combobox][data-state=\"STATE_REF\"] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"combobox-props\"\n    }}>{`Combobox Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#combobox-as\"\n            }}><inlineCode parentName=\"a\">{`as`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode>{` `}<Pipe mdxType=\"Pipe\" />{` `}<inlineCode parentName=\"td\">{`Component`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#combobox-children\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`node`}</inlineCode>{` `}<Pipe mdxType=\"Pipe\" />{` `}<inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#combobox-openonfocus\"\n            }}><inlineCode parentName=\"a\">{`openOnFocus`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#combobox-onselect\"\n            }}><inlineCode parentName=\"a\">{`onSelect`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"combobox-as\"\n    }}>{`Combobox as`}</h5>\n    <p><inlineCode parentName=\"p\">{`as?: keyof JSX.IntrinsicElements | React.ComponentType`}</inlineCode></p>\n    <p>{`A string representing an HTML element or a React component that will tell the `}<inlineCode parentName=\"p\">{`ComboboxOption`}</inlineCode>{` what element to render. Defaults to `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{`.`}</p>\n    <AsPropWarning mdxType=\"AsPropWarning\" />\n    <h5 {...{\n      \"id\": \"combobox-children\"\n    }}>{`Combobox children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode | ((props: { id: string | undefined; isExpanded: boolean; navigationValue: string | null; state: string }) => React.ReactNode)`}</inlineCode></p>\n    <p>{`Combobox expects to receive `}<inlineCode parentName=\"p\">{`ComboboxInput`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ComboboxPopover`}</inlineCode>{` as children. You can also pass a render function to expose data for `}<inlineCode parentName=\"p\">{`Combobox`}</inlineCode>{` to its descendants.`}</p>\n    <h5 {...{\n      \"id\": \"combobox-openonfocus\"\n    }}>{`Combobox openOnFocus`}</h5>\n    <p><inlineCode parentName=\"p\">{`openOnFocus?: boolean`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Combobox openOnFocus />\n`}</code></pre>\n    <p>{`Defaults to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`.`}</p>\n    <p>{`If true, the popover opens when focus is on the text box.`}</p>\n    <h5 {...{\n      \"id\": \"combobox-onselect\"\n    }}>{`Combobox onSelect`}</h5>\n    <p><inlineCode parentName=\"p\">{`onSelect?(value: string): void`}</inlineCode></p>\n    <p>{`Called with the selection value when the user makes a selection from the list.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Combobox onSelect={(item) => {}} />\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"comboboxinput\"\n    }}>{`ComboboxInput`}</h3>\n    <p>{`Wraps an `}<inlineCode parentName=\"p\">{`<input/>`}</inlineCode>{` with a couple extra props that work with the combobox.`}</p>\n    <h4 {...{\n      \"id\": \"comboboxinput-css-selectors\"\n    }}>{`ComboboxInput CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-combobox-input] {\n}\n\n/* input element in a specific state */\n/* possible states: \"idle\" | \"suggesting\" | \"navigating\" | \"interacting\"  */\n[data-reach-combobox-input][data-state=\"STATE_REF\"] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"comboboxinput-props\"\n    }}>{`ComboboxInput Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#comboboxinput-as\"\n            }}><inlineCode parentName=\"a\">{`as`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode>{` `}<Pipe mdxType=\"Pipe\" />{` `}<inlineCode parentName=\"td\">{`Component`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#comboboxinput-selectonclick\"\n            }}>{`selectOnClick`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#comboboxinput-autocomplete\"\n            }}>{`autocomplete`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"comboboxinput-as\"\n    }}>{`ComboboxInput as`}</h5>\n    <p><inlineCode parentName=\"p\">{`as?: keyof JSX.IntrinsicElements | React.ComponentType`}</inlineCode></p>\n    <p>{`A string representing an HTML element or a React component that will tell the `}<inlineCode parentName=\"p\">{`ComboboxInput`}</inlineCode>{` what element to render. Defaults to `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` Recreating native `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` behavior and all of its nuance with a non-semantic element is `}<em parentName=\"p\">{`extremely difficult`}</em>{` and may make the component inaccessible to many users. We do not recommend doing this.`}</p>\n    </blockquote>\n    <h5 {...{\n      \"id\": \"comboboxinput-selectonclick\"\n    }}>{`ComboboxInput selectOnClick`}</h5>\n    <p><inlineCode parentName=\"p\">{`selectOnClick?: boolean`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<ComboboxInput selectOnClick />\n`}</code></pre>\n    <p>{`Defaults to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`.`}</p>\n    <p>{`If true, when the user clicks inside the text box the current value will be selected. Use this if the user is likely to delete all the text anyway (like the URL bar in browsers).`}</p>\n    <p>{`However, if the user is likely to want to tweak the value, leave this `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`, like a google search--the user is likely wanting to edit their search, not replace it completely.`}</p>\n    <h5 {...{\n      \"id\": \"comboboxinput-autocomplete\"\n    }}>{`ComboboxInput autocomplete`}</h5>\n    <p><inlineCode parentName=\"p\">{`autocomplete?: boolean`}</inlineCode></p>\n    <p>{`Defaults to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n    <p>{`Determines if the value in the input changes or not as the user navigates with the keyboard. If `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`, the value changes, if `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` the value doesn't change.`}</p>\n    <p>{`Set this to false when you don't really need the value from the input but want to populate some other state (like the recipient selector in Gmail). But if your input is more like a normal `}<inlineCode parentName=\"p\">{`<input type=\"text\"/>`}</inlineCode>{`, then leave the `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` default.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<ComboboxInput autocomplete={false} />\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"comboboxpopover\"\n    }}>{`ComboboxPopover`}</h3>\n    <p>{`Contains the popup that renders the list. Because some UI needs to render more than the list in the popup, you need to render one of these around the list. For example, maybe you want to render the number of results suggested.`}</p>\n    <h4 {...{\n      \"id\": \"comboboxpopover-css-selectors\"\n    }}>{`ComboboxPopover CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-combobox-popover] {\n}\n\n/* popover element in a specific state */\n/* possible states: \"idle\" | \"suggesting\" | \"navigating\" | \"interacting\"  */\n[data-reach-combobox-popover][data-state=\"STATE_REF\"] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"comboboxpopover-props\"\n    }}>{`ComboboxPopover Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#comboboxpopover-portal\"\n            }}><inlineCode parentName=\"a\">{`portal`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"comboboxpopover-portal\"\n    }}>{`ComboboxPopover portal`}</h5>\n    <p>{`If you pass `}<inlineCode parentName=\"p\">{`<ComboboxPopover portal={false} />`}</inlineCode>{` the popover will not render inside of a portal, but in the same order as the React tree. This is mostly useful for styling the entire component together, like the pink focus outline in the example earlier in this page.`}</p>\n    <p>{`Defaults to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"comboboxlist\"\n    }}>{`ComboboxList`}</h3>\n    <p>{`Contains the `}<inlineCode parentName=\"p\">{`ComboboxOption`}</inlineCode>{` elements and sets up the proper aria attributes for the list.`}</p>\n    <h4 {...{\n      \"id\": \"comboboxlist-css-selectors\"\n    }}>{`ComboboxList CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-combobox-list] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"comboboxlist-props\"\n    }}>{`ComboboxList Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#comboboxlist-as\"\n            }}><inlineCode parentName=\"a\">{`as`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode>{` `}<Pipe mdxType=\"Pipe\" />{` `}<inlineCode parentName=\"td\">{`Component`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#comboboxlist-persistselection\"\n            }}><inlineCode parentName=\"a\">{`persistSelection`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"comboboxlist-as\"\n    }}>{`ComboboxList as`}</h5>\n    <p><inlineCode parentName=\"p\">{`as?: keyof JSX.IntrinsicElements | React.ComponentType`}</inlineCode></p>\n    <p>{`A string representing an HTML element or a React component that will tell the `}<inlineCode parentName=\"p\">{`ComboboxList`}</inlineCode>{` what element to render. Defaults to `}<inlineCode parentName=\"p\">{`ul`}</inlineCode>{`.`}</p>\n    <AsPropWarning mdxType=\"AsPropWarning\" />\n    <h5 {...{\n      \"id\": \"comboboxlist-persistselection\"\n    }}>{`ComboboxList persistSelection`}</h5>\n    <p><inlineCode parentName=\"p\">{`persistSelection?: boolean`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<ComboboxList persistSelection />\n`}</code></pre>\n    <p>{`Defaults to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`. When `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` and the list is opened, if an option's value matches the value in the input, it will automatically be highlighted and be the starting point for any keyboard navigation of the list.`}</p>\n    <p>{`This allows you to treat a Combobox more like a `}<inlineCode parentName=\"p\">{`<select>`}</inlineCode>{` than an `}<inlineCode parentName=\"p\">{`<input/>`}</inlineCode>{`, but be mindful that the user is still able to put any arbitrary value into the input, so if the only valid values for the input are from the list, your app will need to do that validation on blur or submit of the form.`}</p>\n    <h3 {...{\n      \"id\": \"comboboxoption\"\n    }}>{`ComboboxOption`}</h3>\n    <p>{`An option that is suggested to the user as they interact with the combobox.`}</p>\n    <h4 {...{\n      \"id\": \"comboboxoption-css-selectors\"\n    }}>{`ComboboxOption CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-combobox-option] {\n}\n\n/* option element when highlighted */\n[data-reach-combobox-option][data-highlighted] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"comboboxoption-props\"\n    }}>{`ComboboxOption Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#comboboxoption-as\"\n            }}><inlineCode parentName=\"a\">{`as`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode>{` `}<Pipe mdxType=\"Pipe\" />{` `}<inlineCode parentName=\"td\">{`Component`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#comboboxoption-value\"\n            }}><inlineCode parentName=\"a\">{`value`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#comboboxoption-children\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`node`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"comboboxoption-as\"\n    }}>{`ComboboxOption as`}</h5>\n    <p><inlineCode parentName=\"p\">{`as?: keyof JSX.IntrinsicElements | React.ComponentType`}</inlineCode></p>\n    <p>{`A string representing an HTML element or a React component that will tell the `}<inlineCode parentName=\"p\">{`ComboboxOption`}</inlineCode>{` what element to render. Defaults to `}<inlineCode parentName=\"p\">{`li`}</inlineCode>{`.`}</p>\n    <AsPropWarning mdxType=\"AsPropWarning\" />\n    <h5 {...{\n      \"id\": \"comboboxoption-value\"\n    }}>{`ComboboxOption value`}</h5>\n    <p><inlineCode parentName=\"p\">{`value?: string`}</inlineCode></p>\n    <p>{`The value to match against when suggesting.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<ComboboxOption value=\"Salt Lake City, Utah\" />\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"comboboxoption-children\"\n    }}>{`ComboboxOption children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children?: React.ReactNode | ((props: { value: string; index: number }) => React.ReactNode)`}</inlineCode></p>\n    <p>{`Optional. If omitted, the `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` will be used as the children like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<ComboboxOption value=\"Seattle, Tacoma, Washington\" />\n`}</code></pre>\n    <p>{`But if you need to control a bit more, you can put whatever children you want, but make sure to render a `}<inlineCode parentName=\"p\">{`ComboboxOptionText`}</inlineCode>{` as well, so the value is still displayed with the text highlighting on the matched portions.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<ComboboxOption value=\"Apple\" />\n🍎 <ComboboxOptionText/>\n</ComboboxOption>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"comboboxoptiontext\"\n    }}>{`ComboboxOptionText`}</h3>\n    <p>{`Renders the value of a `}<inlineCode parentName=\"p\">{`ComboboxOption`}</inlineCode>{` as text but with spans wrapping the matching and non-matching segments of text.`}</p>\n    <p>{`So given an option like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<ComboboxOption value=\"Seattle\">\n  🌧 <ComboboxOptionText />\n</ComboboxOption>\n`}</code></pre>\n    <p>{`And the user typed `}<inlineCode parentName=\"p\">{`Sea`}</inlineCode>{`, the out would be:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<span data-user-value>Sea</span><span data-suggested-value>ttle</span>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"comboboxoptiontext-css-selectors\"\n    }}>{`ComboboxOptionText CSS Selectors`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-combobox-option-text] {\n}\n\n/* the matching segments of text */\n[data-user-value] {\n}\n\n/* the unmatching segments */\n[data-suggested-value] {\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"usecomboboxcontext\"\n    }}>{`useComboboxContext`}</h3>\n    <p><inlineCode parentName=\"p\">{`function useComboboxContext(): { id: string | undefined; isExpanded: boolean; navigationValue: string | null; state: string }`}</inlineCode></p>\n    <p>{`A hook that exposes data for a given `}<inlineCode parentName=\"p\">{`Combobox`}</inlineCode>{` component to its descendants.`}</p>\n    <h3 {...{\n      \"id\": \"usecomboboxoptioncontext\"\n    }}>{`useComboboxOptionContext`}</h3>\n    <p><inlineCode parentName=\"p\">{`function useComboboxOptionContext(): { value: string; index: number }`}</inlineCode></p>\n    <p>{`A hook that exposes data for a given `}<inlineCode parentName=\"p\">{`ComboboxOption`}</inlineCode>{` component to its descendants.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from \"react\";\nimport { Note } from \"./Note\";\n\nexport function AsPropWarning() {\n  return (\n    <Note>\n      <p>\n        <strong>NOTE:</strong> Many semantic elements, such as{\" \"}\n        <code>button</code> elements, have meaning to assistive devices and\n        browsers that provide context for the user and, in many cases, provide\n        or restrict interactive behaviors. Use caution when overriding our\n        defaults and make sure that the element you choose to render provides\n        the same experience for all users.\n      </p>\n    </Note>\n  );\n}\n","import * as React from \"react\";\nimport cx from \"clsx\";\nimport * as styles from \"./Note.module.scss\";\n\nexport function Note(props) {\n  return <div {...props} className={cx(props.className, styles.Note)} />;\n}\n","// extracted by mini-css-extract-plugin\nexport var Note = \"Note-module--Note--2Ujzs\";","import * as React from \"react\";\n\nexport function Pipe() {\n  return <>|</>;\n}\n","import * as React from \"react\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\n\nexport function TOC({ children, label = \"Table of Contents\", ...props }) {\n  return (\n    <nav className=\"toc\" {...props}>\n      <VisuallyHidden>\n        <h2>{label}</h2>\n      </VisuallyHidden>\n      {children}\n    </nav>\n  );\n}\n\nexport function TOCList({ children, style = {}, ...props }) {\n  return (\n    <ul\n      style={{\n        display: \"block\",\n        padding: 0,\n        listStyle: \"none\",\n        ...style,\n      }}\n      {...props}\n    >\n      {children}\n    </ul>\n  );\n}\n\nexport function TOCLink({ href, children, ...props }) {\n  return (\n    <li style={{ display: \"inline-block\", margin: 0, padding: 0 }}>\n      <a href={href} {...props}>\n        {children}\n      </a>\n    </li>\n  );\n}\n"],"sourceRoot":""}