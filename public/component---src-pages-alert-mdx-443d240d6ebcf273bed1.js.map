{"version":3,"sources":["webpack:///./src/pages/alert.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","title","description","parentName","isMDXComponent"],"mappings":"uPASaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAKC,MAAM,QAAQC,YAAY,0DAA0DF,QAAQ,QACjG,iBAAQ,CACN,GAAM,SADR,SAGA,sBACE,kBAAIG,WAAW,MAAf,WAAgC,+BAAGA,WAAW,MAAS,CACnD,KAAQ,+DADoB,+DAGhC,kBAAIA,WAAW,MAAf,aAAkC,+BAAGA,WAAW,MAAS,CACrD,KAAQ,wDADsB,yDAIpC,oPACA,4MAA2L,0BAAYA,WAAW,KAAvB,WAA3L,UAAyP,0BAAYA,WAAW,KAAvB,SAAzP,KACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,knBA4BL,iBAAQ,CACN,GAAM,gBADR,gBAGA,6EAA4D,0BAAYA,WAAW,KAAvB,4BAA5D,OAAwI,0BAAYA,WAAW,KAAvB,yBAAxI,gCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,4DAML,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wCAIL,iBAAQ,CACN,GAAM,iBADR,iBAGA,iBAAQ,CACN,GAAM,WADR,SAGA,iBAAQ,CACN,GAAM,eADR,eAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,cAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,+BAAGA,WAAW,MAAS,CACtB,KAAQ,qBACP,0BAAYA,WAAW,KAAvB,OAFF,WAGH,gCAAIA,WAAW,MAAS,CACtB,MAAS,QAEX,gCAAIA,WAAW,MAAS,CACtB,MAAS,SAGb,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,+BAAGA,WAAW,MAAS,CACtB,KAAQ,gBACP,0BAAYA,WAAW,KAAvB,UACL,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,0BAAYA,WAAW,MAAvB,SACH,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,+BAAGA,WAAW,MAAS,CACtB,KAAQ,oBACP,0BAAYA,WAAW,KAAvB,cACL,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,0BAAYA,WAAW,MAAvB,SACH,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,YAMN,iBAAQ,CACN,GAAM,mBADR,mBAGA,sFAAqE,0BAAYA,WAAW,KAAvB,OAArE,aACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wOAgBL,iBAAQ,CACN,GAAM,cADR,cAGA,qBAAG,0BAAYA,WAAW,KAAvB,kCACH,mJACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yOAYL,gFACA,iBAAQ,CACN,GAAM,kBADR,kBAGA,qBAAG,0BAAYA,WAAW,KAAvB,+BACH,gDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6EAWTN,EAAWO,gBAAiB","file":"component---src-pages-alert-mdx-443d240d6ebcf273bed1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/reach/reach-ui/website/src/components/mdx-layout.js\";\nimport SEO from \"../components/SEO\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <SEO title=\"Alert\" description=\"Accessible component to create alert messages for React\" mdxType=\"SEO\" />\n    <h1 {...{\n      \"id\": \"alert\"\n    }}>{`Alert`}</h1>\n    <ul>\n      <li parentName=\"ul\">{`Source: `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/reach/reach-ui/tree/main/packages/alert\"\n        }}>{`https://github.com/reach/reach-ui/tree/main/packages/alert`}</a></li>\n      <li parentName=\"ul\">{`WAI-ARIA: `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.w3.org/TR/wai-aria-practices-1.2/#alert\"\n        }}>{`https://www.w3.org/TR/wai-aria-practices-1.2/#alert`}</a></li>\n    </ul>\n    <p>{`Screen-reader-friendly alert messages. In many apps developers add \"alert\" messages when network events or other things happen. Users with assistive technologies may not know about the message unless you develop for it.`}</p>\n    <p>{`The Alert component will announce to assistive technologies whatever you render to the screen. If you don't have a screen reader on you won't notice a difference between rendering `}<inlineCode parentName=\"p\">{`<Alert>`}</inlineCode>{` vs. a `}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example(props) {\n  const [messages, setMessages] = React.useState([]);\n  return (\n    <div>\n      <button\n        onClick={() => {\n          setMessages((prevMessages) =>\n            prevMessages.concat([\\`Message #\\${prevMessages.length + 1}\\`])\n          );\n          setTimeout(() => {\n            setMessages((prevMessages) => prevMessages.slice(1));\n          }, 5000);\n        }}\n      >\n        Add a message\n      </button>\n      <div>\n        {messages.map((message, index) => (\n          <Alert key={index}>{message}</Alert>\n        ))}\n      </div>\n    </div>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p>{`From the command line in your project directory, run `}<inlineCode parentName=\"p\">{`npm install @reach/alert`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`yarn add @reach/alert`}</inlineCode>{`. Then import the component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @reach/alert\n# or\nyarn add @reach/alert\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import Alert from \"@reach/alert\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"component-api\"\n    }}>{`Component API`}</h2>\n    <h3 {...{\n      \"id\": \"alert-1\"\n    }}>{`Alert`}</h3>\n    <h4 {...{\n      \"id\": \"alert-props\"\n    }}>{`Alert Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#alert-div-props\"\n            }}><inlineCode parentName=\"a\">{`div`}</inlineCode>{` props`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#alert-type\"\n            }}><inlineCode parentName=\"a\">{`type`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`enum`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#alert-children\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`node`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true\\``}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"alert-div-props\"\n    }}>{`Alert div props`}</h5>\n    <p>{`Any props not listed above will be spread onto the underlying `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{` element.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Alert\n      style={{\n        background: \"hsla(10, 50%, 50%, .10)\",\n        padding: \"10px\",\n      }}\n    >\n      ❗️ Woah! Something went wrong.\n    </Alert>\n  );\n}\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"alert-type\"\n    }}>{`Alert type`}</h5>\n    <p><inlineCode parentName=\"p\">{`type?: \"assertive\" | \"polite\"`}</inlineCode></p>\n    <p>{`Controls whether the assistive technology should read immediately (\"assertive\") or wait until the user is idle (\"polite\").`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Alert type=\"polite\">\n  This is the default\n</Alert>\n\n<Alert type=\"assertive\">\n  If a screen reader is currently reading something and\n  you render this, it will interrupt the user and read\n  this immediately.\n</Alert>\n`}</code></pre>\n    <p>{`You should probably stick with polite most of the time.`}</p>\n    <h5 {...{\n      \"id\": \"alert-children\"\n    }}>{`Alert children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode;`}</inlineCode></p>\n    <p>{`Regular React children.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Alert>\n  <p>Whatever you want here</p>\n  <p>Is fine.</p>\n</Alert>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}