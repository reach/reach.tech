{"version":3,"sources":["webpack:///./src/components/TOC.js","webpack:///./src/pages/alert-dialog.mdx"],"names":["TOC","children","label","props","className","TOCList","style","display","padding","listStyle","TOCLink","href","margin","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","title","description","parentName","isMDXComponent"],"mappings":"ymCAGO,SAASA,EAAT,GAAmE,IAApDC,EAAmD,EAAnDA,SAAmD,IAAzCC,aAAyC,MAAjC,oBAAiC,EAATC,EAAS,0BACvE,OACE,uCAAKC,UAAU,OAAUD,GACvB,kBAAC,IAAD,KACE,4BAAKD,IAEND,GAKA,SAASI,EAAT,GAAsD,IAAnCJ,EAAkC,EAAlCA,SAAkC,IAAxBK,aAAwB,MAAhB,GAAgB,EAATH,EAAS,0BAC1D,OACE,sCACEG,MAAK,GACHC,QAAS,QACTC,QAAS,EACTC,UAAW,QACRH,IAEDH,GAEHF,GAKA,SAASS,EAAT,GAAgD,IAA7BC,EAA4B,EAA5BA,KAAMV,EAAsB,EAAtBA,SAAaE,EAAS,yBACpD,OACE,wBAAIG,MAAO,CAAEC,QAAS,eAAgBK,OAAQ,EAAGJ,QAAS,IACxD,qCAAGG,KAAMA,GAAUR,GAChBF,M,8OC1BF,IAAMY,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGf,E,oIACF,mBACD,OAAO,YAACY,EAAD,iBAAeD,EAAiBX,EAAhC,CAAuCe,WAAYA,EAAYC,QAAQ,cAI5E,YAAC,IAAD,CAAKC,MAAM,eAAeC,YAAY,8CAA8CF,QAAQ,QAC5F,iBAAQ,CACN,GAAM,gBADR,gBAGA,YAAC,IAAD,CAAKA,QAAQ,OACf,YAAC,IAAD,CAASA,QAAQ,WACf,YAAC,IAAD,CAASR,KAAK,eAAeQ,QAAQ,WAArC,eACA,YAAC,IAAD,CAASR,KAAK,sBAAsBQ,QAAQ,WAA5C,sBACA,YAAC,IAAD,CAASR,KAAK,0BAA0BQ,QAAQ,WAAhD,0BACA,YAAC,IAAD,CAASR,KAAK,sBAAsBQ,QAAQ,WAA5C,sBACA,YAAC,IAAD,CAASR,KAAK,sBAAsBQ,QAAQ,WAA5C,wBAGA,sBACE,kBAAIG,WAAW,MAAf,WAAgC,+BAAGA,WAAW,MAAS,CACnD,KAAQ,sEADoB,sEAGhC,kBAAIA,WAAW,MAAf,aAAkC,+BAAGA,WAAW,MAAS,CACrD,KAAQ,8DADsB,+DAIpC,iPACA,oDAAmC,0BAAYA,WAAW,KAAvB,eAAnC,KAAgG,0BAAYA,WAAW,KAAvB,oBAAhG,SAAsK,0BAAYA,WAAW,KAAvB,0BAAtK,uGAAgV,0BAAYA,WAAW,KAAvB,sBAAhV,QAAuZ,0BAAYA,WAAW,KAAvB,sBAAvZ,eAAqe,0BAAYA,WAAW,KAAvB,eAAre,KACA,iDAAgC,kBAAIA,WAAW,KAAf,qBAAhC,8IAA4N,0BAAYA,WAAW,KAAvB,uBAA5N,UACA,oDAAmC,0BAAYA,WAAW,KAAvB,oBAAnC,mEAAmK,0BAAYA,WAAW,KAAvB,0BAAnK,sNAA4b,0BAAYA,WAAW,KAAvB,oBAA5b,QAAigB,0BAAYA,WAAW,KAAvB,0BAAjgB,KACA,gDAA+B,+BAAGA,WAAW,KAAQ,CACjD,KAAQ,qBADmB,UAA/B,QAE4B,0BAAYA,WAAW,KAAvB,eAF5B,oCAEwH,0BAAYA,WAAW,KAAvB,UAFxH,cAEyL,0BAAYA,WAAW,KAAvB,sBAFzL,OAE+P,0BAAYA,WAAW,KAAvB,iBAF/P,SAEkU,0BAAYA,WAAW,KAAvB,sBAFlU,OAEwY,0BAAYA,WAAW,KAAvB,iBAFxY,KAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yiCAmCL,iBAAQ,CACN,GAAM,gBADR,gBAGA,6EAA4D,0BAAYA,WAAW,KAAvB,mCAA5D,OAA+I,0BAAYA,WAAW,KAAvB,gCAA/I,+CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0EAML,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4JAUL,iBAAQ,CACN,GAAM,iBADR,iBAGA,iBAAQ,CACN,GAAM,eADR,eAGA,wEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,oHAOL,iBAAQ,CACN,GAAM,qBADR,qBAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,cAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,+BAAGA,WAAW,MAAS,CACtB,KAAQ,8BACP,0BAAYA,WAAW,KAAvB,UAFF,WAGH,gCAAIA,WAAW,MAAS,CACtB,MAAS,QAEX,gCAAIA,WAAW,MAAS,CACtB,MAAS,SAGb,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,+BAAGA,WAAW,MAAS,CACtB,KAAQ,wBACP,0BAAYA,WAAW,KAAvB,YACL,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,0BAAYA,WAAW,MAAvB,SACH,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,+BAAGA,WAAW,MAAS,CACtB,KAAQ,2BACP,0BAAYA,WAAW,KAAvB,eACL,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,0BAAYA,WAAW,MAAvB,SACH,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,+BAAGA,WAAW,MAAS,CACtB,KAAQ,qCACP,0BAAYA,WAAW,KAAvB,yBACL,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,0BAAYA,WAAW,MAAvB,SACH,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,+BAAGA,WAAW,MAAS,CACtB,KAAQ,0BACP,0BAAYA,WAAW,KAAvB,cACL,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,0BAAYA,WAAW,MAAvB,SACH,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,WAMN,iBAAQ,CACN,GAAM,4BADR,4BAGA,sFAAqE,0BAAYA,WAAW,KAAvB,UAArE,yDAAiL,0BAAYA,WAAW,KAAvB,kCAAjL,KACA,4BAAW,+BAAGA,WAAW,KAAQ,CAC7B,KAAQ,kCADD,qBAEgB,0BAAYA,WAAW,KAAvB,UAFhB,UAAX,0BAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uLAQL,iBAAQ,CACN,GAAM,sBADR,sBAGA,qBAAG,0BAAYA,WAAW,KAAvB,qBACH,gFAA+D,0BAAYA,WAAW,KAAvB,QAA/D,KACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,kNAUL,uFAAsE,0BAAYA,WAAW,KAAvB,kBAAtE,yPAA0X,0BAAYA,WAAW,KAAvB,UAA1X,iBACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6JAUL,6IACA,iBAAQ,CACN,GAAM,yBADR,yBAGA,qBAAG,0BAAYA,WAAW,KAAvB,wDACH,+KACA,qBAAG,sBAAQA,WAAW,KAAnB,aAAH,iBAAkE,0BAAYA,WAAW,KAAvB,aAAlE,iCAAyJ,0BAAYA,WAAW,KAAvB,uBAAzJ,mBACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qzCA2CL,iBAAQ,CACN,GAAM,mCADR,mCAGA,qBAAG,0BAAYA,WAAW,KAAvB,wDACH,yIACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qiCAqCL,iBAAQ,CACN,GAAM,wBADR,wBAGA,qBAAG,0BAAYA,WAAW,KAAvB,8BACH,6FAA4E,0BAAYA,WAAW,KAAvB,oBAA5E,KAA8I,0BAAYA,WAAW,KAAvB,0BAA9I,+FACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wUAaL,iBAAQ,CACN,GAAM,oBADR,oBAGA,6JACA,8CAA6B,0BAAYA,WAAW,KAAvB,eAA7B,iDACA,iBAAQ,CACN,GAAM,kCADR,kCAGA,uCAAsB,+BAAGA,WAAW,KAAQ,CACxC,KAAQ,sBADU,iBAAtB,KAGA,mEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2CAKL,iBAAQ,CACN,GAAM,0BADR,0BAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,+BAAGA,WAAW,MAAS,CACtB,KAAQ,gCACP,0BAAYA,WAAW,KAAvB,OAFF,cAMT,iBAAQ,CACN,GAAM,8BADR,8BAGA,8DAA6C,0BAAYA,WAAW,KAAvB,OAA7C,aACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,mDAIL,iBAAQ,CACN,GAAM,0BADR,0BAGA,sLACA,iBAAQ,CACN,GAAM,wCADR,wCAGA,uCAAsB,+BAAGA,WAAW,KAAQ,CACxC,KAAQ,sBADU,iBAAtB,KAGA,yEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,iDAKL,iBAAQ,CACN,GAAM,gCADR,gCAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,+BAAGA,WAAW,MAAS,CACtB,KAAQ,sCACP,0BAAYA,WAAW,KAAvB,OAFF,cAMT,iBAAQ,CACN,GAAM,oCADR,oCAGA,8DAA6C,0BAAYA,WAAW,KAAvB,OAA7C,aACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+DAIL,iBAAQ,CACN,GAAM,sBADR,sBAGA,6OACA,iDAAgC,0BAAYA,WAAW,KAAvB,sBAAhC,YACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gpCAyCL,iBAAQ,CACN,GAAM,oCADR,oCAGA,uCAAsB,+BAAGA,WAAW,KAAQ,CACxC,KAAQ,sBADU,iBAAtB,KAGA,qEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6CAKL,iBAAQ,CACN,GAAM,4BADR,4BAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,cAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,+BAAGA,WAAW,MAAS,CACtB,KAAQ,4CACP,0BAAYA,WAAW,KAAvB,iBAFF,WAGH,gCAAIA,WAAW,MAAS,CACtB,MAAS,QAEX,gCAAIA,WAAW,MAAS,CACtB,MAAS,SAGb,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,+BAAGA,WAAW,MAAS,CACtB,KAAQ,+BACP,0BAAYA,WAAW,KAAvB,YACL,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,0BAAYA,WAAW,MAAvB,SACH,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,+BAAGA,WAAW,MAAS,CACtB,KAAQ,kCACP,0BAAYA,WAAW,KAAvB,eACL,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,0BAAYA,WAAW,MAAvB,SACH,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,+BAAGA,WAAW,MAAS,CACtB,KAAQ,4CACP,0BAAYA,WAAW,KAAvB,yBACL,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,0BAAYA,WAAW,MAAvB,QACH,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,+BAAGA,WAAW,MAAS,CACtB,KAAQ,iCACP,0BAAYA,WAAW,KAAvB,cACL,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,0BAAYA,WAAW,MAAvB,SACH,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,WAMN,iBAAQ,CACN,GAAM,0CADR,0CAGA,sFAAqE,0BAAYA,WAAW,KAAvB,iBAArE,4CAA2K,0BAAYA,WAAW,KAAvB,OAA3K,aACA,4BAAW,+BAAGA,WAAW,KAAQ,CAC7B,KAAQ,yCADD,qBAEgB,0BAAYA,WAAW,KAAvB,iBAFhB,UAAX,0BAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qDAIL,iBAAQ,CACN,GAAM,6BADR,6BAGA,qBAAG,0BAAYA,WAAW,KAAvB,qBACH,gCAAe,+BAAGA,WAAW,KAAQ,CACjC,KAAQ,wBACP,0BAAYA,WAAW,KAAvB,eAFU,IAEkD,0BAAYA,WAAW,KAAvB,WAFjE,iBAEyI,0BAAYA,WAAW,KAAvB,QAFzI,KAGA,iBAAQ,CACN,GAAM,gCADR,gCAGA,qBAAG,0BAAYA,WAAW,KAAvB,uDACH,gCAAe,+BAAGA,WAAW,KAAQ,CACjC,KAAQ,2BACP,0BAAYA,WAAW,KAAvB,eAFU,IAEkD,0BAAYA,WAAW,KAAvB,eACjE,iBAAQ,CACN,GAAM,0CADR,0CAGA,qBAAG,0BAAYA,WAAW,KAAvB,uDACH,gCAAe,+BAAGA,WAAW,KAAQ,CACjC,KAAQ,qCACP,0BAAYA,WAAW,KAAvB,eAFU,IAEkD,0BAAYA,WAAW,KAAvB,yBACjE,iBAAQ,CACN,GAAM,+BADR,+BAGA,qBAAG,0BAAYA,WAAW,KAAvB,8BACH,qCAAoB,0BAAYA,WAAW,KAAvB,sBAApB,KACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4EAML,iBAAQ,CACN,GAAM,sBADR,sBAGA,yHACA,iDAAgC,0BAAYA,WAAW,KAAvB,sBAAhC,KACA,kFAAiE,0BAAYA,WAAW,KAAvB,sBAAjE,0CAA0K,0BAAYA,WAAW,KAAvB,eAA1K,wCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gIAML,iBAAQ,CACN,GAAM,oCADR,oCAGA,uCAAsB,+BAAGA,WAAW,KAAQ,CACxC,KAAQ,sBADU,iBAAtB,KAGA,qEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6CAKL,iBAAQ,CACN,GAAM,4BADR,4BAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,cAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,+BAAGA,WAAW,MAAS,CACtB,KAAQ,4CACP,0BAAYA,WAAW,KAAvB,iBAFF,WAGH,gCAAIA,WAAW,MAAS,CACtB,MAAS,QAEX,gCAAIA,WAAW,MAAS,CACtB,MAAS,SAGb,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,+BAAGA,WAAW,MAAS,CACtB,KAAQ,sCACP,0BAAYA,WAAW,KAAvB,cACL,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,0BAAYA,WAAW,MAAvB,SACH,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,WAMN,iBAAQ,CACN,GAAM,0CADR,0CAGA,sFAAqE,0BAAYA,WAAW,KAAvB,iBAArE,gDAA+K,0BAAYA,WAAW,KAAvB,OAA/K,KACA,4BAAW,+BAAGA,WAAW,KAAQ,CAC7B,KAAQ,yCADD,qBAEgB,0BAAYA,WAAW,KAAvB,iBAFhB,UAAX,0BAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qDAIL,iBAAQ,CACN,GAAM,+BADR,+BAGA,qBAAG,0BAAYA,WAAW,KAAvB,8BACH,gCAAe,+BAAGA,WAAW,KAAQ,CACjC,KAAQ,0BACP,0BAAYA,WAAW,KAAvB,eAFU,IAEkD,0BAAYA,WAAW,KAAvB,eAKrEL,EAAWM,gBAAiB","file":"component---src-pages-alert-dialog-mdx-9f03196b8957db444d21.js","sourcesContent":["import React from \"react\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\n\nexport function TOC({ children, label = \"Table of Contents\", ...props }) {\n  return (\n    <nav className=\"toc\" {...props}>\n      <VisuallyHidden>\n        <h2>{label}</h2>\n      </VisuallyHidden>\n      {children}\n    </nav>\n  );\n}\n\nexport function TOCList({ children, style = {}, ...props }) {\n  return (\n    <ul\n      style={{\n        display: \"block\",\n        padding: 0,\n        listStyle: \"none\",\n        ...style\n      }}\n      {...props}\n    >\n      {children}\n    </ul>\n  );\n}\n\nexport function TOCLink({ href, children, ...props }) {\n  return (\n    <li style={{ display: \"inline-block\", margin: 0, padding: 0 }}>\n      <a href={href} {...props}>\n        {children}\n      </a>\n    </li>\n  );\n}\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/reach/reach-ui/website/src/components/mdx-layout.js\";\nimport SEO from \"../components/SEO\";\nimport { TOC, TOCList, TOCLink } from \"../components/TOC\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <SEO title=\"Alert Dialog\" description=\"Accessible alert dialog component for React\" mdxType=\"SEO\" />\n    <h1 {...{\n      \"id\": \"alert-dialog\"\n    }}>{`Alert Dialog`}</h1>\n    <TOC mdxType=\"TOC\">\n  <TOCList mdxType=\"TOCList\">\n    <TOCLink href=\"#alertdialog\" mdxType=\"TOCLink\">AlertDialog</TOCLink>\n    <TOCLink href=\"#alertdialogcontent\" mdxType=\"TOCLink\">AlertDialogContent</TOCLink>\n    <TOCLink href=\"#alertdialogdescription\" mdxType=\"TOCLink\">AlertDialogDescription</TOCLink>\n    <TOCLink href=\"#alertdialogoverlay\" mdxType=\"TOCLink\">AlertDialogOverlay</TOCLink>\n    <TOCLink href=\"#alertdialogcontent\" mdxType=\"TOCLink\">AlertDialogContent</TOCLink>\n  </TOCList>\n    </TOC>\n    <ul>\n      <li parentName=\"ul\">{`Source: `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/reach/reach-ui/tree/main/packages/alert-dialog\"\n        }}>{`https://github.com/reach/reach-ui/tree/main/packages/alert-dialog`}</a></li>\n      <li parentName=\"ul\">{`WAI-ARIA: `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.w3.org/TR/wai-aria-practices-1.2/#alertdialog\"\n        }}>{`https://www.w3.org/TR/wai-aria-practices-1.2/#alertdialog`}</a></li>\n    </ul>\n    <p>{`A modal dialog that interrupts the user's workflow to get a response, usually some sort of confirmation. This is different than a typical Dialog in that it requires some user response, like \"Save\", or \"Cancel\", etc.`}</p>\n    <p>{`Most of the time you'll use `}<inlineCode parentName=\"p\">{`AlertDialog`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`AlertDialogLabel`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`AlertDialogDescription`}</inlineCode>{` together. If you need more control over the styling of the modal you can drop down a level and use `}<inlineCode parentName=\"p\">{`AlertDialogOverlay`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`AlertDialogContent`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`AlertDialog`}</inlineCode>{`.`}</p>\n    <p>{`When a Dialog opens, the `}<em parentName=\"p\">{`least destructive`}</em>{` action should be focused so that if a user accidentally hits enter when the dialog opens no damage is done. This is accomplished with the `}<inlineCode parentName=\"p\">{`leastDestructiveRef`}</inlineCode>{` prop.`}</p>\n    <p>{`Every dialog must render an `}<inlineCode parentName=\"p\">{`AlertDialogLabel`}</inlineCode>{` so the screen reader knows what to say about the dialog. If an `}<inlineCode parentName=\"p\">{`AlertDialogDescription`}</inlineCode>{` is also rendered, the screen reader will also announce that. If you render more than these two elements and some buttons, the screen reader might not announce it so it's important to keep the content inside of `}<inlineCode parentName=\"p\">{`AlertDialogLabel`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`AlertDialogDescription`}</inlineCode>{`.`}</p>\n    <p>{`This is built on top of `}<a parentName=\"p\" {...{\n        \"href\": \"/reach-ui/dialog\"\n      }}>{`Dialog`}</a>{`, so `}<inlineCode parentName=\"p\">{`AlertDialog`}</inlineCode>{` spreads its props and renders a `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{`, same for `}<inlineCode parentName=\"p\">{`AlertDialogOverlay`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`DialogOverlay`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`AlertDialogContent`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`DialogContent`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example(props) {\n  const [showDialog, setShowDialog] = React.useState(false);\n  const cancelRef = React.useRef();\n  const open = () => setShowDialog(true);\n  const close = () => setShowDialog(false);\n\n  return (\n    <div>\n      <button onClick={open}>Delete something</button>\n\n      {showDialog && (\n        <AlertDialog leastDestructiveRef={cancelRef}>\n          <AlertDialogLabel>Please Confirm!</AlertDialogLabel>\n\n          <AlertDialogDescription>\n            Are you sure you want to delete something? This action is permanent,\n            and we're totally not just flipping a field called \"deleted\" to\n            \"true\" in our database, we're actually deleting something.\n          </AlertDialogDescription>\n\n          <div className=\"alert-buttons\">\n            <button onClick={close}>Yes, delete</button>{\" \"}\n            <button ref={cancelRef} onClick={close}>\n              Nevermind, don't delete.\n            </button>\n          </div>\n        </AlertDialog>\n      )}\n    </div>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p>{`From the command line in your project directory, run `}<inlineCode parentName=\"p\">{`npm install @reach/alert-dialog`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`yarn add @reach/alert-dialog`}</inlineCode>{`. Then import the components that you need:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @reach/alert-dialog\n# or\nyarn add @reach/alert-dialog\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  AlertDialog,\n  AlertDialogLabel,\n  AlertDialogDescription,\n  AlertDialogOverlay,\n  AlertDialogContent,\n} from \"@reach/alert-dialog\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"component-api\"\n    }}>{`Component API`}</h2>\n    <h3 {...{\n      \"id\": \"alertdialog\"\n    }}>{`AlertDialog`}</h3>\n    <p>{`High-level component to render an alert dialog.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<AlertDialog leastDestructiveRef={someRef}>\n  <AlertDialogLabel />\n  <AlertDialogContent />\n</AlertDialog>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"alertdialog-props\"\n    }}>{`AlertDialog Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#alertdialog-dialog-props\"\n            }}><inlineCode parentName=\"a\">{`Dialog`}</inlineCode>{` props`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#alertdialog-isopen\"\n            }}><inlineCode parentName=\"a\">{`isOpen`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`bool`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#alertdialog-ondismiss\"\n            }}><inlineCode parentName=\"a\">{`onDismiss`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#alertdialog-leastdestructiveref\"\n            }}><inlineCode parentName=\"a\">{`leastDestructiveRef`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#dialog-element-props\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`node`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"alertdialog-dialog-props\"\n    }}>{`AlertDialog Dialog props`}</h5>\n    <p>{`Any props not listed above will be spread onto the underlying `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` element, which in turn is spread onto the underlying `}<inlineCode parentName=\"p\">{`div[data-reach-dialog-content]`}</inlineCode>{`.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"/reach-ui/dialog#dialog-props\"\n      }}>{`documentation for `}<inlineCode parentName=\"a\">{`Dialog`}</inlineCode>{` props`}</a>{` for more information.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<AlertDialog style={{ color: \"red\" }}>\n  <AlertDialogLabel>\n    My text is red because the style prop got applied to the div underneath\n  </AlertDialogLabel>\n</AlertDialog>\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"alertdialog-isopen\"\n    }}>{`AlertDialog isOpen`}</h5>\n    <p><inlineCode parentName=\"p\">{`isOpen?: boolean`}</inlineCode></p>\n    <p>{`Controls whether the dialog is open or not. Defaults to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<AlertDialog isOpen={true}>\n  <AlertDialogLabel>I will be open</AlertDialogLabel>\n</AlertDialog>\n\n<AlertDialog isOpen={false}>\n  <AlertDialogLabel>I will be closed</AlertDialogLabel>\n</AlertDialog>\n`}</code></pre>\n    <p>{`Note, however, that the dialog will not render to the DOM when `}<inlineCode parentName=\"p\">{`isOpen={false}`}</inlineCode>{`, but you may want to save on the number of elements created in your render function. If you'd rather not have the dialog always rendered, you can put a guard in front of it and only render when it should be open. In this case you don’t need the `}<inlineCode parentName=\"p\">{`isOpen`}</inlineCode>{` prop at all.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`{\n  state.confirmDelete && (\n    <AlertDialog isOpen={true}>\n      <AlertDialogLabel>I will be open</AlertDialogLabel>\n    </AlertDialog>\n  );\n}\n`}</code></pre>\n    <p>{`You should probably do this when your dialog contains a lot of elements. It's also useful for transition animations.`}</p>\n    <h5 {...{\n      \"id\": \"alertdialog-ondismiss\"\n    }}>{`AlertDialog onDismiss`}</h5>\n    <p><inlineCode parentName=\"p\">{`onDismiss?: (event?: React.SyntheticEvent) => void;`}</inlineCode></p>\n    <p>{`When the user clicks outside the modal or hits the escape key, this function will be called. If you want the modal to close, you’ll need to set state.`}</p>\n    <p><strong parentName=\"p\">{`IMPORTANT`}</strong>{`: Ensure that `}<inlineCode parentName=\"p\">{`onDismiss`}</inlineCode>{` and the click handler of the `}<inlineCode parentName=\"p\">{`leastDestructiveRef`}</inlineCode>{` are identical!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example(props) {\n  const [showDialog, setShowDialog] = React.useState(false);\n  const cancelRef = React.useRef();\n\n  const open = () => setShowDialog(true);\n  const destroyStuff = () => {\n    console.log(\"Destroyed!\");\n    setShowDialog(false);\n  };\n  // make sure \\`close\\` and the \\`onClick\\` of the\n  // \\`leastDestructiveRef\\` are identical, best to just\n  // pass them both the same function\n  const close = () => setShowDialog(false);\n\n  return (\n    <div>\n      <button onClick={open}>Delete something</button>\n\n      {showDialog && (\n        <AlertDialog onDismiss={close} leastDestructiveRef={cancelRef}>\n          <AlertDialogLabel>Please Confirm!</AlertDialogLabel>\n\n          <AlertDialogDescription>\n            Are you sure you want to delete something? This action is permanent,\n            and we're totally not just flipping a field called \"deleted\" to\n            \"true\" in our database, we're actually deleting something.\n          </AlertDialogDescription>\n\n          <div className=\"alert-buttons\">\n            <button onClick={destroyStuff}>Yes, delete</button>{\" \"}\n            <button ref={cancelRef} onClick={close}>\n              Nevermind, don't delete.\n            </button>\n          </div>\n        </AlertDialog>\n      )}\n    </div>\n  );\n}\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"alertdialog-leastdestructiveref\"\n    }}>{`AlertDialog leastDestructiveRef`}</h5>\n    <p><inlineCode parentName=\"p\">{`leastDestructiveRef?: React.RefObject<HTMLElement>;`}</inlineCode></p>\n    <p>{`To prevent accidental data loss, an alert dialog should focus the least destructive action button when it opens.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example(props) {\n  const [showDialog, setShowDialog] = React.useState(false);\n\n  // we'll pass this ref to both AlertDialog and our button\n  const cancelRef = React.useRef();\n\n  const open = () => setShowDialog(true);\n  const close = () => setShowDialog(false);\n\n  return (\n    <div>\n      <button onClick={open}>Publish something</button>\n\n      {showDialog && (\n        <AlertDialog leastDestructiveRef={cancelRef}>\n          <AlertDialogLabel>Please Confirm!</AlertDialogLabel>\n\n          <AlertDialogDescription>\n            Are you sure you want to publish this thing?\n          </AlertDialogDescription>\n\n          <div className=\"alert-buttons\">\n            <button onClick={this.close}>Yes, publish and keep editing</button>{\" \"}\n            <button onClick={this.close}>Yes, publish and view</button>{\" \"}\n            <button ref={cancelRef} onClick={close}>\n              Don't publish, keep working\n            </button>\n          </div>\n        </AlertDialog>\n      )}\n    </div>\n  );\n}\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"alertdialog-children\"\n    }}>{`AlertDialog children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode`}</inlineCode></p>\n    <p>{`Accepts any renderable content but should generally be restricted to `}<inlineCode parentName=\"p\">{`AlertDialogLabel`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`AlertDialogDescription`}</inlineCode>{` and action buttons, other content might not be announced to the user by the screen reader.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<AlertDialog>\n  <AlertDialogLabel>Please Confirm!</AlertDialogLabel>\n\n  <AlertDialogDescription>A longer message</AlertDialogDescription>\n\n  <div>\n    <button onClick={destroyStuff}>A Destructive Action</button>{\" \"}\n    <button ref={leastDestructiveRef}>Least Destructive Action</button>\n  </div>\n</AlertDialog>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"alertdialoglabel\"\n    }}>{`AlertDialogLabel`}</h3>\n    <p>{`The first thing ready by screen readers when the dialog opens, usually the title of the dialog like \"Warning!\" or \"Please confirm!\".`}</p>\n    <p>{`This is required. The `}<inlineCode parentName=\"p\">{`AlertDialog`}</inlineCode>{` will throw an error if no label is rendered.`}</p>\n    <h4 {...{\n      \"id\": \"alertdialoglabel-css-selectors\"\n    }}>{`AlertDialogLabel CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/reach-ui/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <p>{`Use the following CSS to target the label:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-alert-dialog-label] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"alertdialoglabel-props\"\n    }}>{`AlertDialogLabel Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#alertdialoglabel-div-props\"\n            }}><inlineCode parentName=\"a\">{`div`}</inlineCode>{` props`}</a></td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"alertdialoglabel-div-props\"\n    }}>{`AlertDialogLabel div props`}</h5>\n    <p>{`All props are spread to an underlying `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{` element.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<AlertDialogLabel className=\"alert-label\" />\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"alertdialogdescription\"\n    }}>{`AlertDialogDescription`}</h3>\n    <p>{`Additional content read by screen readers, usually a longer description about what you need from the user like \"This action is permanent, are you sure?\" etc.`}</p>\n    <h4 {...{\n      \"id\": \"alertdialogdescription-css-selectors\"\n    }}>{`AlertDialogDescription CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/reach-ui/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <p>{`Use the following CSS to target the description:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-alert-dialog-description] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"alertdialogdescription-props\"\n    }}>{`AlertDialogDescription Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#alertdialogdescription-div-props\"\n            }}><inlineCode parentName=\"a\">{`div`}</inlineCode>{` props`}</a></td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"alertdialogdescription-div-props\"\n    }}>{`AlertDialogDescription div props`}</h5>\n    <p>{`All props are spread to an underlying `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{` element.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<AlertDialogDescription className=\"alert-description\" />\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"alertdialogoverlay\"\n    }}>{`AlertDialogOverlay`}</h3>\n    <p>{`Low-level component if you need more control over the styles or rendering of the dialog overlay. In the following example we use the AlertDialogOverlay and AlertDialogContent to have more control over the styles.`}</p>\n    <p>{`Note: You must render an `}<inlineCode parentName=\"p\">{`AlertDialogContent`}</inlineCode>{` inside.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example(props) {\n  const [showDialog, setShowDialog] = React.useState(false);\n\n  // we'll pass this ref to both AlertDialog and our button\n  const cancelRef = React.useRef();\n\n  const open = () => setShowDialog(true);\n  const close = () => setShowDialog(false);\n\n  return (\n    <div>\n      <button onClick={open}>Delete something</button>\n\n      {showDialog && (\n        <AlertDialogOverlay\n          style={{ background: \"hsla(0, 50%, 50%, 0.85)\" }}\n          leastDestructiveRef={cancelRef}\n        >\n          <AlertDialogContent style={{ background: \"#f0f0f0\" }}>\n            <AlertDialogLabel>Please Confirm!</AlertDialogLabel>\n\n            <AlertDialogDescription>\n              Are you sure you want delete stuff, it will be permanent.\n            </AlertDialogDescription>\n\n            <div className=\"alert-buttons\">\n              <button onClick={close}>Yes, delete</button>{\" \"}\n              <button ref={cancelRef} onClick={close}>\n                Nevermind\n              </button>\n            </div>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      )}\n    </div>\n  );\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"alertdialogoverlay-css-selectors\"\n    }}>{`AlertDialogOverlay CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/reach-ui/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <p>{`Use the following CSS to target the overlay:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-alert-dialog-overlay] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"alertdialogoverlay-props\"\n    }}>{`AlertDialogOverlay Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#alertdialogoverlay-dialogoverlay-props\"\n            }}><inlineCode parentName=\"a\">{`DialogOverlay`}</inlineCode>{` props`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#alertdialogoverlay-isopen\"\n            }}><inlineCode parentName=\"a\">{`isOpen`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`bool`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#alertdialogoverlay-ondismiss\"\n            }}><inlineCode parentName=\"a\">{`onDismiss`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#alertdialogoverlay-leastdestructiveref\"\n            }}><inlineCode parentName=\"a\">{`leastDestructiveRef`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ref`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#alertdialogoverlay-children\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`node`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"alertdialogoverlay-dialogoverlay-props\"\n    }}>{`AlertDialogOverlay DialogOverlay props`}</h5>\n    <p>{`Any props not listed above will be spread onto the underlying `}<inlineCode parentName=\"p\">{`DialogOverlay`}</inlineCode>{`, and in turn spread onto the underlying `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{` element.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"/reach-ui/dialog#dialogoverlay-props\"\n      }}>{`documentation for `}<inlineCode parentName=\"a\">{`DialogOverlay`}</inlineCode>{` props`}</a>{` for more information.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<AlertDialogOverlay className=\"light-modal\" />\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"alertdialogoverlay-isopen\"\n    }}>{`AlertDialogOverlay isOpen`}</h5>\n    <p><inlineCode parentName=\"p\">{`isOpen?: boolean`}</inlineCode></p>\n    <p>{`Same as `}<a parentName=\"p\" {...{\n        \"href\": \"#alertdialog-isopen\"\n      }}><inlineCode parentName=\"a\">{`AlertDialog`}</inlineCode>{` `}<inlineCode parentName=\"a\">{`isOpen`}</inlineCode></a>{`. Defaults to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n    <h5 {...{\n      \"id\": \"alertdialogoverlay-ondismiss\"\n    }}>{`AlertDialogOverlay onDismiss`}</h5>\n    <p><inlineCode parentName=\"p\">{`onDismiss?: (event?: React.SyntheticEvent) => void`}</inlineCode></p>\n    <p>{`Same as `}<a parentName=\"p\" {...{\n        \"href\": \"#alertdialog-ondismiss\"\n      }}><inlineCode parentName=\"a\">{`AlertDialog`}</inlineCode>{` `}<inlineCode parentName=\"a\">{`onDismiss`}</inlineCode></a></p>\n    <h5 {...{\n      \"id\": \"alertdialogoverlay-leastdestructiveref\"\n    }}>{`AlertDialogOverlay leastDestructiveRef`}</h5>\n    <p><inlineCode parentName=\"p\">{`leastDestructiveRef?: React.RefObject<HTMLElement>`}</inlineCode></p>\n    <p>{`Same as `}<a parentName=\"p\" {...{\n        \"href\": \"#alertdialog-leastdestructiveref\"\n      }}><inlineCode parentName=\"a\">{`AlertDialog`}</inlineCode>{` `}<inlineCode parentName=\"a\">{`leastDestructiveRef`}</inlineCode></a></p>\n    <h5 {...{\n      \"id\": \"alertdialogoverlay-children\"\n    }}>{`AlertDialogOverlay children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode`}</inlineCode></p>\n    <p>{`Should be an `}<inlineCode parentName=\"p\">{`AlertDialogContent`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<AlertDialogOverlay>\n  <AlertDialogContent />\n</AlertDialogOverlay>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"alertdialogcontent\"\n    }}>{`AlertDialogContent`}</h3>\n    <p>{`Low-level component if you need more control over the styles or rendering of the dialog content.`}</p>\n    <p>{`Note: Must be a child of `}<inlineCode parentName=\"p\">{`AlertDialogOverlay`}</inlineCode>{`.`}</p>\n    <p>{`Note: You only need to use this when you are also styling `}<inlineCode parentName=\"p\">{`AlertDialogOverlay`}</inlineCode>{`, otherwise you can use the high-level `}<inlineCode parentName=\"p\">{`AlertDialog`}</inlineCode>{` component and pass the props to it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<AlertDialogOverlay style={someSpecificStyles}>\n  <AlertDialogContent className={orAClassName} />\n</AlertDialogOverlay>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"alertdialogcontent-css-selectors\"\n    }}>{`AlertDialogContent CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/reach-ui/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <p>{`Use the following CSS to target the content:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-alert-dialog-content] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"alertdialogcontent-props\"\n    }}>{`AlertDialogContent Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#alertdialogcontent-dialogcontent-props\"\n            }}><inlineCode parentName=\"a\">{`DialogContent`}</inlineCode>{` props`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#alertdialogcontent-element-props\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`node`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"alertdialogcontent-dialogcontent-props\"\n    }}>{`AlertDialogContent DialogContent props`}</h5>\n    <p>{`Any props not listed above will be spread onto the underlying `}<inlineCode parentName=\"p\">{`DialogContent`}</inlineCode>{` element, and then again onto the underlying `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{`.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"/reach-ui/dialog#dialogcontent-props\"\n      }}>{`documentation for `}<inlineCode parentName=\"a\">{`DialogContent`}</inlineCode>{` props`}</a>{` for more information.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<AlertDialogContent className=\"nice-border\" />\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"alertdialogcontent-children\"\n    }}>{`AlertDialogContent children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode`}</inlineCode></p>\n    <p>{`Same as `}<a parentName=\"p\" {...{\n        \"href\": \"#alertdialog-children\"\n      }}><inlineCode parentName=\"a\">{`AlertDialog`}</inlineCode>{` `}<inlineCode parentName=\"a\">{`children`}</inlineCode></a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}