{"version":3,"sources":["webpack://reach-ui-website/./src/pages/tabs.mdx","webpack://reach-ui-website/./src/components/Pipe.js","webpack://reach-ui-website/./src/components/TOC.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","title","description","href","parentName","isMDXComponent","Pipe","TOC","children","label","className","TOCList","style","display","padding","listStyle","TOCLink","margin"],"mappings":"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","file":"component---src-pages-tabs-mdx-e5ddb896f6da96856576.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/reach/reach-ui/website/src/components/mdx-layout.js\";\nimport SEO from \"../components/SEO\";\nimport { TOC, TOCList, TOCLink } from \"../components/TOC\";\nimport { Pipe } from \"../components/Pipe\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <SEO title=\"Tabs\" description=\"Accessible tabs component for React\" mdxType=\"SEO\" />\n    <h1 {...{\n      \"id\": \"tabs\"\n    }}>{`Tabs`}</h1>\n    <TOC mdxType=\"TOC\">\n  <TOCList mdxType=\"TOCList\">\n    <TOCLink href=\"#tabs-1\" mdxType=\"TOCLink\">Tabs</TOCLink>\n    <TOCLink href=\"#tablist\" mdxType=\"TOCLink\">TabList</TOCLink>\n    <TOCLink href=\"#tab\" mdxType=\"TOCLink\">Tab</TOCLink>\n    <TOCLink href=\"#tabpanels\" mdxType=\"TOCLink\">TabPanels</TOCLink>\n    <TOCLink href=\"#tabpanel\" mdxType=\"TOCLink\">TabPanel</TOCLink>\n    <TOCLink href=\"#usetabscontext\" mdxType=\"TOCLink\">useTabsContext</TOCLink>\n  </TOCList>\n    </TOC>\n    <ul>\n      <li parentName=\"ul\">{`Source: `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/reach/reach-ui/tree/main/packages/tabs\"\n        }}>{`https://github.com/reach/reach-ui/tree/main/packages/tabs`}</a></li>\n      <li parentName=\"ul\">{`WAI-ARIA: `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\"\n        }}>{`https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel`}</a></li>\n    </ul>\n    <p>{`An accessible tabs component.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Tab`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`TabPanel`}</inlineCode>{` elements are associated by their order in the tree. None of the components are empty wrappers, each is associated with a real DOM element in the document, giving you maximum control over styling and composition.`}</p>\n    <p>{`You can render any other elements you want inside of `}<inlineCode parentName=\"p\">{`Tabs`}</inlineCode>{`, but `}<inlineCode parentName=\"p\">{`TabList`}</inlineCode>{` should only render `}<inlineCode parentName=\"p\">{`Tab`}</inlineCode>{` elements, and `}<inlineCode parentName=\"p\">{`TabPanels`}</inlineCode>{` should only render `}<inlineCode parentName=\"p\">{`TabPanel`}</inlineCode>{` elements.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Tabs>\n      <TabList>\n        <Tab>One</Tab>\n        <Tab>Two</Tab>\n        <Tab>Three</Tab>\n      </TabList>\n\n      <TabPanels>\n        <TabPanel>\n          <p>one!</p>\n        </TabPanel>\n        <TabPanel>\n          <p>two!</p>\n        </TabPanel>\n        <TabPanel>\n          <p>three!</p>\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n}\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#demos\"\n      }}>{`Check out the demos`}</a>{` for ideas on how to style and compose.`}</p>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p>{`From the command line in your project directory, run `}<inlineCode parentName=\"p\">{`npm install @reach/tabs`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`yarn add @reach/tabs`}</inlineCode>{`. Then import the components and styles that you need:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @reach/tabs\n# or\nyarn add @reach/tabs\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Tabs, TabList, Tab, TabPanels, TabPanel } from \"@reach/tabs\";\nimport \"@reach/tabs/styles.css\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"component-api\"\n    }}>{`Component API`}</h2>\n    <h3 {...{\n      \"id\": \"tabs-1\"\n    }}>{`Tabs`}</h3>\n    <p>{`The parent component of the tab interface.`}</p>\n    <h4 {...{\n      \"id\": \"tabs-css-selectors\"\n    }}>{`Tabs CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-tabs] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"tabs-props\"\n    }}>{`Tabs Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tabs-as\"\n            }}><inlineCode parentName=\"a\">{`as`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode>{` `}<Pipe mdxType=\"Pipe\" />{` `}<inlineCode parentName=\"td\">{`Component`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\"div\"`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tabs-children\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`node`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tabs-defaultindex\"\n            }}><inlineCode parentName=\"a\">{`defaultIndex`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tabs-index\"\n            }}><inlineCode parentName=\"a\">{`index`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tabs-keyboardactivation\"\n            }}><inlineCode parentName=\"a\">{`keyboardActivation`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\"auto\"`}</inlineCode>{` `}<Pipe mdxType=\"Pipe\" />{` `}<inlineCode parentName=\"td\">{`\"manual\"`}</inlineCode>{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\"auto`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tabs-onchange\"\n            }}><inlineCode parentName=\"a\">{`onChange`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tabs-orientation\"\n            }}><inlineCode parentName=\"a\">{`orientation`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\"horizontal\"`}</inlineCode><Pipe mdxType=\"Pipe\" /><inlineCode parentName=\"td\">{`\"vertical\"`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\"horizontal\"`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tabs-div-props\"\n            }}><inlineCode parentName=\"a\">{`div`}</inlineCode>{` props`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"tabs-as\"\n    }}>{`Tabs as`}</h5>\n    <p><inlineCode parentName=\"p\">{`as?: keyof JSX.IntrinsicElements | React.ComponentType`}</inlineCode></p>\n    <p>{`Tabs will render a `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{` unless you specify a different element.`}</p>\n    <h5 {...{\n      \"id\": \"tabs-children\"\n    }}>{`Tabs children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode | ((props: { focusedIndex: number; id: string; selectedIndex: number }) => React.ReactNode)`}</inlineCode></p>\n    <p>{`Tabs expects `}<inlineCode parentName=\"p\">{`<TabList>`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<TabPanels>`}</inlineCode>{` as children. The order doesn't matter; you can have tabs on the top or the bottom. You can have random elements inside as well.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Tabs>\n      <div>Random</div>\n      <TabPanels>\n        <TabPanel>Uno</TabPanel>\n        <TabPanel>Dos</TabPanel>\n      </TabPanels>\n      <TabList>\n        <Tab>Uno</Tab>\n        <Tab>Dos</Tab>\n      </TabList>\n    </Tabs>\n  );\n}\n`}</code></pre>\n    <p>{`You can also pass a render function to access data relevant to nested components.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`function Example() {\n  return (\n    <Tabs keyboardActivation=\"manual\">\n      {({ selectedIndex, focusedIndex }) => {\n        let getTabStyle = (index) => ({\n          borderBottom: \\`4px solid \\${\n            selectedIndex === index\n              ? \"red\"\n              : focusedIndex === index\n              ? \"blue\"\n              : \"black\"\n          }\\`,\n        });\n        return (\n          <React.Fragment>\n            <TabList>\n              <Tab style={getTabStyle(0)}>Uno</Tab>\n              <Tab style={getTabStyle(1)}>Dos</Tab>\n              <Tab style={getTabStyle(2)}>Tres</Tab>\n            </TabList>\n            <TabPanels>\n              <TabPanel>Uno</TabPanel>\n              <TabPanel>Dos</TabPanel>\n              <TabPanel>Tres</TabPanel>\n            </TabPanels>\n          </React.Fragment>\n        );\n      }}\n    </Tabs>\n  );\n}\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"tabs-defaultindex\"\n    }}>{`Tabs defaultIndex`}</h5>\n    <p><inlineCode parentName=\"p\">{`defaultIndex?: number`}</inlineCode></p>\n    <p>{`Starts the tabs at a specific index.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Tabs defaultIndex={1}>\n      <TabPanels>\n        <TabPanel>\n          <img src=\"https://placekitten.com/400/200\" alt=\"A picture of a cat\" />\n        </TabPanel>\n        <TabPanel>\n          <img\n            src=\"https://www.placecage.com/400/200\"\n            alt=\"A picture of Nicolas Cage\"\n          />\n        </TabPanel>\n      </TabPanels>\n      <TabList>\n        <Tab>Kitten</Tab>\n        <Tab>Cage</Tab>\n      </TabList>\n    </Tabs>\n  );\n}\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"tabs-index\"\n    }}>{`Tabs index`}</h5>\n    <p><inlineCode parentName=\"p\">{`index?: number`}</inlineCode></p>\n    <p>{`Like form inputs, a tab's state can be controlled by the owner. Make sure to include an `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` as well, or else the tabs will not be interactive.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  const [tabIndex, setTabIndex] = React.useState(0);\n\n  const handleSliderChange = (event) => {\n    setTabIndex(parseInt(event.target.value, 10));\n  };\n\n  const handleTabsChange = (index) => {\n    setTabIndex(index);\n  };\n\n  return (\n    <div>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"2\"\n        value={tabIndex}\n        onChange={handleSliderChange}\n      />\n\n      <Tabs index={tabIndex} onChange={handleTabsChange}>\n        <TabList>\n          <Tab>One</Tab>\n          <Tab>Two</Tab>\n          <Tab>Three</Tab>\n        </TabList>\n        <TabPanels>\n          <TabPanel>\n            <p>Click the tabs or pull the slider around</p>\n          </TabPanel>\n          <TabPanel>\n            <p>Yeah yeah. What's up?</p>\n          </TabPanel>\n          <TabPanel>\n            <p>Oh, hello there.</p>\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </div>\n  );\n}\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"tabs-keyboardactivation\"\n    }}>{`Tabs keyboardActivation`}</h5>\n    <p><inlineCode parentName=\"p\">{`keyboardActivation?: TabsKeyboardActivation`}</inlineCode></p>\n    <p>{`Describes the activation mode when navigating a tablist with a keyboard. When set to `}<inlineCode parentName=\"p\">{`\"auto\"`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`TabsKeyboardActivation.Auto`}</inlineCode>{`), a tab panel is activated automatically when a tab is highlighted using arrow keys. When set to `}<inlineCode parentName=\"p\">{`\"manual\"`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`TabsKeyboardActivation.Manual`}</inlineCode>{`), the user must activate the tab panel with either the `}<kbd>{`Spacebar`}</kbd>{` or `}<kbd>{`Enter`}</kbd>{` keys. Defaults to `}<inlineCode parentName=\"p\">{`\"auto\"`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` TypeScript users should import and use the `}<inlineCode parentName=\"p\">{`TabsKeyboardActivation`}</inlineCode>{` enum when used in strict mode.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { TabsKeyboardActivation } from \"@reach/tabs\";\n\nfunction MyTabs() {\n  return (\n    <Tabs keyboardActivation={TabsKeyboardActivation.Manual}>{/* ... */}</Tabs>\n  );\n}\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"tabs-onchange\"\n    }}>{`Tabs onChange`}</h5>\n    <p><inlineCode parentName=\"p\">{`onChange?: (index: number) => void`}</inlineCode></p>\n    <p>{`Calls back with the tab index whenever the user changes tabs, allowing your app to synchronize with it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  const colors = [\"firebrick\", \"goldenrod\", \"dodgerblue\"];\n  const [tabIndex, setTabIndex] = React.useState(0);\n  const backgroundColor = colors[tabIndex];\n  return (\n    <Tabs\n      onChange={(index) => setTabIndex(index)}\n      style={{\n        color: \"white\",\n        background: backgroundColor,\n      }}\n    >\n      <TabList>\n        <Tab>Red</Tab>\n        <Tab>Yellow</Tab>\n        <Tab>Blue</Tab>\n      </TabList>\n      <TabPanels style={{ padding: 20 }}>\n        <TabPanel>The Primary Colors</TabPanel>\n        <TabPanel>Are 1, 2, 3</TabPanel>\n        <TabPanel>Red, yellow and blue.</TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n}\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"tabs-orientation\"\n    }}>{`Tabs orientation`}</h5>\n    <p><inlineCode parentName=\"p\">{`orientation?: TabsOrientation`}</inlineCode></p>\n    <p>{`Allows you to switch the orientation of the tabs relative to their tab panels. This value can either be `}<inlineCode parentName=\"p\">{`\"horizontal\"`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`TabsOrientation.Horizontal`}</inlineCode>{`) or `}<inlineCode parentName=\"p\">{`\"vertical\"`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`TabsOrientation.Vertical`}</inlineCode>{`). Defaults to `}<inlineCode parentName=\"p\">{`\"horizontal\"`}</inlineCode>{`.`}</p>\n    <p>{`Changing the orientation will change how the arrow keys navigate between tabs. Arrow key navigation should logically follow the order in which tabs appear on the screen. For screen reader users, the `}<inlineCode parentName=\"p\">{`aria-orientation`}</inlineCode>{` attribute provides the appropriate context to direct which keys should navigate to the next tab (this is provided automatically). As such, it's important to use this prop even if you have already styled your tabs for vertical layout.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  // Try changing the orientation!\n  return (\n    <Tabs orientation=\"vertical\">\n      <TabList>\n        <Tab>One</Tab>\n        <Tab>Two</Tab>\n        <Tab>Three</Tab>\n      </TabList>\n\n      <TabPanels>\n        <TabPanel>\n          <p>one!</p>\n        </TabPanel>\n        <TabPanel>\n          <p>two!</p>\n        </TabPanel>\n        <TabPanel>\n          <p>three!</p>\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` TypeScript users should import and use the `}<inlineCode parentName=\"p\">{`TabsOrientation`}</inlineCode>{` enum when used in strict mode.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { TabsOrientation } from \"@reach/tabs\";\n\nfunction MyTabs() {\n  return <Tabs orientation={TabsOrientation.Vertical}>{/* ... */}</Tabs>;\n}\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"tabs-div-props\"\n    }}>{`Tabs div props`}</h5>\n    <p>{`All other props are passed to the underlying `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{` (or another component passed to the `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` prop).`}</p>\n    <h3 {...{\n      \"id\": \"tablist\"\n    }}>{`TabList`}</h3>\n    <p>{`The parent component of the tabs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TabList>\n  <Tab>Tacos</Tab>\n  <Tab>Tortas</Tab>\n</TabList>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"tablist-css-selectors\"\n    }}>{`TabList CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-tab-list] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"tablist-props\"\n    }}>{`TabList Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tablist-as\"\n            }}><inlineCode parentName=\"a\">{`as`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode>{` `}<Pipe mdxType=\"Pipe\" />{` `}<inlineCode parentName=\"td\">{`Component`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\"div\"`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tablist-children\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tablist-div-props\"\n            }}><inlineCode parentName=\"a\">{`div`}</inlineCode>{` props`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"tablist-children\"\n    }}>{`TabList children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode`}</inlineCode></p>\n    <p><inlineCode parentName=\"p\">{`TabList`}</inlineCode>{` expects multiple `}<inlineCode parentName=\"p\">{`Tab`}</inlineCode>{` elements as children.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TabList>\n  <Tab>One</Tab>\n  <Tab>Two</Tab>\n</TabList>\n`}</code></pre>\n    <p>{`But, you can also wrap `}<inlineCode parentName=\"p\">{`Tab`}</inlineCode>{` as long as you forward the props (because data is passed from `}<inlineCode parentName=\"p\">{`TabList`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`Tab`}</inlineCode>{` via React context).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const RedTab = (props) => <Tab {...props} style={{ color: \"red\" }} />;\n\nconst TabPage = () => (\n  <Tabs>\n    <TabList>\n      <RedTab>This is red</RedTab>\n      <Tab>This is normal</Tab>\n    </TabList>\n    <TabPanels>\n      <TabPanel>...</TabPanel>\n      <TabPanel>...</TabPanel>\n    </TabPanels>\n  </Tabs>\n);\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"tablist-as\"\n    }}>{`TabList as`}</h5>\n    <p><inlineCode parentName=\"p\">{`as?: keyof JSX.IntrinsicElements | React.ComponentType`}</inlineCode></p>\n    <p>{`Tabs will render a `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{` unless you specify a different element.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TabList as={View} />\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"tablist-div-props\"\n    }}>{`TabList div props`}</h5>\n    <p>{`All other props are passed to the underlying `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{` (or component passed to `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{`).`}</p>\n    <h3 {...{\n      \"id\": \"tabpanels\"\n    }}>{`TabPanels`}</h3>\n    <p>{`The parent component of the panels.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TabPanels>\n  <TabPanel>My favorite</TabPanel>\n  <TabPanel>My other favorite</TabPanel>\n</TabPanels>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"tabpanels-css-selectors\"\n    }}>{`TabPanels CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-tab-panels] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"tabpanels-props\"\n    }}>{`TabPanels Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tabpanels-as\"\n            }}><inlineCode parentName=\"a\">{`as`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode>{` `}<Pipe mdxType=\"Pipe\" />{` `}<inlineCode parentName=\"td\">{`Component`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\"div\"`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tabpanels-children\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`node`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tabpanels-div-props\"\n            }}><inlineCode parentName=\"a\">{`div`}</inlineCode>{` props`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"tabpanels-as\"\n    }}>{`TabPanels as`}</h5>\n    <p><inlineCode parentName=\"p\">{`as?: keyof JSX.IntrinsicElements | React.ComponentType`}</inlineCode></p>\n    <p>{`Tabs will render a `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{` unless you specify a different element.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TabPanels as={View} />\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"tabpanels-children\"\n    }}>{`TabPanels children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode`}</inlineCode></p>\n    <p><inlineCode parentName=\"p\">{`TabPanels`}</inlineCode>{` expects multiple `}<inlineCode parentName=\"p\">{`TabPanel`}</inlineCode>{` elements as children.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TabPanels>\n  <TabPanel>One</TabPanel>\n  <TabPanel>Two</TabPanel>\n</TabPanels>\n`}</code></pre>\n    <p>{`But, you can also wrap `}<inlineCode parentName=\"p\">{`TabPanel`}</inlineCode>{` as long as you forward the props (because data is passed from `}<inlineCode parentName=\"p\">{`TabPanels`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`TabPanel`}</inlineCode>{` via React context\\`).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const BoldPanel = (props) => (\n  <TabPanel {...props} style={{ fontWeight: \"bold\" }} />\n);\n\nconst TabPage = () => (\n  <Tabs>\n    <TabList>\n      <Tab>...</Tab>\n      <Tab>...</Tab>\n    </TabList>\n    <TabPanels>\n      <BoldPanel>...</BoldPanel>\n      <TabPanel>...</TabPanel>\n    </TabPanels>\n  </Tabs>\n);\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"tabpanels-div-props\"\n    }}>{`TabPanels div props`}</h5>\n    <p>{`All other props are passed to the underlying `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{` (or component passed to `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{`).`}</p>\n    <h3 {...{\n      \"id\": \"tab\"\n    }}>{`Tab`}</h3>\n    <p>{`The interactive element that changes the selected panel.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Tab>Coconut Korma</Tab>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"tab-css-selectors\"\n    }}>{`Tab CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`/* styles all tabs */\n[data-reach-tab] {\n}\n\n/* styles only the selected tab */\n[data-reach-tab][data-selected] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"tab-props\"\n    }}>{`Tab Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tab-as\"\n            }}><inlineCode parentName=\"a\">{`as`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode>{` `}<Pipe mdxType=\"Pipe\" />{` `}<inlineCode parentName=\"td\">{`Component`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\"button\"`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tab-children\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tab-disabled\"\n            }}><inlineCode parentName=\"a\">{`disabled`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`false`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tab-button-props\"\n            }}><inlineCode parentName=\"a\">{`button`}</inlineCode>{` props`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"tab-as\"\n    }}>{`Tab as`}</h5>\n    <p><inlineCode parentName=\"p\">{`as?: keyof JSX.IntrinsicElements | React.ComponentType`}</inlineCode></p>\n    <p>{`Tab will render a `}<inlineCode parentName=\"p\">{`button`}</inlineCode>{` unless you specify a different element.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Tab as={ReactNativeWebButton} />\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"tab-children\"\n    }}>{`Tab children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode`}</inlineCode></p>\n    <p><inlineCode parentName=\"p\">{`Tab`}</inlineCode>{` can receive any type of children.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Tab>\n  <HouseIcon /> Home\n</Tab>\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"tab-disabled\"\n    }}>{`Tab disabled`}</h5>\n    <p><inlineCode parentName=\"p\">{`disabled?: boolean`}</inlineCode></p>\n    <p>{`Disables a tab when true. Clicking will not work and keyboard navigation will skip over it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Tab disabled />\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"tab-button-props\"\n    }}>{`Tab button props`}</h5>\n    <p>{`All other props are passed to the underlying `}<inlineCode parentName=\"p\">{`button`}</inlineCode>{` (or component passed to `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{`).`}</p>\n    <h5 {...{\n      \"id\": \"tab-isselected\"\n    }}>{`Tab isSelected`}</h5>\n    <p>{`Because TabList needs to know the order of the children, we use `}<inlineCode parentName=\"p\">{`cloneElement`}</inlineCode>{` to pass state internally. If you want to know if a tab is active, you can wrap it, and then inspect clone props passed in.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: We will deprecate this behavior in the future. We now prefer to use context to pass data down to descendants for `}<inlineCode parentName=\"p\">{`Tabs`}</inlineCode>{` for better composability. If you'd like your Tabs to be a bit more future proof, we suggest using a controlled `}<inlineCode parentName=\"p\">{`Tabs`}</inlineCode>{` component so that your app knows the state of your tabs.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\n(() => {\n  function CoolTab(props) {\n    // \\`isSelected\\` comes from \\`TabList\\` cloning the \\`CoolTab\\`.\n    const { isSelected, children } = props;\n\n    // make sure to forward *all* props received from TabList\n    return (\n      <Tab {...props}>\n        {isSelected ? \"😎\" : \"😐\"}\n        {children}\n      </Tab>\n    );\n  }\n\n  return (\n    <Tabs>\n      <TabList>\n        <CoolTab>One</CoolTab>\n        <CoolTab>Two</CoolTab>\n      </TabList>\n      <TabPanels>\n        <TabPanel>1</TabPanel>\n        <TabPanel>2</TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n})();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"tabpanel\"\n    }}>{`TabPanel`}</h3>\n    <p>{`The panel that displays when it's corresponding tab is active.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TabPanel>\n  <h2>The Best Food</h2>\n  <p>The best food is either Mexican or Indian.</p>\n</TabPanel>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"tabpanel-css-selectors\"\n    }}>{`TabPanel CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`/* styles all tabs */\n[data-reach-tab-panel] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"tabpanel-props\"\n    }}>{`TabPanel Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tabpanel-as\"\n            }}><inlineCode parentName=\"a\">{`as`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode>{` `}<Pipe mdxType=\"Pipe\" />{` `}<inlineCode parentName=\"td\">{`Component`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\"div\"`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tabpanel-children\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`node`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#tabpanel-div-props\"\n            }}><inlineCode parentName=\"a\">{`div`}</inlineCode>{` props`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"tabpanel-as\"\n    }}>{`TabPanel as`}</h5>\n    <p><inlineCode parentName=\"p\">{`as?: keyof JSX.IntrinsicElements | React.ComponentType`}</inlineCode></p>\n    <p>{`TabPanel will render a `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{` unless you specify a different element.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Tab as={View} />\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"tabpanel-children\"\n    }}>{`TabPanel children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children?: React.ReactNode`}</inlineCode></p>\n    <p><inlineCode parentName=\"p\">{`TabPanel`}</inlineCode>{` can receive any type of children.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TabPanel>\n  <h2>Whatever you want</h2>\n  <p>In here</p>\n</TabPanel>\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"tabpanel-div-props\"\n    }}>{`TabPanel div props`}</h5>\n    <p>{`All other props are passed to the underlying `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{` (or component passed to `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{`).`}</p>\n    <h3 {...{\n      \"id\": \"usetabscontext\"\n    }}>{`useTabsContext`}</h3>\n    <p><inlineCode parentName=\"p\">{`function useTabsContext(): { focusedIndex: number; id: string; selectedIndex: number }`}</inlineCode></p>\n    <p>{`A hook that exposes data for a given `}<inlineCode parentName=\"p\">{`Tabs`}</inlineCode>{` component to its descendants.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\n(() => {\n  function CustomTab({ index, ...props }) {\n    const { selectedIndex, focusedIndex } = useTabsContext();\n    return (\n      <Tab\n        style={{\n          borderBottom: \\`4px solid \\${\n            selectedIndex === index\n              ? \"red\"\n              : focusedIndex === index\n              ? \"blue\"\n              : \"black\"\n          }\\`,\n        }}\n        {...props}\n      />\n    );\n  }\n\n  return (\n    <Tabs keyboardActivation=\"manual\">\n      <TabList>\n        <CustomTab index={0}>Uno</CustomTab>\n        <CustomTab index={1}>Dos</CustomTab>\n        <CustomTab index={2}>Tres</CustomTab>\n      </TabList>\n      <TabPanels>\n        <TabPanel>\n          <p>Uno</p>\n        </TabPanel>\n        <TabPanel>\n          <p>Dos</p>\n        </TabPanel>\n        <TabPanel>\n          <p>Tres</p>\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"demos\"\n    }}>{`Demos`}</h2>\n    <p>{`These demos show off how you can add quite a bit of behavior to your Tabs interfaces.`}</p>\n    <h3 {...{\n      \"id\": \"data-driven-tabs\"\n    }}>{`Data-driven tabs`}</h3>\n    <p>{`If you'd like to drive your tabs with data you can create a `}<inlineCode parentName=\"p\">{`DataTabs`}</inlineCode>{` component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\n(() => {\n  function DataTabs({ data }) {\n    return (\n      <Tabs>\n        <TabList>\n          {data.map((tab, index) => (\n            <Tab key={index}>{tab.label}</Tab>\n          ))}\n        </TabList>\n        <TabPanels>\n          {data.map((tab, index) => (\n            <TabPanel key={index}>{tab.content}</TabPanel>\n          ))}\n        </TabPanels>\n      </Tabs>\n    );\n  }\n\n  // now if you have an array of data...\n  const tabData = [\n    { label: \"Taco\", content: \"Perhaps the greatest dish ever invented.\" },\n    {\n      label: \"Burrito\",\n      content:\n        \"Perhaps the greatest dish ever invented but bigger and with rice.\",\n    },\n  ];\n\n  // you can just pass it in:\n  return <DataTabs data={tabData} />;\n})();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"animation\"\n    }}>{`Animation`}</h3>\n    <p>{`With a little composition we can animate the selected tab bar.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\n(() => {\n  const HORIZONTAL_PADDING = 8;\n  const AnimatedContext = React.createContext();\n\n  function AnimatedTabs({ color, children, ...rest }) {\n    // some state to store the position we want to animate to\n    const [activeRect, setActiveRect] = React.useState(null);\n    const ref = React.useRef();\n    const rect = useRect(ref);\n\n    return (\n      // put the function to change the styles on context so an active Tab\n      // can call it, then style it up\n      <AnimatedContext.Provider value={setActiveRect}>\n        {/* make sure to forward props since we're wrapping Tabs */}\n        <Tabs\n          {...rest}\n          ref={ref}\n          style={{ ...rest.style, position: \"relative\" }}\n        >\n          <div\n            style={{\n              position: \"absolute\",\n              height: 2,\n              background: color,\n              transition: \"all 300ms ease\",\n              left:\n                (activeRect && activeRect.left) -\n                (rect && rect.left) +\n                HORIZONTAL_PADDING,\n              top: (activeRect && activeRect.bottom) - (rect && rect.top),\n              // subtract both sides of horizontal padding to center the div\n              width: activeRect && activeRect.width - HORIZONTAL_PADDING * 2,\n            }}\n          />\n          {children}\n        </Tabs>\n      </AnimatedContext.Provider>\n    );\n  }\n\n  function AnimatedTab({ index, ...props }) {\n    // get the currently selected index from useTabsContext\n    const { selectedIndex } = useTabsContext();\n    const isSelected = selectedIndex === index;\n\n    // measure the size of our element, only listen to rect if active\n    const ref = React.useRef();\n    const rect = useRect(ref, { observe: isSelected });\n\n    // get the style changing function from context\n    const setActiveRect = useContext(AnimatedContext);\n\n    // callup to set styles whenever we're active\n    React.useLayoutEffect(() => {\n      if (isSelected) {\n        setActiveRect(rect);\n      }\n    }, [isSelected, rect, setActiveRect]);\n\n    return (\n      <Tab\n        ref={ref}\n        {...props}\n        style={{\n          ...props.style,\n          border: \"none\",\n          padding: \\`4px \\${HORIZONTAL_PADDING}px\\`,\n        }}\n      />\n    );\n  }\n\n  return (\n    <AnimatedTabs color=\"red\" style={{ width: 400 }}>\n      <TabList style={{ justifyContent: \"space-around\" }}>\n        <AnimatedTab index={0} style={{ flex: 1 }}>\n          The First\n        </AnimatedTab>\n        <AnimatedTab index={1} style={{ flex: 2 }}>\n          This has longer text\n        </AnimatedTab>\n        <AnimatedTab index={2} style={{ flex: 1 }}>\n          Three\n        </AnimatedTab>\n      </TabList>\n      <TabPanels style={{ padding: 10 }}>\n        <TabPanel>\n          <p>Check it out! It's ~animated~</p>\n        </TabPanel>\n        <TabPanel>\n          <p>Yeah yeah. What's up?</p>\n        </TabPanel>\n        <TabPanel>\n          <p>Oh, hello there.</p>\n        </TabPanel>\n      </TabPanels>\n    </AnimatedTabs>\n  );\n})();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"keyboard-accessibility\"\n    }}>{`Keyboard Accessibility`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Key`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Action`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><kbd>{`Enter`}</kbd>{` / `}<kbd>{`Spacebar`}</kbd></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Sets the focused tab to `}<inlineCode parentName=\"td\">{`active`}</inlineCode>{` when `}<inlineCode parentName=\"td\">{`keyboardActivation`}</inlineCode>{` is set to `}<inlineCode parentName=\"td\">{`\"manual\"`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><kbd>{`ArrowUp`}</kbd>{` / `}<kbd>{`ArrowDown`}</kbd></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Navigates between tabs when `}<inlineCode parentName=\"td\">{`orientation`}</inlineCode>{` is `}<inlineCode parentName=\"td\">{`\"vertical\"`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><kbd>{`ArrowLeft`}</kbd>{` / `}<kbd>{`ArrowRight`}</kbd></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Navigates between tabs when `}<inlineCode parentName=\"td\">{`orientation`}</inlineCode>{` is `}<inlineCode parentName=\"td\">{`\"horizontal\"`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><kbd>{`Home`}</kbd>{` / `}<kbd>{`PageUp`}</kbd></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Navigates to the last tab in the `}<inlineCode parentName=\"td\">{`TabList`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><kbd>{`End`}</kbd>{` / `}<kbd>{`PageDown`}</kbd></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Navigates to the first tab in the `}<inlineCode parentName=\"td\">{`TabList`}</inlineCode>{`.`}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from \"react\";\n\nexport function Pipe() {\n  return <>|</>;\n}\n","import * as React from \"react\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\n\nexport function TOC({ children, label = \"Table of Contents\", ...props }) {\n  return (\n    <nav className=\"toc\" {...props}>\n      <VisuallyHidden>\n        <h2>{label}</h2>\n      </VisuallyHidden>\n      {children}\n    </nav>\n  );\n}\n\nexport function TOCList({ children, style = {}, ...props }) {\n  return (\n    <ul\n      style={{\n        display: \"block\",\n        padding: 0,\n        listStyle: \"none\",\n        ...style,\n      }}\n      {...props}\n    >\n      {children}\n    </ul>\n  );\n}\n\nexport function TOCLink({ href, children, ...props }) {\n  return (\n    <li style={{ display: \"inline-block\", margin: 0, padding: 0 }}>\n      <a href={href} {...props}>\n        {children}\n      </a>\n    </li>\n  );\n}\n"],"sourceRoot":""}