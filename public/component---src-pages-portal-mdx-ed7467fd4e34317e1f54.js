(self.webpackChunkreach_ui_website=self.webpackChunkreach_ui_website||[]).push([[736],{9477:function(e,t,n){"use strict";n.r(t),n.d(t,{_frontmatter:function(){return i},default:function(){return h}});var a=n(2265),r=(n(7294),n(4983)),o=n(1255),l=n(2335),p=["components"],i={},d={_frontmatter:i},s=o.Z;function h(e){var t=e.components,n=(0,a.Z)(e,p);return(0,r.kt)(s,Object.assign({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(l.Z,{title:"Portal",description:"Create and append a DOM node to the end of an HTML document and render a React tree into it",mdxType:"SEO"}),(0,r.kt)("h1",{id:"portal"},"Portal"),(0,r.kt)("p",null,"Creates and appends a DOM node to the end of ",(0,r.kt)("inlineCode",{parentName:"p"},"document.body")," and renders a React tree into it. Useful for rendering a natural React element hierarchy with a different DOM hierarchy to prevent parent styles from clipping or hiding content (for popovers, dropdowns, and modals)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'// jsx-demo\nfunction Example() {\n  return (\n    <div style={{ height: 50, overflow: "auto" }}>\n      <div style={{ border: "solid 5px", padding: 20, marginLeft: 170 }}>\n        This is the React Root where the portal is rendered. You can see it has\n        clipped overflow, but the portal\'s styles are just fine.\n      </div>\n      <Portal>\n        <div\n          style={{\n            position: "absolute",\n            top: 20,\n            right: 20,\n            width: 200,\n            border: "solid 1px hsla(0, 0%, 0%, 0.25)",\n            boxShadow: "0px 2px 10px hsla(0, 0%, 0%, 0.25)",\n            padding: 20,\n            background: "#f0f0f0",\n            textAlign: "center",\n          }}\n        >\n          This is in the portal\n        </div>\n      </Portal>\n    </div>\n  );\n}\n')),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"From the command line in your project directory, run ",(0,r.kt)("inlineCode",{parentName:"p"},"npm install @reach/portal")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn add @reach/portal"),". Then import the component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @reach/portal\n# or\nyarn add @reach/portal\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import Portal from "@reach/portal";\n')),(0,r.kt)("h2",{id:"component-api"},"Component API"),(0,r.kt)("h3",{id:"portal-1"},"Portal"),(0,r.kt)("p",null,"Renders content inside of a portal at the end of the DOM tree."),(0,r.kt)("h4",{id:"portal-props"},"Portal Props"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Prop"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#children"},(0,r.kt)("inlineCode",{parentName:"a"},"children"))),(0,r.kt)("td",{parentName:"tr",align:null},"node"),(0,r.kt)("td",{parentName:"tr",align:null},"true")))),(0,r.kt)("h5",{id:"portal-children"},"Portal children"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"children: React.ReactNode")),(0,r.kt)("p",null,"Any content you want to render inside of the portal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<Portal>\n  <div>Stuff goes here</div>\n</Portal>\n")),(0,r.kt)("h5",{id:"portal-type"},"Portal type"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Type"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," default: ",(0,r.kt)("inlineCode",{parentName:"p"},"reach-portal")),(0,r.kt)("p",null,"The DOM element type to render."))}h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-portal-mdx-ed7467fd4e34317e1f54.js.map