{"version":3,"sources":["webpack:///./src/pages/accordion.mdx","webpack:///./src/components/TOC.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","title","description","href","parentName","isMDXComponent","TOC","children","label","className","TOCList","style","display","padding","listStyle","TOCLink","margin"],"mappings":"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","file":"component---src-pages-accordion-mdx-b47ef84a552c137fcccb.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/reach/reach-ui/website/src/components/mdx-layout.js\";\nimport SEO from \"../components/SEO\";\nimport { TOC, TOCList, TOCLink } from \"../components/TOC\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <SEO title=\"Accordion\" description=\"Accessible accordion component for React\" mdxType=\"SEO\" />\n    <h1 {...{\n      \"id\": \"accordion\"\n    }}>{`Accordion`}</h1>\n    <TOC mdxType=\"TOC\">\n  <TOCList mdxType=\"TOCList\">\n    <TOCLink href=\"#accordion-1\" mdxType=\"TOCLink\">Accordion</TOCLink>\n    <TOCLink href=\"#accordionitem\" mdxType=\"TOCLink\">AccordionItem</TOCLink>\n    <TOCLink href=\"#accordionbutton\" mdxType=\"TOCLink\">AccordionButton</TOCLink>\n    <TOCLink href=\"#accordionpanel\" mdxType=\"TOCLink\">AccordionPanel</TOCLink>\n    <TOCLink href=\"#useaccordioncontext\" mdxType=\"TOCLink\">useAccordionContext</TOCLink>\n    <TOCLink href=\"#useAccordionitemcontext\" mdxType=\"TOCLink\">useAccordionItemContext</TOCLink>\n  </TOCList>\n    </TOC>\n    <ul>\n      <li parentName=\"ul\">{`Source: `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/reach/reach-ui/tree/main/packages/accordion\"\n        }}>{`https://github.com/reach/reach-ui/tree/main/packages/accordion`}</a></li>\n      <li parentName=\"ul\">{`WAI-ARIA: `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.w3.org/TR/wai-aria-practices-1.2/#accordion\"\n        }}>{`https://www.w3.org/TR/wai-aria-practices-1.2/#accordion`}</a></li>\n    </ul>\n    <p>{`An accordion is a vertically stacked group of collapsible sections. An accordion is composed of grouped buttons and panels. When a user selects an accordion button, its corresponding panel should switch between 'open' and 'collapsed' states.`}</p>\n    <p>{`Accordions follow many consistent patterns but do allow for some variability in behavior. For example, some accordions only allow one panel to be open at a time, where others may allow multiple or all panels to be open simultaneously. Similarly, many accordions will allow all panels to be simultaneously collapsed, while others may require one panel to be open at all times.`}</p>\n    <p>{`If you are familiar with the disclosure pattern, an accordion will feel very similar. The key distinction is that a disclosure is a standalone component that consists of a single button-panel-group. Because of this, you cannot navigate between different disclosures with a keyboard the same way you can with an accordion. To provide users with a predictable behavior between components, it is important to keep disclosures and accordions visually distinct across your app.`}</p>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p>{`From the command line in your project directory, run `}<inlineCode parentName=\"p\">{`npm install @reach/accordion`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`yarn add @reach/accordion`}</inlineCode>{`. Then import the components and styles that you need:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @reach/accordion\n# or\nyarn add @reach/accordion\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel,\n} from \"@reach/accordion\";\nimport \"@reach/accordion/styles.css\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Accordion>\n      <AccordionItem>\n        <h3>\n          <AccordionButton>Step 1: Do a thing</AccordionButton>\n        </h3>\n        <AccordionPanel>\n          Here are some detailed instructions about doing a thing. I am very\n          complex and probably contain a lot of content, so a user can hide or\n          show me by clicking the button above.\n        </AccordionPanel>\n      </AccordionItem>\n      <AccordionItem>\n        <h3>\n          <AccordionButton>Step 2: Do another thing</AccordionButton>\n        </h3>\n        <AccordionPanel>\n          Here are some detailed instructions about doing yet another thing.\n          There are a lot of things someone might want to do, so I am only going\n          to talk about doing that other thing. I'll let my fellow accordion\n          items go into detail about even more things.\n        </AccordionPanel>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"accordion-headings\"\n    }}>{`Accordion Headings`}</h3>\n    <p>{`With most accordion components, the `}<inlineCode parentName=\"p\">{`AccordionPanel`}</inlineCode>{` is treated as a semantic `}<inlineCode parentName=\"p\">{`region`}</inlineCode>{` of the document, similar to an HTML `}<inlineCode parentName=\"p\">{`section`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` tag. By default, we assign `}<inlineCode parentName=\"p\">{`role=\"region\"`}</inlineCode>{` and to each `}<inlineCode parentName=\"p\">{`AccordionPanel`}</inlineCode>{`, along with `}<inlineCode parentName=\"p\">{`aria-labelledby`}</inlineCode>{` referencing the associated `}<inlineCode parentName=\"p\">{`AccordionButton`}</inlineCode>{` component.`}</p>\n    <p>{`To improve the semantics of the markup further, the ARIA guidelines dictate that each accordion item's button should be wrapped in an element with `}<inlineCode parentName=\"p\">{`role=\"heading\"`}</inlineCode>{`, or more simply, and HTML heading tag. Because headings are necessarily dependent on the context of their surrounding content, we do not wrap the `}<inlineCode parentName=\"p\">{`AccordionButton`}</inlineCode>{` inside of a heading tag by default. It is up to each developer to implement this detail in a way that makes sense for their application.`}</p>\n    <p>{`You can abstract a solution in a variety of ways. Perhaps you write an `}<inlineCode parentName=\"p\">{`AccordionHeader`}</inlineCode>{` wrapper component that accepts a `}<inlineCode parentName=\"p\">{`headingLevel`}</inlineCode>{` prop:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`function AccordionHeader({ headingLevel = 2, props }) {\n  let Comp = \"h\" + headingLevel;\n  return (\n    <Comp>\n      <AccordionButton {...props} />\n    </Comp>\n  );\n}\n`}</code></pre>\n    <p>{`You can also create a context-aware heading component so that the heading level increments appropriately as content is nested:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\n(() => {\n  const HeadingContext = createContext(2);\n\n  function MyAccordionSection(props) {\n    return (\n      <div>\n        <Heading>How to do a thing</Heading>\n        <p>\n          Below I am going to explain how you might do a thing, in two very\n          important steps.\n        </p>\n        <Accordion>\n          <ContextAwareAccordionItem>\n            <AccordionHeader>Step 1: Do a thing</AccordionHeader>\n            <AccordionPanel>\n              Here are some detailed instructions about doing a thing. I am very\n              complex and probably contain a lot of content, so a user can hide\n              or show me by clicking the button above.\n            </AccordionPanel>\n          </ContextAwareAccordionItem>\n          <AccordionItem>\n            <AccordionHeader>Step 2: Do another thing</AccordionHeader>\n            <AccordionPanel>\n              Here are some detailed instructions about doing yet another thing.\n              There are a lot of things someone might want to do, so I am only\n              going to talk about doing that other thing. I'll let my fellow\n              accordion items go into detail about even more things.\n            </AccordionPanel>\n          </AccordionItem>\n        </Accordion>\n      </div>\n    );\n  }\n\n  function AccordionHeader(props) {\n    return (\n      <Heading>\n        <AccordionButton {...props} />\n      </Heading>\n    );\n  }\n\n  function ContextAwareAccordionItem(props) {\n    return (\n      <Section>\n        <AccordionItem {...props} />\n      </Section>\n    );\n  }\n\n  function Heading(props) {\n    let Comp = \"h\" + Math.min(useContext(HeadingContext), 6);\n    return <Comp {...props} />;\n  }\n\n  function Section(props) {\n    let headingLevel = useContext(HeadingContext);\n    return (\n      <HeadingContext.Provider value={headingLevel + 1}>\n        {props.children}\n      </HeadingContext.Provider>\n    );\n  }\n\n  return <MyAccordionSection />;\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"component-api\"\n    }}>{`Component API`}</h2>\n    <h3 {...{\n      \"id\": \"accordion-1\"\n    }}>{`Accordion`}</h3>\n    <p>{`The wrapper component for all other accordion components. Each accordion component will consist of accordion items whose buttons are keyboard navigable using arrow keys.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Accordion index={index} onChange={(value) => setIndex(value)}>\n  <AccordionItem>\n    <h3>\n      <AccordionButton>Step 1: Do a thing</AccordionButton>\n    </h3>\n    <AccordionPanel>...</AccordionPanel>\n  </AccordionItem>\n  <AccordionItem>\n    <h3>\n      <AccordionButton>Step 2: Do another thing</AccordionButton>\n    </h3>\n    <AccordionPanel>...</AccordionPanel>\n  </AccordionItem>\n</Accordion>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"accordion-css-selectors\"\n    }}>{`Accordion CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/reach-ui/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-accordion] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"collapsible-and-multiple-props\"\n    }}>{`collapsible and multiple props`}</h4>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`collapsible`}</inlineCode>{` prop to dictate that an accordion should allow all panels to be collapsed simultaneously. By default, one panel must be in an `}<inlineCode parentName=\"p\">{`open`}</inlineCode>{` state at all times.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Accordion collapsible>\n      <AccordionItem>\n        <h3>\n          <AccordionButton>Step 1: Do a thing</AccordionButton>\n        </h3>\n        <AccordionPanel>\n          Integer ad iaculis semper aenean nibh quisque hac eget volutpat, at\n          dui sem accumsan cras congue mi varius egestas interdum, molestie\n          blandit sociosqu sodales diam metus erat venenatis.\n        </AccordionPanel>\n      </AccordionItem>\n      <AccordionItem>\n        <h3>\n          <AccordionButton>Step 2: Do another thing</AccordionButton>\n        </h3>\n        <AccordionPanel>\n          Hendrerit faucibus litora justo aliquet inceptos gravida felis vel\n          aenean, natoque fermentum nostra tempus ornare nam diam est, neque\n          risus aliquam sapien vestibulum sociis integer eros.\n        </AccordionPanel>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`multiple`}</inlineCode>{` prop dictates that any number of panels may be open at the same time. By default, when a user opens a new accordion item, the previously open item will be set to `}<inlineCode parentName=\"p\">{`collapsed`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Accordion multiple>\n      <AccordionItem>\n        <h3>\n          <AccordionButton>Step 1: Do a thing</AccordionButton>\n        </h3>\n        <AccordionPanel>\n          Integer ad iaculis semper aenean nibh quisque hac eget volutpat, at\n          dui sem accumsan cras congue mi varius egestas interdum, molestie\n          blandit sociosqu sodales diam metus erat venenatis.\n        </AccordionPanel>\n      </AccordionItem>\n      <AccordionItem>\n        <h3>\n          <AccordionButton>Step 2: Do another thing</AccordionButton>\n        </h3>\n        <AccordionPanel>\n          Hendrerit faucibus litora justo aliquet inceptos gravida felis vel\n          aenean, natoque fermentum nostra tempus ornare nam diam est, neque\n          risus aliquam sapien vestibulum sociis integer eros.\n        </AccordionPanel>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n`}</code></pre>\n    <p>{`Using both props together dictates that any number of panels in an accordion can be `}<inlineCode parentName=\"p\">{`open`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`collapsed`}</inlineCode>{` at any time without regard to the state of other accordion items. These props are only relevant for uncontrolled accordion components, as the state of controlled accordion items is determined only by the `}<inlineCode parentName=\"p\">{`index`}</inlineCode>{` prop.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Accordion collapsible multiple>\n      <AccordionItem>\n        <h3>\n          <AccordionButton>Step 1: Do a thing</AccordionButton>\n        </h3>\n        <AccordionPanel>\n          Integer ad iaculis semper aenean nibh quisque hac eget volutpat, at\n          dui sem accumsan cras congue mi varius egestas interdum, molestie\n          blandit sociosqu sodales diam metus erat venenatis.\n        </AccordionPanel>\n      </AccordionItem>\n      <AccordionItem>\n        <h3>\n          <AccordionButton>Step 2: Do another thing</AccordionButton>\n        </h3>\n        <AccordionPanel>\n          Hendrerit faucibus litora justo aliquet inceptos gravida felis vel\n          aenean, natoque fermentum nostra tempus ornare nam diam est, neque\n          risus aliquam sapien vestibulum sociis integer eros.\n        </AccordionPanel>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"controlled-accordion\"\n    }}>{`Controlled Accordion`}</h4>\n    <p>{`If you want to control the accordion's open panels, you can do so by passing `}<a parentName=\"p\" {...{\n        \"href\": \"#accordion-index\"\n      }}><inlineCode parentName=\"a\">{`index`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#accordion-onchange\"\n      }}><inlineCode parentName=\"a\">{`onChange`}</inlineCode></a>{` props. The index corresponds with the order of each accordion item as they appear within an accordion. The index value passed sets its corresponding panel to an `}<inlineCode parentName=\"p\">{`open`}</inlineCode>{` state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const [index, setIndex] = useState(0);\nreturn (\n  <Accordion index={index} onChange={(value) => setIndex(value)}>\n    <AccordionItem {...items[0].props} />\n    <AccordionItem {...items[1].props} />\n    <AccordionItem {...items[2].props} />\n  </Accordion>\n);\n`}</code></pre>\n    <p>{`In a controlled accordion, multiple items can be set to `}<inlineCode parentName=\"p\">{`open`}</inlineCode>{` by passing an array of indices to the `}<inlineCode parentName=\"p\">{`index`}</inlineCode>{` prop.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const [indices, setIndices] = useState([0, 2]);\nfunction toggleItem(toggledIndex) {\n  if (indices.includes(toggledIndex)) {\n    setIndices(indices.filter((currentIndex) => currentIndex !== toggledIndex));\n  } else {\n    setIndices([...indices, toggledIndex].sort());\n  }\n}\n\nreturn (\n  <Accordion index={indices} onChange={toggleItem}>\n    <AccordionItem {...items[0].props} />\n    <AccordionItem {...items[1].props} />\n    <AccordionItem {...items[2].props} />\n  </Accordion>\n);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"accordion-props\"\n    }}>{`Accordion Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#accordion-children\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`node`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#accordion-collapsible\"\n            }}><inlineCode parentName=\"a\">{`collapsible`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#accordion-defaultindex\"\n            }}><inlineCode parentName=\"a\">{`defaultIndex`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode>{` `}{`|`}{` `}<inlineCode parentName=\"td\">{`number[]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#accordion-index\"\n            }}><inlineCode parentName=\"a\">{`index`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode>{` `}{`|`}{` `}<inlineCode parentName=\"td\">{`number[]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#accordion-multiple\"\n            }}><inlineCode parentName=\"a\">{`multiple`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#accordion-onchange\"\n            }}><inlineCode parentName=\"a\">{`onChange`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#accordion-readonly\"\n            }}><inlineCode parentName=\"a\">{`readOnly`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"accordion-children\"\n    }}>{`Accordion children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode`}</inlineCode></p>\n    <p><inlineCode parentName=\"p\">{`Accordion`}</inlineCode>{` can accept `}<inlineCode parentName=\"p\">{`AccordionItem`}</inlineCode>{` components as children.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Accordion>\n  <AccordionItem>\n    <AccordionButton />\n    <AccordionPanel />\n  </AccordionItem>\n  <AccordionItem>\n    <AccordionButton />\n    <AccordionPanel />\n  </AccordionItem>\n</Accordion>\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"accordion-collapsible\"\n    }}>{`Accordion collapsible`}</h5>\n    <p><inlineCode parentName=\"p\">{`collapsible?: boolean`}</inlineCode></p>\n    <p>{`Whether or not all panels of an uncontrolled accordion can be toggled to a closed state. See the `}<a parentName=\"p\" {...{\n        \"href\": \"#collapsible-and-multiple-props\"\n      }}><inlineCode parentName=\"a\">{`collapsible`}</inlineCode>{` and `}<inlineCode parentName=\"a\">{`multiple`}</inlineCode>{` props`}</a>{` section for details. Defaults to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`.`}</p>\n    <h5 {...{\n      \"id\": \"accordion-defaultindex\"\n    }}>{`Accordion defaultIndex`}</h5>\n    <p><inlineCode parentName=\"p\">{`defaultIndex?: number | number[]`}</inlineCode></p>\n    <p>{`A default value for the open panel's index or indices in an uncontrolled accordion component when it is initially rendered.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Accordion defaultIndex={1}>\n  <AccordionItem>\n    <AccordionButton />\n    <AccordionPanel>I will be closed on the initial render!</AccordionPanel>\n  </AccordionItem>\n  <AccordionItem>\n    <AccordionButton />\n    <AccordionPanel>I will be open on the initial render!</AccordionPanel>\n  </AccordionItem>\n</Accordion>\n`}</code></pre>\n    <p>{`If an accordion has no defaultIndex, the initially rendered open panel depends on the `}<inlineCode parentName=\"p\">{`collapsible`}</inlineCode>{` prop.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`If `}<inlineCode parentName=\"li\">{`collapsible`}</inlineCode>{` is set to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, without a `}<inlineCode parentName=\"li\">{`defaultIndex`}</inlineCode>{` no panels will initially be open. Otherwise, the first panel at index `}<inlineCode parentName=\"li\">{`0`}</inlineCode>{` will initially be open.`}</li>\n    </ul>\n    <p>{`You can only pass an array of indices to `}<inlineCode parentName=\"p\">{`defaultIndex`}</inlineCode>{` if you also set `}<inlineCode parentName=\"p\">{`multiple`}</inlineCode>{` to true.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Accordion defaultIndex={[0, 1]} multiple>\n  <AccordionItem>\n    <AccordionButton />\n    <AccordionPanel>I will be open on the initial render!</AccordionPanel>\n  </AccordionItem>\n  <AccordionItem>\n    <AccordionButton />\n    <AccordionPanel>I will also be open on the initial render!</AccordionPanel>\n  </AccordionItem>\n</Accordion>\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"accordion-index\"\n    }}>{`Accordion index`}</h5>\n    <p><inlineCode parentName=\"p\">{`index?: number | number[]`}</inlineCode></p>\n    <p>{`The index or array of indices for open accordion panels. The `}<inlineCode parentName=\"p\">{`index`}</inlineCode>{` prop should be used along with `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` to create controlled accordion components.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const [indices, setIndices] = useState([0, 2]);\nfunction toggleItem(toggledIndex) {\n  if (indices.includes(toggledIndex)) {\n    setIndices(indices.filter((currentIndex) => currentIndex !== toggledIndex));\n  } else {\n    setIndices([...indices, toggledIndex].sort());\n  }\n}\n\nreturn (\n  <Accordion index={indices} onChange={toggleItem}>\n    <AccordionItem {...items[0].props} />\n    <AccordionItem {...items[1].props} />\n    <AccordionItem {...items[2].props} />\n  </Accordion>\n);\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"accordion-multiple\"\n    }}>{`Accordion multiple`}</h5>\n    <p><inlineCode parentName=\"p\">{`multiple?: boolean`}</inlineCode></p>\n    <p>{`Whether or not multiple panels in an uncontrolled accordion can be opened at the same time. See the `}<a parentName=\"p\" {...{\n        \"href\": \"#collapsible-and-multiple-props\"\n      }}><inlineCode parentName=\"a\">{`collapsible`}</inlineCode>{` and `}<inlineCode parentName=\"a\">{`multiple`}</inlineCode>{` props`}</a>{` section for details. Defaults to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`.`}</p>\n    <h5 {...{\n      \"id\": \"accordion-onchange\"\n    }}>{`Accordion onChange`}</h5>\n    <p><inlineCode parentName=\"p\">{`onChange?: (value: number) => void`}</inlineCode></p>\n    <p>{`The callback that is fired when an accordion item's open state is changed.`}</p>\n    <h5 {...{\n      \"id\": \"accordion-readonly\"\n    }}>{`Accordion readOnly`}</h5>\n    <p><inlineCode parentName=\"p\">{`readOnly?: boolean`}</inlineCode></p>\n    <p>{`Whether or not an uncontrolled accordion is read-only (meaning that the user cannot toggle its state with a normal interaction). Defaults to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`.`}</p>\n    <p>{`Generally speaking, you probably want to avoid this, as it can be confusing especially when navigating by keyboard. However, this may be useful if you want to lock an accordion under certain conditions (perhaps user authentication is required to access the content). In these instances, you may want to include an alert when a user tries to activate a read-only accordion panel to let them know why it does not toggle as may be expected.`}</p>\n    <h3 {...{\n      \"id\": \"accordionitem\"\n    }}>{`AccordionItem`}</h3>\n    <p>{`A group that wraps an accordion's button and panel components.`}</p>\n    <h4 {...{\n      \"id\": \"accordionitem-css-selectors\"\n    }}>{`AccordionItem CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/reach-ui/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-accordion-item] {\n  /* styles for all accordion items */\n}\n[data-reach-accordion-item][data-state=\"open\"] {\n  /* styles for all open accordion items */\n}\n[data-reach-accordion-item][data-state=\"collapsed\"] {\n  /* styles for all collapsed accordion items */\n}\n[data-reach-accordion-item][data-disabled] {\n  /* styles for all disabled accordion items */\n}\n[data-reach-accordion-item][data-read-only] {\n  /* styles for all read-only accordion items */\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"accordionitem-props\"\n    }}>{`AccordionItem Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#accordionitem-as\"\n            }}><inlineCode parentName=\"a\">{`as`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode>{` `}{`|`}{` `}<inlineCode parentName=\"td\">{`Component`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#accordionitem-children\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`node`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#accordionitem-disabled\"\n            }}><inlineCode parentName=\"a\">{`disabled`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"accordionitem-as\"\n    }}>{`AccordionItem as`}</h5>\n    <p><inlineCode parentName=\"p\">{`as?: keyof JSX.IntrinsicElements | React.ComponentType`}</inlineCode></p>\n    <p>{`A string representing an HTML element or a React component that will tell the `}<inlineCode parentName=\"p\">{`AccordionItem`}</inlineCode>{` what element to render. Defaults to `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` Many semantic elements, such as `}<inlineCode parentName=\"p\">{`button`}</inlineCode>{` elements, have meaning to assistive devices and browsers that provide context for the user and, in many cases, provide or restrict interactive behaviors. Use caution when overriding our defaults and make sure that the element you choose to render provides the same experience for all users.`}</p>\n    </blockquote>\n    <h5 {...{\n      \"id\": \"accordionitem-children\"\n    }}>{`AccordionItem children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode`}</inlineCode></p>\n    <p>{`An `}<inlineCode parentName=\"p\">{`AccordionItem`}</inlineCode>{` expects to receive an `}<inlineCode parentName=\"p\">{`AccordionButton`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`AccordionPanel`}</inlineCode>{` components as its children, though you can also nest other components within an `}<inlineCode parentName=\"p\">{`AccordionItem`}</inlineCode>{` if you want some persistant content that is relevant to the section but not collapsible when the `}<inlineCode parentName=\"p\">{`AccordionButton`}</inlineCode>{` is toggled.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Accordion defaultIndex={[0, 1]} multiple>\n  <AccordionItem>\n    <AccordionButton>Step 1: Do this important thing</AccordionButton>\n    <AccordionPanel>Detailed instructions about step 1.</AccordionPanel>\n  </AccordionItem>\n  <AccordionItem>\n    <AccordionButton>Step 2: Do this other important thing</AccordionButton>\n    <AccordionPanel>Detailed instructions about step 1.</AccordionPanel>\n    {/* the following component will not collapse! */}\n    <SomeCalloutBox>\n      Important: you should always consult the user manual before doing step 2!\n    </SomeCalloutBox>\n  </AccordionItem>\n</Accordion>\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"accordionitem-disabled\"\n    }}>{`AccordionItem disabled`}</h5>\n    <p><inlineCode parentName=\"p\">{`disabled?: boolean`}</inlineCode></p>\n    <p>{`Whether or not an accordion panel is disabled from user interaction. Defaults to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"accordionbutton\"\n    }}>{`AccordionButton`}</h3>\n    <p>{`The trigger button a user clicks to interact with an accordion.`}</p>\n    <h4 {...{\n      \"id\": \"accordionbutton-css-selectors\"\n    }}>{`AccordionButton CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/reach-ui/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-accordion-button] {\n  /* styles for buttons in all accordion items */\n}\n[data-reach-accordion-button][aria-expanded] {\n  /* styles for buttons in open accordion items */\n}\n[data-reach-accordion-button][disabled] {\n  /* styles for all buttons in disabled accordion items */\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"accordionbutton-props\"\n    }}>{`AccordionButton Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#accordionbutton-as\"\n            }}><inlineCode parentName=\"a\">{`as`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode>{` `}{`|`}{` `}<inlineCode parentName=\"td\">{`Component`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#accordionbutton-children\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`node`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"accordionbutton-as\"\n    }}>{`AccordionButton as`}</h5>\n    <p><inlineCode parentName=\"p\">{`as?: keyof JSX.IntrinsicElements | React.ComponentType`}</inlineCode></p>\n    <p>{`A string representing an HTML element or a React component that will tell the `}<inlineCode parentName=\"p\">{`AccordionButton`}</inlineCode>{` what element to render. Defaults to `}<inlineCode parentName=\"p\">{`button`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` Many semantic elements, such as `}<inlineCode parentName=\"p\">{`button`}</inlineCode>{` elements, have meaning to assistive devices and browsers that provide context for the user and, in many cases, provide or restrict interactive behaviors. Use caution when overriding our defaults and make sure that the element you choose to render provides the same experience for all users.`}</p>\n    </blockquote>\n    <h5 {...{\n      \"id\": \"accordionbutton-children\"\n    }}>{`AccordionButton children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode`}</inlineCode></p>\n    <p>{`Typically a text string that serves as a label for the accordion, though nested DOM nodes can be passed as well so long as they are valid children of interactive elements.`}</p>\n    <p>{`If you need to group interactive elements within an accordion's button, we recommend grouping the button inside of a wrapper element rather than including invalid HTML inside the button:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\n(() => {\n  function Example() {\n    return (\n      <Accordion>\n        <AccordionItem>\n          <GroupedAccordionHeader>Option 1</GroupedAccordionHeader>\n          <StyledAccordionPanel>\n            Ante rhoncus facilisis iaculis nostra faucibus vehicula ac\n            consectetur pretium, lacus nunc consequat id viverra facilisi ligula\n            eleifend, congue gravida malesuada proin scelerisque luctus est\n            convallis.\n          </StyledAccordionPanel>\n        </AccordionItem>\n        <AccordionItem>\n          <GroupedAccordionHeader>Option 2</GroupedAccordionHeader>\n          <StyledAccordionPanel>\n            Ante rhoncus facilisis iaculis nostra faucibus vehicula ac\n            consectetur pretium, lacus nunc consequat id viverra facilisi ligula\n            eleifend, congue gravida malesuada proin scelerisque luctus est\n            convallis.\n          </StyledAccordionPanel>\n        </AccordionItem>\n        <AccordionItem>\n          <GroupedAccordionHeader>Option 3</GroupedAccordionHeader>\n          <StyledAccordionPanel>\n            Ante rhoncus facilisis iaculis nostra faucibus vehicula ac\n            consectetur pretium, lacus nunc consequat id viverra facilisi ligula\n            eleifend, congue gravida malesuada proin scelerisque luctus est\n            convallis.\n          </StyledAccordionPanel>\n        </AccordionItem>\n      </Accordion>\n    );\n  }\n\n  function StyledAccordionPanel(props) {\n    return <AccordionPanel style={{ padding: 10 }} {...props} />;\n  }\n\n  function GroupedAccordionHeader({ children }) {\n    return (\n      <div\n        style={{\n          alignItems: \"center\",\n          background: \"#eee\",\n          border: \"1px solid #888\",\n          borderRadius: 3,\n          margin: \"9px 0\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          padding: \"4px 10px\",\n        }}\n      >\n        <AccordionButton\n          style={{\n            appearance: \"none\",\n            background: 0,\n            border: 0,\n            boxShadow: \"none\",\n            color: \"inherit\",\n            display: \"block\",\n            textAlign: \"inherit\",\n            flexGrow: 1,\n            flexShrink: 0,\n            font: \"inherit\",\n            fontWeight: \"bolder\",\n            margin: 0,\n            padding: \"10px 0\",\n          }}\n        >\n          {children}\n        </AccordionButton>\n        <Menu>\n          <MenuButton style={{ margin: 0 }}>\n            <span>Actions</span>\n          </MenuButton>\n          <MenuList>\n            <MenuItem onSelect={() => console.log(\"Download\")}>\n              Download\n            </MenuItem>\n            <MenuItem onSelect={() => console.log(\"Copy\")}>\n              Create a Copy\n            </MenuItem>\n          </MenuList>\n        </Menu>\n      </div>\n    );\n  }\n  return <Example />;\n})();\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Further reading:`}</strong>{` `}<a parentName=\"li\" {...{\n          \"href\": \"https://adrianroselli.com/2016/12/be-wary-of-nesting-roles.html\"\n        }}><em parentName=\"a\">{`Be Wary of Nesting Roles`}</em>{` by Adrian Roselli`}</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"accordionpanel\"\n    }}>{`AccordionPanel`}</h3>\n    <p>{`The collapsible panel in which inner content for an accordion item is rendered.`}</p>\n    <h4 {...{\n      \"id\": \"accordionpanel-css-selectors\"\n    }}>{`AccordionPanel CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/reach-ui/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-accordion-panel] {\n  /* styles for all accordion panels */\n}\n[data-reach-accordion-panel][data-state=\"open\"] {\n  /* styles for all open accordion panels */\n}\n[data-reach-accordion-panel][data-state=\"collapsed\"] {\n  /* styles for all collapsed accordion panels */\n}\n[data-reach-accordion-panel][data-disabled] {\n  /* styles for all disabled accordion panels */\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"accordionpanel-props\"\n    }}>{`AccordionPanel Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#accordionpanel-as\"\n            }}><inlineCode parentName=\"a\">{`as`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode>{` `}{`|`}{` `}<inlineCode parentName=\"td\">{`Component`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#accordionpanel-children\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`node`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"accordionpanel-as\"\n    }}>{`AccordionPanel as`}</h5>\n    <p><inlineCode parentName=\"p\">{`as?: keyof JSX.IntrinsicElements | React.ComponentType`}</inlineCode></p>\n    <p>{`A string representing an HTML element or a React component that will tell the `}<inlineCode parentName=\"p\">{`AccordionPanel`}</inlineCode>{` what element to render. Defaults to `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` Many semantic elements, such as `}<inlineCode parentName=\"p\">{`button`}</inlineCode>{` elements, have meaning to assistive devices and browsers that provide context for the user and, in many cases, provide or restrict interactive behaviors. Use caution when overriding our defaults and make sure that the element you choose to render provides the same experience for all users.`}</p>\n    </blockquote>\n    <h5 {...{\n      \"id\": \"accordionpanel-children\"\n    }}>{`AccordionPanel children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode`}</inlineCode></p>\n    <p>{`Inner collapsible content for the accordion item.`}</p>\n    <h3 {...{\n      \"id\": \"useaccordioncontext\"\n    }}>{`useAccordionContext`}</h3>\n    <p><inlineCode parentName=\"p\">{`function useAccordionContext(): { id: string | undefined; openPanels: number[] }`}</inlineCode></p>\n    <p>{`A hook that exposes data for a given `}<inlineCode parentName=\"p\">{`Accordion`}</inlineCode>{` component to its descendants.`}</p>\n    <h3 {...{\n      \"id\": \"useaccordionitemcontext\"\n    }}>{`useAccordionItemContext`}</h3>\n    <p><inlineCode parentName=\"p\">{`function useAccordionItemContext(): { index: number; isExpanded: boolean }`}</inlineCode></p>\n    <p>{`A hook that exposes data for a given `}<inlineCode parentName=\"p\">{`AccordionItem`}</inlineCode>{` component to its descendants.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from \"react\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\n\nexport function TOC({ children, label = \"Table of Contents\", ...props }) {\n  return (\n    <nav className=\"toc\" {...props}>\n      <VisuallyHidden>\n        <h2>{label}</h2>\n      </VisuallyHidden>\n      {children}\n    </nav>\n  );\n}\n\nexport function TOCList({ children, style = {}, ...props }) {\n  return (\n    <ul\n      style={{\n        display: \"block\",\n        padding: 0,\n        listStyle: \"none\",\n        ...style\n      }}\n      {...props}\n    >\n      {children}\n    </ul>\n  );\n}\n\nexport function TOCLink({ href, children, ...props }) {\n  return (\n    <li style={{ display: \"inline-block\", margin: 0, padding: 0 }}>\n      <a href={href} {...props}>\n        {children}\n      </a>\n    </li>\n  );\n}\n"],"sourceRoot":""}