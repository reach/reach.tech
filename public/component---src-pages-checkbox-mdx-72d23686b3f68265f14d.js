(self.webpackChunkreach_ui_website=self.webpackChunkreach_ui_website||[]).push([[106],{8957:function(e,t,n){"use strict";n.r(t),n.d(t,{_frontmatter:function(){return s},default:function(){return h}});var a=n(2265),o=(n(7294),n(4983)),l=n(1255),c=n(2335),i=n(6182),r=n(3989),d=["components"],s={},p={_frontmatter:s},k=l.Z;function h(e){var t=e.components,n=(0,a.Z)(e,d);return(0,o.kt)(k,Object.assign({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(c.Z,{title:"Checkbox",description:"Accessible components to build custom, tri-state checkboxes in React",mdxType:"SEO"}),(0,o.kt)("h1",{id:"checkbox"},"Checkbox"),(0,o.kt)(i.Nt,{mdxType:"TOC"},(0,o.kt)(i.B$,{mdxType:"TOCList"},(0,o.kt)(i.G6,{href:"#mixedcheckbox-1",mdxType:"TOCLink"},"MixedCheckbox"),(0,o.kt)(i.G6,{href:"#usemixedcheckbox",mdxType:"TOCLink"},"useMixedCheckbox"),(0,o.kt)(i.G6,{href:"#customcheckbox-1",mdxType:"TOCLink"},"CustomCheckbox"),(0,o.kt)(i.G6,{href:"#customcheckboxcontainer",mdxType:"TOCLink"},"CustomCheckboxContainer"),(0,o.kt)(i.G6,{href:"#customcheckboxinput",mdxType:"TOCLink"},"CustomCheckboxInput"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Source: ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/reach/reach-ui/tree/main/packages/checkbox"},"https://github.com/reach/reach-ui/tree/main/packages/checkbox")),(0,o.kt)("li",{parentName:"ul"},"WAI-ARIA: ",(0,o.kt)("a",{parentName:"li",href:"https://www.w3.org/TR/wai-aria-practices-1.2/#checkbox"},"https://www.w3.org/TR/wai-aria-practices-1.2/#checkbox"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@reach/checkbox")," provides two top-level components:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"MixedCheckbox")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"CustomCheckbox"))),(0,o.kt)("h2",{id:"mixedcheckbox"},"MixedCheckbox"),(0,o.kt)("p",null,"A MixedCheckbox simply renders an HTML input element where the ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," attribute is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},'"checked"'),". Whereas the native input element technically only has two states (",(0,o.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"), there is a third visual state of ",(0,o.kt)("inlineCode",{parentName:"p"},"indeterminate")," that is designed to suggest that a user has fulfilled some part of whatever the checkbox is meant to control. For example, you may have multiple hierarchal checkboxes nested:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-md"},"[-] All fruits\n-- [ ] Apple\n-- [x] Banana\n-- [x] Orange\n")),(0,o.kt)("p",null,"In this example, the ",(0,o.kt)("inlineCode",{parentName:"p"},"All fruits")," checkbox is in an ",(0,o.kt)("inlineCode",{parentName:"p"},"indeterminate")," state because some (but not all) fruits in the list are checked. While this effect is possible with plain input components, the ",(0,o.kt)("inlineCode",{parentName:"p"},"MixedCheckbox")," component makes managing/syncing its state with the correct DOM attributes much simpler. All you have to do is pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"checked")," state, and ",(0,o.kt)("inlineCode",{parentName:"p"},"@reach/checkbox")," handles the necessary aria attributes and related node data!"),(0,o.kt)("p",null,"A mixed checkbox is not something you can naturally toggle by simply clicking the box itself. As such, you should manage its state in your app by passing a ",(0,o.kt)("inlineCode",{parentName:"p"},"checked")," prop and an ",(0,o.kt)("inlineCode",{parentName:"p"},"onChange")," handler. A mixed checkbox is necessarily controlled. If you use a ",(0,o.kt)("inlineCode",{parentName:"p"},"MixedCheckbox")," component without controlling its state, it will behave exactly the same way a native HTML input element behaves."),(0,o.kt)("p",null,"If you don't need ",(0,o.kt)("inlineCode",{parentName:"p"},"indeterminate")," state, you should probably just use a native HTML input for your checkboxes. But of course, sometimes designers have some other ideas that call for a custom solution. In that case, the ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomCheckbox")," component provides a customizable wrapper element that can be styled to fit your needs."),(0,o.kt)("h2",{id:"customcheckbox"},"CustomCheckbox"),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomCheckbox")," is useful because full control of a native HTML input's design is not always possible. You may want to provide custom check graphics or change the shape of the check or its color. This component provides a handy wrapper around a visually hidden native checkbox so that we avoid re-creating all of its native event behavior."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"CustomCheckbox")," uses our ",(0,o.kt)("inlineCode",{parentName:"p"},"MixedCheckbox")," so you get the same benefits for dealing with ",(0,o.kt)("inlineCode",{parentName:"p"},"indeterminate")," state when you use either!"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Accessibility Note: If you use our ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomCheckbox")," component, you will still need to ensure that your styles follow the guidelines outlined in the ",(0,o.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/wai-aria-practices-1.2/#checkbox"},"WAI-ARIA specifications for checkboxes"),". Pay special attention to focus styles for keyboard navigation. Our default styles provide focus styles by default.")),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"From the command line in your project directory, run ",(0,o.kt)("inlineCode",{parentName:"p"},"npm install @reach/checkbox")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn add @reach/checkbox"),". Then import the components and styles that you need:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @reach/checkbox\n# or\nyarn add @reach/checkbox\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import {\n  CustomCheckbox,\n  CustomCheckboxContainer,\n  CustomCheckboxInput,\n} from "@reach/checkbox";\nimport "@reach/checkbox/styles.css";\n')),(0,o.kt)("p",null,"If you are only using ",(0,o.kt)("inlineCode",{parentName:"p"},"MixedCheckbox")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"useMixedCheckbox"),", there is no need to include the stylesheet."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { MixedCheckbox, useMixedCheckbox } from "@reach/checkbox";\n')),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("h3",{id:"example-mixedcheckbox"},"Example MixedCheckbox"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'// jsx-demo\nfunction Example() {\n  const [checked, setChecked] = React.useState(true);\n  return (\n    <div>\n      <label>\n        <MixedCheckbox\n          value="whatever"\n          checked={checked}\n          onChange={(event) => {\n            setChecked(event.target.checked);\n          }}\n        />\n        I am feeling good today\n      </label>\n      <label>\n        <MixedCheckbox checked="mixed" />\n        Perma-mixed\n      </label>\n      <div style={{ marginTop: 10 }}>\n        <button onClick={() => setChecked("mixed")}>\n          I\'m not sure how I feel!\n        </button>\n      </div>\n    </div>\n  );\n}\n')),(0,o.kt)("h3",{id:"example-customcheckbox"},"Example CustomCheckbox"),(0,o.kt)("p",null,"With custom checkbox, you can choose between a high-level API where DOM elements\nare not individually exposed as components, or use the composed API to access\neach sub-component directly."),(0,o.kt)("h4",{id:"high-level-customcheckbox-api"},"High-level CustomCheckbox API"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'// jsx-demo\n(() => {\n  function MyCheckbox({ children, ...props }) {\n    return (\n      <span className={`example-custom-checkbox ${props.value}`}>\n        <label>\n          <CustomCheckbox {...props} />\n          {children}\n        </label>\n      </span>\n    );\n  }\n\n  function Checklist() {\n    return (\n      <fieldset>\n        <legend>What is your favorite fruit?</legend>\n        <MyCheckbox name="favorite-fruit" value="apple" color="#B22222">\n          Apple <span aria-hidden>üçé</span>\n        </MyCheckbox>\n        <MyCheckbox name="favorite-fruit" value="orange" color="#FF8C00">\n          Orange <span aria-hidden>üçä</span>\n        </MyCheckbox>\n        <MyCheckbox name="favorite-fruit" value="banana" color="#FFD700">\n          Banana <span aria-hidden>üçå</span>\n        </MyCheckbox>\n      </fieldset>\n    );\n  }\n\n  return <Checklist />;\n})();\n')),(0,o.kt)("h4",{id:"composed-customcheckbox-api"},"Composed CustomCheckbox API"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'// jsx-demo\n(() => {\n  function Example() {\n    return (\n      <div>\n        <label style={{ display: "flex", alignItems: "center" }}>\n          <MyCheckbox value="whatever" />\n          This is a pretty cool checkbox; do you agree?\n        </label>\n        <br />\n        <label style={{ display: "flex", alignItems: "center" }}>\n          <MyCheckbox checked="mixed" value="something-else" />\n          I\'m just an example of what I\'d look like if I had a mixed state.\n        </label>\n      </div>\n    );\n  }\n\n  function MyCheckbox(props) {\n    const [checkedState, setChecked] = React.useState(props.checked || false);\n    const checked = props.checked != null ? props.checked : checkedState;\n\n    return (\n      <CustomCheckboxContainer\n        checked={props.checked != null ? props.checked : checked}\n        onChange={(event) => setChecked(event.target.checked)}\n        style={getContainerStyle()}\n      >\n        <CustomCheckboxInput {...props} />\n        <span aria-hidden style={getCheckStyle(checked)} />\n      </CustomCheckboxContainer>\n    );\n  }\n\n  function getContainerStyle() {\n    return {\n      background: "rgba(240, 240, 250, 0.8)",\n      border: "2px solid rgba(0, 0, 0, 0.8)",\n      borderRadius: "3px",\n      height: 26,\n      width: 26,\n    };\n  }\n\n  function getCheckStyle(checked) {\n    return {\n      display: "block",\n      position: "absolute",\n      width: "60%",\n      height: "60%",\n      top: "50%",\n      left: "50%",\n      transform: `translate(-50%, -50%) scaleX(${!!checked ? 1 : 0}) scaleY(${\n        checked === true ? 1 : checked === "mixed" ? 0.4 : 0\n      })`,\n      transition: "transform 200ms ease-out, background 200ms ease-out",\n      zIndex: 1,\n      background:\n        checked === true\n          ? "green"\n          : checked === "mixed"\n          ? "goldenrod"\n          : "transparent",\n    };\n  }\n\n  return <Example />;\n})();\n')),(0,o.kt)("h2",{id:"component-api"},"Component API"),(0,o.kt)("h3",{id:"mixedcheckbox-1"},"MixedCheckbox"),(0,o.kt)("p",null,"Tri-state checkbox that accepts ",(0,o.kt)("inlineCode",{parentName:"p"},"checked")," values of ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," or ",(0,o.kt)("inlineCode",{parentName:"p"},'"mixed"'),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'// jsx-demo\nfunction Example() {\n  let [favoriteCondiments, setFavoriteCondiments] = React.useState({\n    mayo: true,\n    mustard: true,\n    ketchup: false,\n  });\n\n  // We can determine if all or some of the nested checkboxes are selected and\n  // use that to determine the state of our parent checkbox.\n  let allCondimentsChecked = Object.keys(favoriteCondiments).every(\n    (condiment) => favoriteCondiments[condiment] === true\n  );\n  let someCondimentsChecked = allCondimentsChecked\n    ? false\n    : Object.keys(favoriteCondiments).some(\n        (condiment) => favoriteCondiments[condiment] === true\n      );\n\n  let parentIsChecked = allCondimentsChecked\n    ? true\n    : someCondimentsChecked\n    ? "mixed"\n    : false;\n\n  // When we toggle a parent checkbox, we expect all of the nested checkboxes\n  // to toggle with it.\n  function handleParentChange(event) {\n    setFavoriteCondiments(\n      Object.keys(favoriteCondiments).reduce(\n        (state, condiment) => ({\n          ...state,\n          [condiment]: !allCondimentsChecked,\n        }),\n        {}\n      )\n    );\n  }\n\n  function handleChildChange(event) {\n    let { checked, value } = event.target;\n    setFavoriteCondiments({\n      ...favoriteCondiments,\n      [value]: checked,\n    });\n  }\n\n  return (\n    <fieldset>\n      <label>\n        <MixedCheckbox\n          value="condiments"\n          checked={parentIsChecked}\n          onChange={handleParentChange}\n        />\n        {allCondimentsChecked ? "Unselect" : "Select"} all condiments\n      </label>\n      <fieldset style={{ margin: "1rem 0 0", padding: "1rem 1.5rem" }}>\n        <legend>Condiments</legend>\n\n        <ul style={{ listStyle: "none", padding: 0, margin: 0 }}>\n          {Object.entries(favoriteCondiments).map(([value, state]) => (\n            <li key={value}>\n              <label>\n                <MixedCheckbox\n                  name="condiment"\n                  value={value}\n                  checked={state}\n                  onChange={handleChildChange}\n                />\n                {value}\n              </label>\n            </li>\n          ))}\n        </ul>\n      </fieldset>\n    </fieldset>\n  );\n}\n')),(0,o.kt)("h4",{id:"mixedcheckbox-props"},"MixedCheckbox Props"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"MixedCheckbox")," inherits its props from the ",(0,o.kt)("inlineCode",{parentName:"p"},"React.ComponentProps<'input'>")," type, with additional context documented below."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/forms.html"},"Check out the React documentation for additional information about form inputs in React.")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Prop"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Required"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#mixedcheckbox-checked"},(0,o.kt)("inlineCode",{parentName:"a"},"checked"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"boolean")," ",(0,o.kt)(r.E,{mdxType:"Pipe"})," ",(0,o.kt)("inlineCode",{parentName:"td"},'"mixed"')),(0,o.kt)("td",{parentName:"tr",align:null},"false")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#mixedcheckbox-onchange"},(0,o.kt)("inlineCode",{parentName:"a"},"onChange"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"func")),(0,o.kt)("td",{parentName:"tr",align:null},"false")))),(0,o.kt)("h5",{id:"mixedcheckbox-checked"},"MixedCheckbox checked"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},'checked?: boolean | "mixed')),(0,o.kt)("p",null,"Whether or not the checkbox is checked or in a ",(0,o.kt)("inlineCode",{parentName:"p"},"mixed")," (indeterminate) state."),(0,o.kt)("h5",{id:"mixedcheckbox-onchange"},"MixedCheckbox onChange"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;")),(0,o.kt)("p",null,"The callback that is fired when the checkbox value is changed."),(0,o.kt)("h3",{id:"usemixedcheckbox"},"useMixedCheckbox"),(0,o.kt)("p",null,"A hook that can be used to turn any HTML input component into a tri-state checkbox."),(0,o.kt)("p",null,"You must create a ref and pass it along with additional arguments to return a props object and state-related data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'// jsx-demo\nfunction Example({ disabled = false }) {\n  const [checked, setChecked] = React.useState(true);\n  let inputRef = React.useRef(null);\n  let [inputProps, stateData] = useMixedCheckbox(inputRef, {\n    // boolean\n    // A mixed checkbox may receive either `defaultChecked` or `checked`\n    // values, but not both!\n    defaultChecked: undefined,\n    // boolean | "mixed"\n    checked,\n    // (event: React.ChangeEvent<HTMLInputElement>) => void\n    onChange: (event) => setChecked(event.target.checked),\n    // boolean\n    disabled,\n  });\n  return (\n    <div>\n      <label>\n        <input {...inputProps} ref={inputRef} />\n        How about this cool example?\n      </label>\n      <button onClick={() => setChecked("mixed")}>Mix it up</button>\n      <hr />\n      Current state is: <pre>{String(stateData.checked)}</pre>\n    </div>\n  );\n}\n')),(0,o.kt)("h4",{id:"usemixedcheckbox-signature"},"useMixedCheckbox signature"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'function useMixedCheckbox(\n  ref: React.RefObject<HTMLInputElement | null>,\n  args?: {\n    checked?: boolean | "mixed";\n    defaultChecked?: boolean;\n    disabled?: boolean;\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    onClick?: (event: React.MouseEvent<HTMLInputElement>) => void;\n  },\n  functionOrComponentName: string = "useMixedCheckbox"\n): [\n  {\n    "aria-checked": boolean | "mixed";\n    checked: boolean;\n    disabled: boolean;\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    onClick: (event: React.MouseEvent<HTMLInputElement>) => void;\n    type: "checkbox";\n  },\n  { checked: boolean | "mixed" }\n];\n')),(0,o.kt)("h3",{id:"customcheckbox-1"},"CustomCheckbox"),(0,o.kt)("p",null,"A checkbox component with a wrapper element for custom styling."),(0,o.kt)("h4",{id:"customcheckbox-css-selectors"},"CustomCheckbox CSS Selectors"),(0,o.kt)("p",null,"Please see the ",(0,o.kt)("a",{parentName:"p",href:"/styling"},"styling guide"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},'[data-reach-custom-checkbox] {\n}\n[data-reach-custom-checkbox][data-state="checked"] {\n}\n[data-reach-custom-checkbox][data-state="unchecked"] {\n}\n[data-reach-custom-checkbox][data-state="mixed"] {\n}\n')),(0,o.kt)("h4",{id:"customcheckbox-props"},"CustomCheckbox Props"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Prop"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Required"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#customcheckbox-span-props"},(0,o.kt)("inlineCode",{parentName:"a"},"span")," props")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#customcheckbox-checked"},(0,o.kt)("inlineCode",{parentName:"a"},"checked"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"boolean")," ",(0,o.kt)(r.E,{mdxType:"Pipe"})," ",(0,o.kt)("inlineCode",{parentName:"td"},'"mixed"')),(0,o.kt)("td",{parentName:"tr",align:null},"false")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#customcheckbox-children"},(0,o.kt)("inlineCode",{parentName:"a"},"children"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"node")," ",(0,o.kt)(r.E,{mdxType:"Pipe"})," ",(0,o.kt)("inlineCode",{parentName:"td"},"func")),(0,o.kt)("td",{parentName:"tr",align:null},"false")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#customcheckbox-defaultchecked"},(0,o.kt)("inlineCode",{parentName:"a"},"defaultChecked"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"boolean")),(0,o.kt)("td",{parentName:"tr",align:null},"false")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#customcheckbox-disabled"},(0,o.kt)("inlineCode",{parentName:"a"},"disabled"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"boolean")),(0,o.kt)("td",{parentName:"tr",align:null},"false")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#customcheckbox-name"},(0,o.kt)("inlineCode",{parentName:"a"},"name"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"string")),(0,o.kt)("td",{parentName:"tr",align:null},"false")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#customcheckbox-onchange"},(0,o.kt)("inlineCode",{parentName:"a"},"onChange"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"func")),(0,o.kt)("td",{parentName:"tr",align:null},"false")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#customcheckbox-value"},(0,o.kt)("inlineCode",{parentName:"a"},"value"))),(0,o.kt)("td",{parentName:"tr",align:null},"`string"),(0,o.kt)("td",{parentName:"tr",align:null},"number`")))),(0,o.kt)("h5",{id:"customcheckbox-span-props"},"CustomCheckbox span props"),(0,o.kt)("p",null,"All props are spread to an underlying ",(0,o.kt)("inlineCode",{parentName:"p"},"span")," element."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<CustomCheckbox className="cool-checkbox" />\n')),(0,o.kt)("h5",{id:"customcheckbox-checked"},"CustomCheckbox checked"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},'checked?: boolean | "mixed"')),(0,o.kt)("p",null,"Whether or not the checkbox is checked or in a ",(0,o.kt)("inlineCode",{parentName:"p"},"mixed")," (indeterminate) state."),(0,o.kt)("h5",{id:"customcheckbox-children"},"CustomCheckbox children"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"children?: React.ReactNode;")),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomCheckbox")," can accept any React node as children so long as the rendered content is valid HTML. It is best to avoid adding interactive elements inside of a ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomCheckbox")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example({ innerStyle, ...props }) {\n  return (\n    <span>\n      <label>\n        <CustomCheckbox {...props}>\n          <span aria-hidden style={...innerStyle} />\n        </CustomCheckbox>\n      </label>\n    </span>\n  );\n}\n")),(0,o.kt)("h5",{id:"customcheckbox-defaultchecked"},"CustomCheckbox defaultChecked"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"defaultChecked?: boolean")),(0,o.kt)("p",null,"For uncontrolled checkbox components, ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultChecked")," dictates whether or not the default initial state for a checkbox is ",(0,o.kt)("inlineCode",{parentName:"p"},"checked"),"."),(0,o.kt)("p",null,"Because any checkbox with a ",(0,o.kt)("inlineCode",{parentName:"p"},"mixed")," state must be controlled by the app, ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultChecked")," only accepts ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," values."),(0,o.kt)("h5",{id:"customcheckbox-disabled"},"CustomCheckbox disabled"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"disabled?: boolean")),(0,o.kt)("p",null,"Whether or not the checkbox form input is disabled."),(0,o.kt)("h5",{id:"customcheckbox-name"},"CustomCheckbox name"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"name?: string")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," attribute passed to the checkbox form input."),(0,o.kt)("h5",{id:"customcheckbox-onchange"},"CustomCheckbox onChange"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;")),(0,o.kt)("p",null,"The callback that is fired when the checkbox value is changed."),(0,o.kt)("h5",{id:"customcheckbox-value"},"CustomCheckbox value"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"value?: string | number")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," attribute passed to the checkbox form input."),(0,o.kt)("h3",{id:"customcheckboxcontainer"},"CustomCheckboxContainer"),(0,o.kt)("p",null,"Wrapper component and context provider for a custom checkbox. It should be used in conjunction with the ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomCheckboxInput"),"."),(0,o.kt)("h4",{id:"customcheckboxcontainer-css-selectors"},"CustomCheckboxContainer CSS Selectors"),(0,o.kt)("p",null,"Please see the ",(0,o.kt)("a",{parentName:"p",href:"/styling"},"styling guide"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},'[data-reach-custom-checkbox-container] {\n}\n[data-reach-custom-checkbox-container][data-state="checked"] {\n}\n[data-reach-custom-checkbox-container][data-state="unchecked"] {\n}\n[data-reach-custom-checkbox-container][data-state="mixed"] {\n}\n')),(0,o.kt)("h4",{id:"customcheckboxcontainer-props"},"CustomCheckboxContainer Props"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Prop"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Required"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#customcheckboxcontainer-span-props"},(0,o.kt)("inlineCode",{parentName:"a"},"span")," props")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#customcheckboxcontainer-checked"},(0,o.kt)("inlineCode",{parentName:"a"},"checked"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"boolean")," ",(0,o.kt)(r.E,{mdxType:"Pipe"})," ",(0,o.kt)("inlineCode",{parentName:"td"},'"mixed"')),(0,o.kt)("td",{parentName:"tr",align:null},"false")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#customcheckboxcontainer-children"},(0,o.kt)("inlineCode",{parentName:"a"},"children"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"node")," ",(0,o.kt)(r.E,{mdxType:"Pipe"})," ",(0,o.kt)("inlineCode",{parentName:"td"},"func")),(0,o.kt)("td",{parentName:"tr",align:null},"true")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#customcheckboxcontainer-defaultchecked"},(0,o.kt)("inlineCode",{parentName:"a"},"defaultChecked"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"boolean")),(0,o.kt)("td",{parentName:"tr",align:null},"false")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#customcheckboxcontainer-disabled"},(0,o.kt)("inlineCode",{parentName:"a"},"disabled"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"boolean")),(0,o.kt)("td",{parentName:"tr",align:null},"false")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#customcheckboxcontainer-onchange"},(0,o.kt)("inlineCode",{parentName:"a"},"onChange"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"func")),(0,o.kt)("td",{parentName:"tr",align:null},"false")))),(0,o.kt)("h5",{id:"customcheckboxcontainer-span-props"},"CustomCheckboxContainer span props"),(0,o.kt)("p",null,"All props are spread to an underlying ",(0,o.kt)("inlineCode",{parentName:"p"},"span")," element."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<CustomCheckboxContainer className="cool-checkbox">\n  <CustomCheckboxInput />\n</CustomCheckboxContainer>\n')),(0,o.kt)("h5",{id:"customcheckboxcontainer-checked"},"CustomCheckboxContainer checked"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},'checked?: boolean | "mixed"')),(0,o.kt)("p",null,"Same as ",(0,o.kt)("a",{parentName:"p",href:"#customcheckbox-checked"},(0,o.kt)("inlineCode",{parentName:"a"},"CustomCheckbox")," ",(0,o.kt)("inlineCode",{parentName:"a"},"checked")),"."),(0,o.kt)("p",null,"This prop is assigned to the ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomCheckboxContainer")," and passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomCheckboxInput")," via the ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html"},"React Context API"),"."),(0,o.kt)("h5",{id:"customcheckboxcontainer-children"},"CustomCheckboxContainer children"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},'children: React.ReactNode | ((args: { checked: boolean | "mixed", inputRef: React.RefObject, focused: boolean }) => JSX.Element)')),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomCheckboxContainer")," can accept a React node or render prop function as its child. It should always have one ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomCheckboxInput")," component as a descendant."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example({ children, name, value, id, label, ...props }) {\n  return (\n    <span>\n      <CustomCheckbox {...props}>\n        {({ checked, focused }) => (\n          <span\n            aria-hidden\n            style={{\n              display: "block",\n              outline: focused ? "2px solid aqua" : undefined,\n            }}\n          >\n            {checked === "mixed" ? "‚õî" : checked ? "‚úÖ" : "‚ùå"}\n            <CustomCheckboxInput id={id} name={name} value={value} />\n          </span>\n        )}\n      </CustomCheckbox>\n      <label htmlFor={id}>{label}</label>\n    </span>\n  );\n}\n')),(0,o.kt)("h5",{id:"customcheckboxcontainer-defaultchecked"},"CustomCheckboxContainer defaultChecked"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"defaultChecked?: boolean")),(0,o.kt)("p",null,"Same as ",(0,o.kt)("a",{parentName:"p",href:"#customcheckbox-defaultchecked"},(0,o.kt)("inlineCode",{parentName:"a"},"CustomCheckbox")," ",(0,o.kt)("inlineCode",{parentName:"a"},"defaultChecked")),"."),(0,o.kt)("p",null,"This prop is assigned to the ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomCheckboxContainer")," and passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomCheckboxInput")," via the ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html"},"React Context API"),"."),(0,o.kt)("h5",{id:"customcheckboxcontainer-disabled"},"CustomCheckboxContainer disabled"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"disabled?: boolean")),(0,o.kt)("p",null,"Same as ",(0,o.kt)("a",{parentName:"p",href:"#customcheckbox-disabled"},(0,o.kt)("inlineCode",{parentName:"a"},"CustomCheckbox")," ",(0,o.kt)("inlineCode",{parentName:"a"},"disabled")),"."),(0,o.kt)("p",null,"This prop is assigned to the ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomCheckboxContainer")," and passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomCheckboxInput")," via the ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html"},"React Context API"),"."),(0,o.kt)("h5",{id:"customcheckboxcontainer-onchange"},"CustomCheckboxContainer onChange"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;")),(0,o.kt)("p",null,"Same as ",(0,o.kt)("a",{parentName:"p",href:"#customcheckbox-onchange"},(0,o.kt)("inlineCode",{parentName:"a"},"CustomCheckbox")," ",(0,o.kt)("inlineCode",{parentName:"a"},"onChange")),"."),(0,o.kt)("p",null,"This prop is assigned to the ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomCheckboxContainer")," and passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomCheckboxInput")," via the ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html"},"React Context API"),"."),(0,o.kt)("h3",{id:"customcheckboxinput"},"CustomCheckboxInput"),(0,o.kt)("p",null,"Component to render the HTML input element for our custom checkbox. The rendered element should be visually hidden and exists only to manage its state and hold a form name and value."),(0,o.kt)("h4",{id:"customcheckboxinput-css-selectors"},"CustomCheckboxInput CSS Selectors"),(0,o.kt)("p",null,"Please see the ",(0,o.kt)("a",{parentName:"p",href:"/styling"},"styling guide"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},'[data-reach-custom-checkbox-input] {\n}\n[data-reach-custom-checkbox-input][aria-checked="true"] {\n}\n[data-reach-custom-checkbox-input][aria-checked="false"] {\n}\n[data-reach-custom-checkbox-input][aria-checked="mixed"] {\n}\n')),(0,o.kt)("h4",{id:"customcheckboxinput-props"},"CustomCheckboxInput Props"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"CustomCheckboxInput")," inherits its props from the ",(0,o.kt)("inlineCode",{parentName:"p"},"React.ComponentProps<'input'>")," type, excluding:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#customcheckboxcontainer-checked"},(0,o.kt)("inlineCode",{parentName:"a"},"checked"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#customcheckboxcontainer-defaultchecked"},(0,o.kt)("inlineCode",{parentName:"a"},"defaultChecked"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#customcheckboxcontainer-disabled"},(0,o.kt)("inlineCode",{parentName:"a"},"disabled"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#customcheckboxcontainer-onchange"},(0,o.kt)("inlineCode",{parentName:"a"},"onChange")),"`")),(0,o.kt)("p",null,"Each of these props, if needed, should instead be assigned to ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomCheckboxContainer"),". They are passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomCheckboxInput")," via the ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html"},"React Context API")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/forms.html"},"Check out the React documentation for additional information about form inputs in React.")))}h.isMDXComponent=!0},3989:function(e,t,n){"use strict";n.d(t,{E:function(){return o}});var a=n(7294);function o(){return a.createElement(a.Fragment,null,"|")}},6182:function(e,t,n){"use strict";n.d(t,{Nt:function(){return k},B$:function(){return h},G6:function(){return m}});var a=n(5167),o=n(2265),l=n(7294),c=n(9042),i=["children","label"],r=["children","style"],d=["href","children"];function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){(0,a.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function k(e){var t=e.children,n=e.label,a=void 0===n?"Table of Contents":n,r=(0,o.Z)(e,i);return l.createElement("nav",Object.assign({className:"toc"},r),l.createElement(c.Z,null,l.createElement("h2",null,a)),t)}function h(e){var t=e.children,n=e.style,a=void 0===n?{}:n,c=(0,o.Z)(e,r);return l.createElement("ul",Object.assign({style:p({display:"block",padding:0,listStyle:"none"},a)},c),t)}function m(e){var t=e.href,n=e.children,a=(0,o.Z)(e,d);return l.createElement("li",{style:{display:"inline-block",margin:0,padding:0}},l.createElement("a",Object.assign({href:t},a),n))}}}]);
//# sourceMappingURL=component---src-pages-checkbox-mdx-72d23686b3f68265f14d.js.map