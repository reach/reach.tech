(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{Cqzw:function(n,e,t){"use strict";t.r(e),t.d(e,"_frontmatter",(function(){return s})),t.d(e,"default",(function(){return c}));t("rzGZ"),t("Dq+y"),t("8npG"),t("Ggvi"),t("E5k/"),t("q1tI");var a=t("7ljp"),o=t("LmON"),i=t("EYWl");var s={},r={_frontmatter:s},l=o.a;function c(n){var e=n.components,t=function(n,e){if(null==n)return{};var t,a,o={},i=Object.keys(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,["components"]);return Object(a.b)(l,Object.assign({},r,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)(i.a,{title:"Animation",description:"Guidelines for animating components in Reach UI",mdxType:"SEO"}),Object(a.b)("h1",{id:"animation"},"Animation"),Object(a.b)("p",null,'Animation is usually boiled down to three phases: enter, update, exit. With Reach UI you\'re probably just after the "enter" and "exit" phases.'),Object(a.b)("p",null,"You can achieve animation with CSS and/or composing with other React components. On this page we'll look at a few different approaches."),Object(a.b)("h2",{id:"css-animations"},"CSS Animations"),Object(a.b)("p",null,'You can animate the "enter" phase with just a little CSS.'),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"@keyframes slide-down {\n  0% {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.slide-down[data-reach-menu-list],\n.slide-down[data-reach-menu-items] {\n  border-radius: 5px;\n  animation: slide-down 0.2s ease;\n}\n")),Object(a.b)("p",null,"And then add the class to your menu:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// jsx-demo\nfunction Example() {\n  return (\n    <Menu>\n      <MenuButton>\n        Actions <span aria-hidden>▾</span>\n      </MenuButton>\n      <MenuList className="slide-down">\n        <MenuItem onSelect={() => {}}>Start Video</MenuItem>\n        <MenuItem onSelect={() => {}}>Start Screenshare</MenuItem>\n        <MenuItem onSelect={() => {}}>Send a Message</MenuItem>\n      </MenuList>\n    </Menu>\n  );\n}\n')),Object(a.b)("p",null,'However, you can\'t animate the "exit" phase with just CSS because React removes the element from the DOM immediately.'),Object(a.b)("h2",{id:"css--recondition-phase"},"CSS + reCONDITION Phase"),Object(a.b)("p",null,"You may want to use CSS for both the enter and exit phases. For this, we can combine some CSS with the ",Object(a.b)("inlineCode",{parentName:"p"},"Phased")," component from ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/theKashey/recondition"}),"reCONDITION"),"."),Object(a.b)("p",null,"First add the CSS to define the animation:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),".slide-down {\n  transition-property: transform, opacity;\n  transition-duration: 300ms;\n  opacity: 0;\n  transform: translateY(-10px);\n}\n\n.slide-down.enter {\n  opacity: 1;\n  transform: translateY(0px);\n}\n\n.slide-down.exit {\n  opacity: 0;\n}\n")),Object(a.b)("p",null,"Then import the Phased component:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'import { Phased } from "recondition";\n')),Object(a.b)("p",null,"Now we're ready to go:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// jsx-demo\nfunction Example() {\n  // TODO: Update with Phased example\n  return (\n    <Menu>\n      <MenuButton>\n        Actions <span aria-hidden>▾</span>\n      </MenuButton>\n      <MenuList className="slide-down">\n        <MenuItem onSelect={() => {}}>Start Video</MenuItem>\n        <MenuItem onSelect={() => {}}>Start Screenshare</MenuItem>\n        <MenuItem onSelect={() => {}}>Send a Message</MenuItem>\n      </MenuList>\n    </Menu>\n  );\n}\n')),Object(a.b)("h2",{id:"react-spring"},"React Spring"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// jsx-demo\nfunction Example(props) {\n  const AnimatedDialogOverlay = animated(DialogOverlay);\n  const AnimatedDialogContent = animated(DialogContent);\n\n  const [showDialog, setShowDialog] = React.useState(false);\n  const transitions = useTransition(showDialog, null, {\n    from: { opacity: 0, y: -10 },\n    enter: { opacity: 1, y: 0 },\n    leave: { opacity: 0, y: 10 },\n  });\n  return (\n    <div>\n      <button onClick={() => setShowDialog(true)}>Show Dialog</button>\n      {transitions.map(\n        ({ item, key, props: styles }) =>\n          item && (\n            <AnimatedDialogOverlay style={{ opacity: styles.opacity }}>\n              <AnimatedDialogContent\n                style={{\n                  transform: styles.y.interpolate(\n                    value => `translate3d(0px, ${value}px, 0px)`\n                  ),\n                  border: "4px solid hsla(0, 0%, 0%, 0.5)",\n                  borderRadius: 10,\n                }}\n              >\n                <button onClick={() => setShowDialog(false)}>\n                  Close Dialog\n                </button>\n                <p>React Spring makes it too easy!</p>\n                <input type="text" />\n                <br />\n                <input type="text" />\n                <button>Ayyyyyy</button>\n              </AnimatedDialogContent>\n            </AnimatedDialogOverlay>\n          )\n      )}\n    </div>\n  );\n}\n')))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-animation-mdx-559b047e8f11d33e1e53.js.map