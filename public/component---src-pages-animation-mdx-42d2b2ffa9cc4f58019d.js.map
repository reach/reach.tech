{"version":3,"sources":["webpack:///./src/pages/animation.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","title","description","parentName","isMDXComponent"],"mappings":"wPASaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAKC,MAAM,YAAYC,YAAY,kDAAkDF,QAAQ,QAC7F,iBAAQ,CACN,GAAM,aADR,aAGA,wKACA,gKACA,iBAAQ,CACN,GAAM,kBADR,kBAGA,kFACA,uBAAK,kCAAMG,WAAW,OAAU,CAC5B,UAAa,iBADZ,2SAmBL,6DACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0aAkBL,+IACA,iBAAQ,CACN,GAAM,0BADR,2BAGA,+HAA8G,0BAAYA,WAAW,KAAvB,UAA9G,mBAAoL,+BAAGA,WAAW,KAAQ,CACtM,KAAQ,6CADwK,eAApL,KAGA,mEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,kQAkBL,0DACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4CAIL,+CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,idAmBL,iBAAQ,CACN,GAAM,gBADR,gBAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,05CAiDTN,EAAWO,gBAAiB","file":"component---src-pages-animation-mdx-42d2b2ffa9cc4f58019d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/reach/reach-ui/website/src/components/mdx-layout.js\";\nimport SEO from \"../components/SEO\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <SEO title=\"Animation\" description=\"Guidelines for animating components in Reach UI\" mdxType=\"SEO\" />\n    <h1 {...{\n      \"id\": \"animation\"\n    }}>{`Animation`}</h1>\n    <p>{`Animation is usually boiled down to three phases: enter, update, exit. With Reach UI you're probably just after the \"enter\" and \"exit\" phases.`}</p>\n    <p>{`You can achieve animation with CSS and/or composing with other React components. On this page we'll look at a few different approaches.`}</p>\n    <h2 {...{\n      \"id\": \"css-animations\"\n    }}>{`CSS Animations`}</h2>\n    <p>{`You can animate the \"enter\" phase with just a little CSS.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@keyframes slide-down {\n  0% {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.slide-down[data-reach-menu-list],\n.slide-down[data-reach-menu-items] {\n  border-radius: 5px;\n  animation: slide-down 0.2s ease;\n}\n`}</code></pre>\n    <p>{`And then add the class to your menu:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Menu>\n      <MenuButton>\n        Actions <span aria-hidden>▾</span>\n      </MenuButton>\n      <MenuList className=\"slide-down\">\n        <MenuItem onSelect={() => {}}>Start Video</MenuItem>\n        <MenuItem onSelect={() => {}}>Start Screenshare</MenuItem>\n        <MenuItem onSelect={() => {}}>Send a Message</MenuItem>\n      </MenuList>\n    </Menu>\n  );\n}\n`}</code></pre>\n    <p>{`However, you can't animate the \"exit\" phase with just CSS because React removes the element from the DOM immediately.`}</p>\n    <h2 {...{\n      \"id\": \"css--recondition-phase\"\n    }}>{`CSS + reCONDITION Phase`}</h2>\n    <p>{`You may want to use CSS for both the enter and exit phases. For this, we can combine some CSS with the `}<inlineCode parentName=\"p\">{`Phased`}</inlineCode>{` component from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/theKashey/recondition\"\n      }}>{`reCONDITION`}</a>{`.`}</p>\n    <p>{`First add the CSS to define the animation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.slide-down {\n  transition-property: transform, opacity;\n  transition-duration: 300ms;\n  opacity: 0;\n  transform: translateY(-10px);\n}\n\n.slide-down.enter {\n  opacity: 1;\n  transform: translateY(0px);\n}\n\n.slide-down.exit {\n  opacity: 0;\n}\n`}</code></pre>\n    <p>{`Then import the Phased component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { Phased } from \"recondition\";\n`}</code></pre>\n    <p>{`Now we're ready to go:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  // TODO: Update with Phased example\n  return (\n    <Menu>\n      <MenuButton>\n        Actions <span aria-hidden>▾</span>\n      </MenuButton>\n      <MenuList className=\"slide-down\">\n        <MenuItem onSelect={() => {}}>Start Video</MenuItem>\n        <MenuItem onSelect={() => {}}>Start Screenshare</MenuItem>\n        <MenuItem onSelect={() => {}}>Send a Message</MenuItem>\n      </MenuList>\n    </Menu>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"react-spring\"\n    }}>{`React Spring`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example(props) {\n  const AnimatedDialogOverlay = animated(DialogOverlay);\n  const AnimatedDialogContent = animated(DialogContent);\n\n  const [showDialog, setShowDialog] = React.useState(false);\n  const transitions = useTransition(showDialog, null, {\n    from: { opacity: 0, y: -10 },\n    enter: { opacity: 1, y: 0 },\n    leave: { opacity: 0, y: 10 },\n  });\n  return (\n    <div>\n      <button onClick={() => setShowDialog(true)}>Show Dialog</button>\n      {transitions.map(\n        ({ item, key, props: styles }) =>\n          item && (\n            <AnimatedDialogOverlay style={{ opacity: styles.opacity }}>\n              <AnimatedDialogContent\n                style={{\n                  transform: styles.y.interpolate(\n                    value => \\`translate3d(0px, \\${value}px, 0px)\\`\n                  ),\n                  border: \"4px solid hsla(0, 0%, 0%, 0.5)\",\n                  borderRadius: 10,\n                }}\n              >\n                <button onClick={() => setShowDialog(false)}>\n                  Close Dialog\n                </button>\n                <p>React Spring makes it too easy!</p>\n                <input type=\"text\" />\n                <br />\n                <input type=\"text\" />\n                <button>Ayyyyyy</button>\n              </AnimatedDialogContent>\n            </AnimatedDialogOverlay>\n          )\n      )}\n    </div>\n  );\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}