(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{FYay:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return b}));n("rzGZ"),n("Dq+y"),n("8npG"),n("Ggvi"),n("E5k/"),n("q1tI");var a=n("7ljp"),s=n("LmON"),l=n("EYWl"),r=n("fVd4");var c={},i={_frontmatter:c},o=s.a;function b(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,s={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,["components"]);return Object(a.b)(o,Object.assign({},i,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)(l.a,{title:"Disclosure",description:"Accessible disclosure component for React",mdxType:"SEO"}),Object(a.b)("h1",{id:"disclosure"},"Disclosure"),Object(a.b)(r.a,{mdxType:"TOC"},Object(a.b)(r.c,{mdxType:"TOCList"},Object(a.b)(r.b,{href:"#disclosure-1",mdxType:"TOCLink"},"Disclosure"),Object(a.b)(r.b,{href:"#disclosurebutton",mdxType:"TOCLink"},"DisclosureButton"),Object(a.b)(r.b,{href:"#disclosurepanel",mdxType:"TOCLink"},"DisclosurePanel"))),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Source: ",Object(a.b)("a",Object.assign({parentName:"li"},{href:"https://github.com/reach/reach-ui/tree/main/packages/disclosure"}),"https://github.com/reach/reach-ui/tree/main/packages/disclosure")),Object(a.b)("li",{parentName:"ul"},"WAI-ARIA: ",Object(a.b)("a",Object.assign({parentName:"li"},{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure"}),"https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure"))),Object(a.b)("p",null,"A disclosure is a button that controls the visibility of a panel of content. When the content inside the panel is hidden, it is often styled as a typical push button with a right-pointing arrow or triangle to hint that activating the button will display additional content. When the content is visible, the arrow or triangle typically points down."),Object(a.b)("p",null,"If you have a group of disclosures that stack vertically and exist within the same logical context, you may want to use ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/reach-ui/accordion"}),Object(a.b)("inlineCode",{parentName:"a"},"@reach/accordion"))," instead."),Object(a.b)("h2",{id:"installation"},"Installation"),Object(a.b)("p",null,"From the command line in your project directory, run ",Object(a.b)("inlineCode",{parentName:"p"},"npm install @reach/disclosure")," or ",Object(a.b)("inlineCode",{parentName:"p"},"yarn add @reach/disclosure"),". Then import the components that you need:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"npm install @reach/disclosure\n# or\nyarn add @reach/disclosure\n")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'import {\n  Disclosure,\n  DisclosureButton,\n  DisclosurePanel,\n} from "@reach/disclosure";\n')),Object(a.b)("h2",{id:"usage"},"Usage"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"// jsx-demo\nfunction Example() {\n  return (\n    <Disclosure>\n      <DisclosureButton>Find out what lies beneath</DisclosureButton>\n      <DisclosurePanel>Here I am! I am the buried treasure!</DisclosurePanel>\n    </Disclosure>\n  );\n}\n")),Object(a.b)("h2",{id:"component-api"},"Component API"),Object(a.b)("h3",{id:"disclosure-1"},"Disclosure"),Object(a.b)("p",null,"The wrapper component and context provider for a disclosure's button and panel components. A disclosure should never have more than one button or panel descendants."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Disclosure>\n  <DisclosureButton>Do a thing</DisclosureButton>\n  <DisclosurePanel>...</DisclosurePanel>\n</Disclosure>\n")),Object(a.b)("p",null,"It is important to note that the ",Object(a.b)("inlineCode",{parentName:"p"},"Disclosure")," component doesn't actually render a DOM node, so there is no way to add styles to a disclosure wrapper directly. If you want your disclosure to have a wrapper element you can nest one directly."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Disclosure>\n  <div style={{ padding: 10 }}>\n    <DisclosureButton>Do a thing</DisclosureButton>\n    <DisclosurePanel>...</DisclosurePanel>\n  </div>\n</Disclosure>\n")),Object(a.b)("h4",{id:"controlled-disclosure"},"Controlled Disclosure"),Object(a.b)("p",null,"If you want to control the disclosure's value, you can do so by passing ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"#disclosure-open"}),Object(a.b)("inlineCode",{parentName:"a"},"open"))," and ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"#disclosure-onchange"}),Object(a.b)("inlineCode",{parentName:"a"},"onChange"))," props."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"const [isOpen, setOpen] = useState(false);\nreturn (\n  <Disclosure open={isOpen} onChange={() => setOpen(!isOpen)}>\n    <DisclosureButton />\n    <DisclosurePanel />\n  </Disclosure>\n);\n")),Object(a.b)("h4",{id:"disclosure-props"},"Disclosure Props"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Prop"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Required"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#disclosure-children"}),Object(a.b)("inlineCode",{parentName:"a"},"children"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"node")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"true")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#disclosure-defaultopen"}),Object(a.b)("inlineCode",{parentName:"a"},"defaultOpen"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"boolean")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#disclosure-id"}),Object(a.b)("inlineCode",{parentName:"a"},"id"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"string")," ","|"," ",Object(a.b)("inlineCode",{parentName:"td"},"number")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#disclosure-onchange"}),Object(a.b)("inlineCode",{parentName:"a"},"onChange"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"func")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#disclosure-open"}),Object(a.b)("inlineCode",{parentName:"a"},"open"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"boolean")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")))),Object(a.b)("h5",{id:"disclosure-children"},"Disclosure children"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"children: React.ReactNode")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Disclosure")," expects to receive accept ",Object(a.b)("inlineCode",{parentName:"p"},"DisclosureButton")," and ",Object(a.b)("inlineCode",{parentName:"p"},"DisclosurePanel")," components as either direct children or descendants. It can also accept wrapper elements if desired, though it is not recommended to pass other arbitrary components within a disclosure in most cases."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<div>\n  {/* OK! */}\n  <Disclosure>\n    <DisclosureButton>Click Me</DisclosureButton>\n    <DisclosurePanel>Collapse or open this content!</DisclosurePanel>\n  </Disclosure>\n\n  {/* Also OK! */}\n  <Disclosure>\n    <div>\n      <DisclosureButton>Click Me</DisclosureButton>\n      <DisclosurePanel>Collapse or open this content!</DisclosurePanel>\n    </div>\n  </Disclosure>\n\n  {/* Probably confusing, you should avoid! */}\n  <Disclosure>\n    <div>Mary had a little lamb, little lamb, blah blah blah</div>\n    <DisclosureButton>Click Me</DisclosureButton>\n    <DisclosurePanel>Collapse or open this content!</DisclosurePanel>\n    <blockquote>You miss 100% of the shots you don't take</blockquote>\n  </Disclosure>\n</div>\n")),Object(a.b)("h5",{id:"disclosure-defaultopen"},"Disclosure defaultOpen"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"defaultOpen?: boolean")),Object(a.b)("p",null,"Whether or not an uncontrolled disclosure component should default to its ",Object(a.b)("inlineCode",{parentName:"p"},"open")," state on the initial render. Defaults to ",Object(a.b)("inlineCode",{parentName:"p"},"false"),"."),Object(a.b)("h5",{id:"disclosure-id"},"Disclosure id"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"id?: string | number")),Object(a.b)("p",null,"An id used to assign aria and id attributes to nested ",Object(a.b)("inlineCode",{parentName:"p"},"DisclosureButton")," and ",Object(a.b)("inlineCode",{parentName:"p"},"DisclosurePanel")," components."),Object(a.b)("p",null,"Since the Disclosure component itself does not render a DOM element, an ",Object(a.b)("inlineCode",{parentName:"p"},"id")," prop will not appear in the DOM directly as may be expected. Rather, we need to generate IDs for the panel and button based on a disclosure ID for aria compliance. If no ",Object(a.b)("inlineCode",{parentName:"p"},"id")," is passed we will generate descendant IDs for you."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<Disclosure id="awesome-disclosure">\n  <div>\n    {" "}\n    {/* no ID passed here! */}\n    <DisclosureButton /> {/* <button id="awesome-disclosure--button" /> */}\n    <DisclosurePanel /> {/* <div id="awesome-disclosure--panel" /> */}\n  </div>\n</Disclosure>\n')),Object(a.b)("h5",{id:"disclosure-onchange"},"Disclosure onChange"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"onChange?: () => void")),Object(a.b)("p",null,"The callback that is fired when a disclosure's open state is changed."),Object(a.b)("h5",{id:"disclosure-open"},"Disclosure open"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"open?: boolean")),Object(a.b)("p",null,"The controlled open state of the disclosure. The ",Object(a.b)("inlineCode",{parentName:"p"},"open")," prop should be used along with ",Object(a.b)("inlineCode",{parentName:"p"},"onChange")," to create controlled disclosure components."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"const [open, setOpen] = useState(false);\nreturn (\n  <Disclosure open={open} onChange={() => setOpen(!open)}>\n    <DisclosureButton>I have a secret</DisclosureButton>\n    <DisclosurePanel>\n      Ante rhoncus facilisis iaculis nostra faucibus vehicula ac consectetur\n      pretium, lacus nunc consequat id viverra facilisi ligula eleifend, congue\n      gravida malesuada proin scelerisque luctus est convallis.\n    </DisclosurePanel>\n  </Disclosure>\n);\n")),Object(a.b)("h3",{id:"disclosurebutton"},"DisclosureButton"),Object(a.b)("p",null,"The trigger button a user clicks to interact with a disclosure."),Object(a.b)("h4",{id:"disclosurebutton-css-selectors"},"DisclosureButton CSS Selectors"),Object(a.b)("p",null,"Please see the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/reach-ui/styling"}),"styling guide"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),'[data-reach-disclosure-button] {\n}\n[data-reach-disclosure-button][data-state="open"] {\n}\n[data-reach-disclosure-button][data-state="collapsed"] {\n}\n')),Object(a.b)("h4",{id:"disclosurebutton-props"},"DisclosureButton Props"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Prop"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Required"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#disclosurebutton-children"}),Object(a.b)("inlineCode",{parentName:"a"},"children"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"node")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"true")))),Object(a.b)("h5",{id:"disclosurebutton-children"},"DisclosureButton children"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"children: React.ReactNode")),Object(a.b)("p",null,"Typically a text string that serves as a label for the disclosure button, though nested DOM nodes can be passed as well so long as they are valid children of interactive elements."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Further reading:")," ",Object(a.b)("a",Object.assign({parentName:"li"},{href:"https://adrianroselli.com/2016/12/be-wary-of-nesting-roles.html"}),Object(a.b)("em",{parentName:"a"},"Be Wary of Nesting Roles")," by Adrian Roselli"))),Object(a.b)("h3",{id:"disclosurepanel"},"DisclosurePanel"),Object(a.b)("p",null,"The collapsible panel in which inner content for a disclosure item is rendered."),Object(a.b)("h4",{id:"disclosurepanel-css-selectors"},"DisclosurePanel CSS Selectors"),Object(a.b)("p",null,"Please see the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/reach-ui/styling"}),"styling guide"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),'[data-reach-disclosure-panel] {\n}\n[data-reach-disclosure-panel][data-state="open"] {\n}\n[data-reach-disclosure-panel][data-state="collapsed"] {\n}\n')),Object(a.b)("h4",{id:"disclosurepanel-props"},"DisclosurePanel Props"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Prop"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Required"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#disclosurepanel-children"}),Object(a.b)("inlineCode",{parentName:"a"},"children"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"node")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"true")))),Object(a.b)("h5",{id:"disclosurepanel-children"},"DisclosurePanel children"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"children: React.ReactNode")),Object(a.b)("p",null,"Inner collapsible content for the disclosure item."))}b.isMDXComponent=!0},fVd4:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"c",(function(){return u})),n.d(t,"b",(function(){return d}));n("xtjI"),n("4DPX"),n("rzGZ"),n("Dq+y"),n("8npG"),n("Ggvi"),n("E5k/");var a=n("q1tI"),s=n.n(a),l=n("mh+Z");function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){if(null==e)return{};var n,a,s={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}function b(e){var t=e.children,n=e.label,a=void 0===n?"Table of Contents":n,r=o(e,["children","label"]);return s.a.createElement("nav",Object.assign({className:"toc"},r),s.a.createElement(l.a,null,s.a.createElement("h2",null,a)),t)}function u(e){var t=e.children,n=e.style,a=void 0===n?{}:n,l=o(e,["children","style"]);return s.a.createElement("ul",Object.assign({style:c({display:"block",padding:0,listStyle:"none"},a)},l),t)}function d(e){var t=e.href,n=e.children,a=o(e,["href","children"]);return s.a.createElement("li",{style:{display:"inline-block",margin:0,padding:0}},s.a.createElement("a",Object.assign({href:t},a),n))}}}]);
//# sourceMappingURL=component---src-pages-disclosure-mdx-e13f6852a647fab14c78.js.map