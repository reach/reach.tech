{"version":3,"sources":["webpack://reach-ui-website/./src/pages/checkbox.mdx","webpack://reach-ui-website/./src/components/Pipe.js","webpack://reach-ui-website/./src/components/TOC.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","title","description","href","parentName","isMDXComponent","Pipe","TOC","children","label","className","TOCList","style","display","padding","listStyle","TOCLink","margin"],"mappings":"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","file":"component---src-pages-checkbox-mdx-72d23686b3f68265f14d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/reach/reach-ui/website/src/components/mdx-layout.js\";\nimport SEO from \"../components/SEO\";\nimport { TOC, TOCList, TOCLink } from \"../components/TOC\";\nimport { Pipe } from \"../components/Pipe\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <SEO title=\"Checkbox\" description=\"Accessible components to build custom, tri-state checkboxes in React\" mdxType=\"SEO\" />\n    <h1 {...{\n      \"id\": \"checkbox\"\n    }}>{`Checkbox`}</h1>\n    <TOC mdxType=\"TOC\">\n  <TOCList mdxType=\"TOCList\">\n    <TOCLink href=\"#mixedcheckbox-1\" mdxType=\"TOCLink\">MixedCheckbox</TOCLink>\n    <TOCLink href=\"#usemixedcheckbox\" mdxType=\"TOCLink\">useMixedCheckbox</TOCLink>\n    <TOCLink href=\"#customcheckbox-1\" mdxType=\"TOCLink\">CustomCheckbox</TOCLink>\n    <TOCLink href=\"#customcheckboxcontainer\" mdxType=\"TOCLink\">CustomCheckboxContainer</TOCLink>\n    <TOCLink href=\"#customcheckboxinput\" mdxType=\"TOCLink\">CustomCheckboxInput</TOCLink>\n  </TOCList>\n    </TOC>\n    <ul>\n      <li parentName=\"ul\">{`Source: `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/reach/reach-ui/tree/main/packages/checkbox\"\n        }}>{`https://github.com/reach/reach-ui/tree/main/packages/checkbox`}</a></li>\n      <li parentName=\"ul\">{`WAI-ARIA: `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.w3.org/TR/wai-aria-practices-1.2/#checkbox\"\n        }}>{`https://www.w3.org/TR/wai-aria-practices-1.2/#checkbox`}</a></li>\n    </ul>\n    <p><inlineCode parentName=\"p\">{`@reach/checkbox`}</inlineCode>{` provides two top-level components:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`MixedCheckbox`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`CustomCheckbox`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"mixedcheckbox\"\n    }}>{`MixedCheckbox`}</h2>\n    <p>{`A MixedCheckbox simply renders an HTML input element where the `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` attribute is equal to `}<inlineCode parentName=\"p\">{`\"checked\"`}</inlineCode>{`. Whereas the native input element technically only has two states (`}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`), there is a third visual state of `}<inlineCode parentName=\"p\">{`indeterminate`}</inlineCode>{` that is designed to suggest that a user has fulfilled some part of whatever the checkbox is meant to control. For example, you may have multiple hierarchal checkboxes nested:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`[-] All fruits\n-- [ ] Apple\n-- [x] Banana\n-- [x] Orange\n`}</code></pre>\n    <p>{`In this example, the `}<inlineCode parentName=\"p\">{`All fruits`}</inlineCode>{` checkbox is in an `}<inlineCode parentName=\"p\">{`indeterminate`}</inlineCode>{` state because some (but not all) fruits in the list are checked. While this effect is possible with plain input components, the `}<inlineCode parentName=\"p\">{`MixedCheckbox`}</inlineCode>{` component makes managing/syncing its state with the correct DOM attributes much simpler. All you have to do is pass the `}<inlineCode parentName=\"p\">{`checked`}</inlineCode>{` state, and `}<inlineCode parentName=\"p\">{`@reach/checkbox`}</inlineCode>{` handles the necessary aria attributes and related node data!`}</p>\n    <p>{`A mixed checkbox is not something you can naturally toggle by simply clicking the box itself. As such, you should manage its state in your app by passing a `}<inlineCode parentName=\"p\">{`checked`}</inlineCode>{` prop and an `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` handler. A mixed checkbox is necessarily controlled. If you use a `}<inlineCode parentName=\"p\">{`MixedCheckbox`}</inlineCode>{` component without controlling its state, it will behave exactly the same way a native HTML input element behaves.`}</p>\n    <p>{`If you don't need `}<inlineCode parentName=\"p\">{`indeterminate`}</inlineCode>{` state, you should probably just use a native HTML input for your checkboxes. But of course, sometimes designers have some other ideas that call for a custom solution. In that case, the `}<inlineCode parentName=\"p\">{`CustomCheckbox`}</inlineCode>{` component provides a customizable wrapper element that can be styled to fit your needs.`}</p>\n    <h2 {...{\n      \"id\": \"customcheckbox\"\n    }}>{`CustomCheckbox`}</h2>\n    <p>{`A `}<inlineCode parentName=\"p\">{`CustomCheckbox`}</inlineCode>{` is useful because full control of a native HTML input's design is not always possible. You may want to provide custom check graphics or change the shape of the check or its color. This component provides a handy wrapper around a visually hidden native checkbox so that we avoid re-creating all of its native event behavior.`}</p>\n    <p><inlineCode parentName=\"p\">{`CustomCheckbox`}</inlineCode>{` uses our `}<inlineCode parentName=\"p\">{`MixedCheckbox`}</inlineCode>{` so you get the same benefits for dealing with `}<inlineCode parentName=\"p\">{`indeterminate`}</inlineCode>{` state when you use either!`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Accessibility Note: If you use our `}<inlineCode parentName=\"p\">{`CustomCheckbox`}</inlineCode>{` component, you will still need to ensure that your styles follow the guidelines outlined in the `}<a parentName=\"p\" {...{\n          \"href\": \"https://www.w3.org/TR/wai-aria-practices-1.2/#checkbox\"\n        }}>{`WAI-ARIA specifications for checkboxes`}</a>{`. Pay special attention to focus styles for keyboard navigation. Our default styles provide focus styles by default.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p>{`From the command line in your project directory, run `}<inlineCode parentName=\"p\">{`npm install @reach/checkbox`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`yarn add @reach/checkbox`}</inlineCode>{`. Then import the components and styles that you need:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @reach/checkbox\n# or\nyarn add @reach/checkbox\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  CustomCheckbox,\n  CustomCheckboxContainer,\n  CustomCheckboxInput,\n} from \"@reach/checkbox\";\nimport \"@reach/checkbox/styles.css\";\n`}</code></pre>\n    <p>{`If you are only using `}<inlineCode parentName=\"p\">{`MixedCheckbox`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`useMixedCheckbox`}</inlineCode>{`, there is no need to include the stylesheet.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { MixedCheckbox, useMixedCheckbox } from \"@reach/checkbox\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"example-mixedcheckbox\"\n    }}>{`Example MixedCheckbox`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  const [checked, setChecked] = React.useState(true);\n  return (\n    <div>\n      <label>\n        <MixedCheckbox\n          value=\"whatever\"\n          checked={checked}\n          onChange={(event) => {\n            setChecked(event.target.checked);\n          }}\n        />\n        I am feeling good today\n      </label>\n      <label>\n        <MixedCheckbox checked=\"mixed\" />\n        Perma-mixed\n      </label>\n      <div style={{ marginTop: 10 }}>\n        <button onClick={() => setChecked(\"mixed\")}>\n          I'm not sure how I feel!\n        </button>\n      </div>\n    </div>\n  );\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-customcheckbox\"\n    }}>{`Example CustomCheckbox`}</h3>\n    <p>{`With custom checkbox, you can choose between a high-level API where DOM elements\nare not individually exposed as components, or use the composed API to access\neach sub-component directly.`}</p>\n    <h4 {...{\n      \"id\": \"high-level-customcheckbox-api\"\n    }}>{`High-level CustomCheckbox API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\n(() => {\n  function MyCheckbox({ children, ...props }) {\n    return (\n      <span className={\\`example-custom-checkbox \\${props.value}\\`}>\n        <label>\n          <CustomCheckbox {...props} />\n          {children}\n        </label>\n      </span>\n    );\n  }\n\n  function Checklist() {\n    return (\n      <fieldset>\n        <legend>What is your favorite fruit?</legend>\n        <MyCheckbox name=\"favorite-fruit\" value=\"apple\" color=\"#B22222\">\n          Apple <span aria-hidden>🍎</span>\n        </MyCheckbox>\n        <MyCheckbox name=\"favorite-fruit\" value=\"orange\" color=\"#FF8C00\">\n          Orange <span aria-hidden>🍊</span>\n        </MyCheckbox>\n        <MyCheckbox name=\"favorite-fruit\" value=\"banana\" color=\"#FFD700\">\n          Banana <span aria-hidden>🍌</span>\n        </MyCheckbox>\n      </fieldset>\n    );\n  }\n\n  return <Checklist />;\n})();\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"composed-customcheckbox-api\"\n    }}>{`Composed CustomCheckbox API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\n(() => {\n  function Example() {\n    return (\n      <div>\n        <label style={{ display: \"flex\", alignItems: \"center\" }}>\n          <MyCheckbox value=\"whatever\" />\n          This is a pretty cool checkbox; do you agree?\n        </label>\n        <br />\n        <label style={{ display: \"flex\", alignItems: \"center\" }}>\n          <MyCheckbox checked=\"mixed\" value=\"something-else\" />\n          I'm just an example of what I'd look like if I had a mixed state.\n        </label>\n      </div>\n    );\n  }\n\n  function MyCheckbox(props) {\n    const [checkedState, setChecked] = React.useState(props.checked || false);\n    const checked = props.checked != null ? props.checked : checkedState;\n\n    return (\n      <CustomCheckboxContainer\n        checked={props.checked != null ? props.checked : checked}\n        onChange={(event) => setChecked(event.target.checked)}\n        style={getContainerStyle()}\n      >\n        <CustomCheckboxInput {...props} />\n        <span aria-hidden style={getCheckStyle(checked)} />\n      </CustomCheckboxContainer>\n    );\n  }\n\n  function getContainerStyle() {\n    return {\n      background: \"rgba(240, 240, 250, 0.8)\",\n      border: \"2px solid rgba(0, 0, 0, 0.8)\",\n      borderRadius: \"3px\",\n      height: 26,\n      width: 26,\n    };\n  }\n\n  function getCheckStyle(checked) {\n    return {\n      display: \"block\",\n      position: \"absolute\",\n      width: \"60%\",\n      height: \"60%\",\n      top: \"50%\",\n      left: \"50%\",\n      transform: \\`translate(-50%, -50%) scaleX(\\${!!checked ? 1 : 0}) scaleY(\\${\n        checked === true ? 1 : checked === \"mixed\" ? 0.4 : 0\n      })\\`,\n      transition: \"transform 200ms ease-out, background 200ms ease-out\",\n      zIndex: 1,\n      background:\n        checked === true\n          ? \"green\"\n          : checked === \"mixed\"\n          ? \"goldenrod\"\n          : \"transparent\",\n    };\n  }\n\n  return <Example />;\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"component-api\"\n    }}>{`Component API`}</h2>\n    <h3 {...{\n      \"id\": \"mixedcheckbox-1\"\n    }}>{`MixedCheckbox`}</h3>\n    <p>{`Tri-state checkbox that accepts `}<inlineCode parentName=\"p\">{`checked`}</inlineCode>{` values of `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`\"mixed\"`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  let [favoriteCondiments, setFavoriteCondiments] = React.useState({\n    mayo: true,\n    mustard: true,\n    ketchup: false,\n  });\n\n  // We can determine if all or some of the nested checkboxes are selected and\n  // use that to determine the state of our parent checkbox.\n  let allCondimentsChecked = Object.keys(favoriteCondiments).every(\n    (condiment) => favoriteCondiments[condiment] === true\n  );\n  let someCondimentsChecked = allCondimentsChecked\n    ? false\n    : Object.keys(favoriteCondiments).some(\n        (condiment) => favoriteCondiments[condiment] === true\n      );\n\n  let parentIsChecked = allCondimentsChecked\n    ? true\n    : someCondimentsChecked\n    ? \"mixed\"\n    : false;\n\n  // When we toggle a parent checkbox, we expect all of the nested checkboxes\n  // to toggle with it.\n  function handleParentChange(event) {\n    setFavoriteCondiments(\n      Object.keys(favoriteCondiments).reduce(\n        (state, condiment) => ({\n          ...state,\n          [condiment]: !allCondimentsChecked,\n        }),\n        {}\n      )\n    );\n  }\n\n  function handleChildChange(event) {\n    let { checked, value } = event.target;\n    setFavoriteCondiments({\n      ...favoriteCondiments,\n      [value]: checked,\n    });\n  }\n\n  return (\n    <fieldset>\n      <label>\n        <MixedCheckbox\n          value=\"condiments\"\n          checked={parentIsChecked}\n          onChange={handleParentChange}\n        />\n        {allCondimentsChecked ? \"Unselect\" : \"Select\"} all condiments\n      </label>\n      <fieldset style={{ margin: \"1rem 0 0\", padding: \"1rem 1.5rem\" }}>\n        <legend>Condiments</legend>\n\n        <ul style={{ listStyle: \"none\", padding: 0, margin: 0 }}>\n          {Object.entries(favoriteCondiments).map(([value, state]) => (\n            <li key={value}>\n              <label>\n                <MixedCheckbox\n                  name=\"condiment\"\n                  value={value}\n                  checked={state}\n                  onChange={handleChildChange}\n                />\n                {value}\n              </label>\n            </li>\n          ))}\n        </ul>\n      </fieldset>\n    </fieldset>\n  );\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"mixedcheckbox-props\"\n    }}>{`MixedCheckbox Props`}</h4>\n    <p><inlineCode parentName=\"p\">{`MixedCheckbox`}</inlineCode>{` inherits its props from the `}<inlineCode parentName=\"p\">{`React.ComponentProps<'input'>`}</inlineCode>{` type, with additional context documented below.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/forms.html\"\n      }}>{`Check out the React documentation for additional information about form inputs in React.`}</a></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#mixedcheckbox-checked\"\n            }}><inlineCode parentName=\"a\">{`checked`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode>{` `}<Pipe mdxType=\"Pipe\" />{` `}<inlineCode parentName=\"td\">{`\"mixed\"`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#mixedcheckbox-onchange\"\n            }}><inlineCode parentName=\"a\">{`onChange`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"mixedcheckbox-checked\"\n    }}>{`MixedCheckbox checked`}</h5>\n    <p><inlineCode parentName=\"p\">{`checked?: boolean | \"mixed`}</inlineCode></p>\n    <p>{`Whether or not the checkbox is checked or in a `}<inlineCode parentName=\"p\">{`mixed`}</inlineCode>{` (indeterminate) state.`}</p>\n    <h5 {...{\n      \"id\": \"mixedcheckbox-onchange\"\n    }}>{`MixedCheckbox onChange`}</h5>\n    <p><inlineCode parentName=\"p\">{`onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;`}</inlineCode></p>\n    <p>{`The callback that is fired when the checkbox value is changed.`}</p>\n    <h3 {...{\n      \"id\": \"usemixedcheckbox\"\n    }}>{`useMixedCheckbox`}</h3>\n    <p>{`A hook that can be used to turn any HTML input component into a tri-state checkbox.`}</p>\n    <p>{`You must create a ref and pass it along with additional arguments to return a props object and state-related data.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example({ disabled = false }) {\n  const [checked, setChecked] = React.useState(true);\n  let inputRef = React.useRef(null);\n  let [inputProps, stateData] = useMixedCheckbox(inputRef, {\n    // boolean\n    // A mixed checkbox may receive either \\`defaultChecked\\` or \\`checked\\`\n    // values, but not both!\n    defaultChecked: undefined,\n    // boolean | \"mixed\"\n    checked,\n    // (event: React.ChangeEvent<HTMLInputElement>) => void\n    onChange: (event) => setChecked(event.target.checked),\n    // boolean\n    disabled,\n  });\n  return (\n    <div>\n      <label>\n        <input {...inputProps} ref={inputRef} />\n        How about this cool example?\n      </label>\n      <button onClick={() => setChecked(\"mixed\")}>Mix it up</button>\n      <hr />\n      Current state is: <pre>{String(stateData.checked)}</pre>\n    </div>\n  );\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"usemixedcheckbox-signature\"\n    }}>{`useMixedCheckbox signature`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`function useMixedCheckbox(\n  ref: React.RefObject<HTMLInputElement | null>,\n  args?: {\n    checked?: boolean | \"mixed\";\n    defaultChecked?: boolean;\n    disabled?: boolean;\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    onClick?: (event: React.MouseEvent<HTMLInputElement>) => void;\n  },\n  functionOrComponentName: string = \"useMixedCheckbox\"\n): [\n  {\n    \"aria-checked\": boolean | \"mixed\";\n    checked: boolean;\n    disabled: boolean;\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    onClick: (event: React.MouseEvent<HTMLInputElement>) => void;\n    type: \"checkbox\";\n  },\n  { checked: boolean | \"mixed\" }\n];\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"customcheckbox-1\"\n    }}>{`CustomCheckbox`}</h3>\n    <p>{`A checkbox component with a wrapper element for custom styling.`}</p>\n    <h4 {...{\n      \"id\": \"customcheckbox-css-selectors\"\n    }}>{`CustomCheckbox CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-custom-checkbox] {\n}\n[data-reach-custom-checkbox][data-state=\"checked\"] {\n}\n[data-reach-custom-checkbox][data-state=\"unchecked\"] {\n}\n[data-reach-custom-checkbox][data-state=\"mixed\"] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"customcheckbox-props\"\n    }}>{`CustomCheckbox Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#customcheckbox-span-props\"\n            }}><inlineCode parentName=\"a\">{`span`}</inlineCode>{` props`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#customcheckbox-checked\"\n            }}><inlineCode parentName=\"a\">{`checked`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode>{` `}<Pipe mdxType=\"Pipe\" />{` `}<inlineCode parentName=\"td\">{`\"mixed\"`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#customcheckbox-children\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`node`}</inlineCode>{` `}<Pipe mdxType=\"Pipe\" />{` `}<inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#customcheckbox-defaultchecked\"\n            }}><inlineCode parentName=\"a\">{`defaultChecked`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#customcheckbox-disabled\"\n            }}><inlineCode parentName=\"a\">{`disabled`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#customcheckbox-name\"\n            }}><inlineCode parentName=\"a\">{`name`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#customcheckbox-onchange\"\n            }}><inlineCode parentName=\"a\">{`onChange`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#customcheckbox-value\"\n            }}><inlineCode parentName=\"a\">{`value`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\\`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number\\``}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"customcheckbox-span-props\"\n    }}>{`CustomCheckbox span props`}</h5>\n    <p>{`All props are spread to an underlying `}<inlineCode parentName=\"p\">{`span`}</inlineCode>{` element.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<CustomCheckbox className=\"cool-checkbox\" />\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"customcheckbox-checked\"\n    }}>{`CustomCheckbox checked`}</h5>\n    <p><inlineCode parentName=\"p\">{`checked?: boolean | \"mixed\"`}</inlineCode></p>\n    <p>{`Whether or not the checkbox is checked or in a `}<inlineCode parentName=\"p\">{`mixed`}</inlineCode>{` (indeterminate) state.`}</p>\n    <h5 {...{\n      \"id\": \"customcheckbox-children\"\n    }}>{`CustomCheckbox children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children?: React.ReactNode;`}</inlineCode></p>\n    <p>{`A `}<inlineCode parentName=\"p\">{`CustomCheckbox`}</inlineCode>{` can accept any React node as children so long as the rendered content is valid HTML. It is best to avoid adding interactive elements inside of a `}<inlineCode parentName=\"p\">{`CustomCheckbox`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`function Example({ innerStyle, ...props }) {\n  return (\n    <span>\n      <label>\n        <CustomCheckbox {...props}>\n          <span aria-hidden style={...innerStyle} />\n        </CustomCheckbox>\n      </label>\n    </span>\n  );\n}\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"customcheckbox-defaultchecked\"\n    }}>{`CustomCheckbox defaultChecked`}</h5>\n    <p><inlineCode parentName=\"p\">{`defaultChecked?: boolean`}</inlineCode></p>\n    <p>{`For uncontrolled checkbox components, `}<inlineCode parentName=\"p\">{`defaultChecked`}</inlineCode>{` dictates whether or not the default initial state for a checkbox is `}<inlineCode parentName=\"p\">{`checked`}</inlineCode>{`.`}</p>\n    <p>{`Because any checkbox with a `}<inlineCode parentName=\"p\">{`mixed`}</inlineCode>{` state must be controlled by the app, `}<inlineCode parentName=\"p\">{`defaultChecked`}</inlineCode>{` only accepts `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` values.`}</p>\n    <h5 {...{\n      \"id\": \"customcheckbox-disabled\"\n    }}>{`CustomCheckbox disabled`}</h5>\n    <p><inlineCode parentName=\"p\">{`disabled?: boolean`}</inlineCode></p>\n    <p>{`Whether or not the checkbox form input is disabled.`}</p>\n    <h5 {...{\n      \"id\": \"customcheckbox-name\"\n    }}>{`CustomCheckbox name`}</h5>\n    <p><inlineCode parentName=\"p\">{`name?: string`}</inlineCode></p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` attribute passed to the checkbox form input.`}</p>\n    <h5 {...{\n      \"id\": \"customcheckbox-onchange\"\n    }}>{`CustomCheckbox onChange`}</h5>\n    <p><inlineCode parentName=\"p\">{`onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;`}</inlineCode></p>\n    <p>{`The callback that is fired when the checkbox value is changed.`}</p>\n    <h5 {...{\n      \"id\": \"customcheckbox-value\"\n    }}>{`CustomCheckbox value`}</h5>\n    <p><inlineCode parentName=\"p\">{`value?: string | number`}</inlineCode></p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` attribute passed to the checkbox form input.`}</p>\n    <h3 {...{\n      \"id\": \"customcheckboxcontainer\"\n    }}>{`CustomCheckboxContainer`}</h3>\n    <p>{`Wrapper component and context provider for a custom checkbox. It should be used in conjunction with the `}<inlineCode parentName=\"p\">{`CustomCheckboxInput`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"customcheckboxcontainer-css-selectors\"\n    }}>{`CustomCheckboxContainer CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-custom-checkbox-container] {\n}\n[data-reach-custom-checkbox-container][data-state=\"checked\"] {\n}\n[data-reach-custom-checkbox-container][data-state=\"unchecked\"] {\n}\n[data-reach-custom-checkbox-container][data-state=\"mixed\"] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"customcheckboxcontainer-props\"\n    }}>{`CustomCheckboxContainer Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#customcheckboxcontainer-span-props\"\n            }}><inlineCode parentName=\"a\">{`span`}</inlineCode>{` props`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#customcheckboxcontainer-checked\"\n            }}><inlineCode parentName=\"a\">{`checked`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode>{` `}<Pipe mdxType=\"Pipe\" />{` `}<inlineCode parentName=\"td\">{`\"mixed\"`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#customcheckboxcontainer-children\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`node`}</inlineCode>{` `}<Pipe mdxType=\"Pipe\" />{` `}<inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#customcheckboxcontainer-defaultchecked\"\n            }}><inlineCode parentName=\"a\">{`defaultChecked`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#customcheckboxcontainer-disabled\"\n            }}><inlineCode parentName=\"a\">{`disabled`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#customcheckboxcontainer-onchange\"\n            }}><inlineCode parentName=\"a\">{`onChange`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"customcheckboxcontainer-span-props\"\n    }}>{`CustomCheckboxContainer span props`}</h5>\n    <p>{`All props are spread to an underlying `}<inlineCode parentName=\"p\">{`span`}</inlineCode>{` element.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<CustomCheckboxContainer className=\"cool-checkbox\">\n  <CustomCheckboxInput />\n</CustomCheckboxContainer>\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"customcheckboxcontainer-checked\"\n    }}>{`CustomCheckboxContainer checked`}</h5>\n    <p><inlineCode parentName=\"p\">{`checked?: boolean | \"mixed\"`}</inlineCode></p>\n    <p>{`Same as `}<a parentName=\"p\" {...{\n        \"href\": \"#customcheckbox-checked\"\n      }}><inlineCode parentName=\"a\">{`CustomCheckbox`}</inlineCode>{` `}<inlineCode parentName=\"a\">{`checked`}</inlineCode></a>{`.`}</p>\n    <p>{`This prop is assigned to the `}<inlineCode parentName=\"p\">{`CustomCheckboxContainer`}</inlineCode>{` and passed to the `}<inlineCode parentName=\"p\">{`CustomCheckboxInput`}</inlineCode>{` via the `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/context.html\"\n      }}>{`React Context API`}</a>{`.`}</p>\n    <h5 {...{\n      \"id\": \"customcheckboxcontainer-children\"\n    }}>{`CustomCheckboxContainer children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode | ((args: { checked: boolean | \"mixed\", inputRef: React.RefObject, focused: boolean }) => JSX.Element)`}</inlineCode></p>\n    <p>{`A `}<inlineCode parentName=\"p\">{`CustomCheckboxContainer`}</inlineCode>{` can accept a React node or render prop function as its child. It should always have one `}<inlineCode parentName=\"p\">{`CustomCheckboxInput`}</inlineCode>{` component as a descendant.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`function Example({ children, name, value, id, label, ...props }) {\n  return (\n    <span>\n      <CustomCheckbox {...props}>\n        {({ checked, focused }) => (\n          <span\n            aria-hidden\n            style={{\n              display: \"block\",\n              outline: focused ? \"2px solid aqua\" : undefined,\n            }}\n          >\n            {checked === \"mixed\" ? \"⛔\" : checked ? \"✅\" : \"❌\"}\n            <CustomCheckboxInput id={id} name={name} value={value} />\n          </span>\n        )}\n      </CustomCheckbox>\n      <label htmlFor={id}>{label}</label>\n    </span>\n  );\n}\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"customcheckboxcontainer-defaultchecked\"\n    }}>{`CustomCheckboxContainer defaultChecked`}</h5>\n    <p><inlineCode parentName=\"p\">{`defaultChecked?: boolean`}</inlineCode></p>\n    <p>{`Same as `}<a parentName=\"p\" {...{\n        \"href\": \"#customcheckbox-defaultchecked\"\n      }}><inlineCode parentName=\"a\">{`CustomCheckbox`}</inlineCode>{` `}<inlineCode parentName=\"a\">{`defaultChecked`}</inlineCode></a>{`.`}</p>\n    <p>{`This prop is assigned to the `}<inlineCode parentName=\"p\">{`CustomCheckboxContainer`}</inlineCode>{` and passed to the `}<inlineCode parentName=\"p\">{`CustomCheckboxInput`}</inlineCode>{` via the `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/context.html\"\n      }}>{`React Context API`}</a>{`.`}</p>\n    <h5 {...{\n      \"id\": \"customcheckboxcontainer-disabled\"\n    }}>{`CustomCheckboxContainer disabled`}</h5>\n    <p><inlineCode parentName=\"p\">{`disabled?: boolean`}</inlineCode></p>\n    <p>{`Same as `}<a parentName=\"p\" {...{\n        \"href\": \"#customcheckbox-disabled\"\n      }}><inlineCode parentName=\"a\">{`CustomCheckbox`}</inlineCode>{` `}<inlineCode parentName=\"a\">{`disabled`}</inlineCode></a>{`.`}</p>\n    <p>{`This prop is assigned to the `}<inlineCode parentName=\"p\">{`CustomCheckboxContainer`}</inlineCode>{` and passed to the `}<inlineCode parentName=\"p\">{`CustomCheckboxInput`}</inlineCode>{` via the `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/context.html\"\n      }}>{`React Context API`}</a>{`.`}</p>\n    <h5 {...{\n      \"id\": \"customcheckboxcontainer-onchange\"\n    }}>{`CustomCheckboxContainer onChange`}</h5>\n    <p><inlineCode parentName=\"p\">{`onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;`}</inlineCode></p>\n    <p>{`Same as `}<a parentName=\"p\" {...{\n        \"href\": \"#customcheckbox-onchange\"\n      }}><inlineCode parentName=\"a\">{`CustomCheckbox`}</inlineCode>{` `}<inlineCode parentName=\"a\">{`onChange`}</inlineCode></a>{`.`}</p>\n    <p>{`This prop is assigned to the `}<inlineCode parentName=\"p\">{`CustomCheckboxContainer`}</inlineCode>{` and passed to the `}<inlineCode parentName=\"p\">{`CustomCheckboxInput`}</inlineCode>{` via the `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/context.html\"\n      }}>{`React Context API`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"customcheckboxinput\"\n    }}>{`CustomCheckboxInput`}</h3>\n    <p>{`Component to render the HTML input element for our custom checkbox. The rendered element should be visually hidden and exists only to manage its state and hold a form name and value.`}</p>\n    <h4 {...{\n      \"id\": \"customcheckboxinput-css-selectors\"\n    }}>{`CustomCheckboxInput CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-custom-checkbox-input] {\n}\n[data-reach-custom-checkbox-input][aria-checked=\"true\"] {\n}\n[data-reach-custom-checkbox-input][aria-checked=\"false\"] {\n}\n[data-reach-custom-checkbox-input][aria-checked=\"mixed\"] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"customcheckboxinput-props\"\n    }}>{`CustomCheckboxInput Props`}</h4>\n    <p><inlineCode parentName=\"p\">{`CustomCheckboxInput`}</inlineCode>{` inherits its props from the `}<inlineCode parentName=\"p\">{`React.ComponentProps<'input'>`}</inlineCode>{` type, excluding:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#customcheckboxcontainer-checked\"\n        }}><inlineCode parentName=\"a\">{`checked`}</inlineCode></a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#customcheckboxcontainer-defaultchecked\"\n        }}><inlineCode parentName=\"a\">{`defaultChecked`}</inlineCode></a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#customcheckboxcontainer-disabled\"\n        }}><inlineCode parentName=\"a\">{`disabled`}</inlineCode></a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#customcheckboxcontainer-onchange\"\n        }}><inlineCode parentName=\"a\">{`onChange`}</inlineCode></a>{`\\``}</li>\n    </ul>\n    <p>{`Each of these props, if needed, should instead be assigned to `}<inlineCode parentName=\"p\">{`CustomCheckboxContainer`}</inlineCode>{`. They are passed to the `}<inlineCode parentName=\"p\">{`CustomCheckboxInput`}</inlineCode>{` via the `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/context.html\"\n      }}>{`React Context API`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/forms.html\"\n      }}>{`Check out the React documentation for additional information about form inputs in React.`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from \"react\";\n\nexport function Pipe() {\n  return <>|</>;\n}\n","import * as React from \"react\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\n\nexport function TOC({ children, label = \"Table of Contents\", ...props }) {\n  return (\n    <nav className=\"toc\" {...props}>\n      <VisuallyHidden>\n        <h2>{label}</h2>\n      </VisuallyHidden>\n      {children}\n    </nav>\n  );\n}\n\nexport function TOCList({ children, style = {}, ...props }) {\n  return (\n    <ul\n      style={{\n        display: \"block\",\n        padding: 0,\n        listStyle: \"none\",\n        ...style,\n      }}\n      {...props}\n    >\n      {children}\n    </ul>\n  );\n}\n\nexport function TOCLink({ href, children, ...props }) {\n  return (\n    <li style={{ display: \"inline-block\", margin: 0, padding: 0 }}>\n      <a href={href} {...props}>\n        {children}\n      </a>\n    </li>\n  );\n}\n"],"sourceRoot":""}