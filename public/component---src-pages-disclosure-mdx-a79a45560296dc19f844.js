(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{"9YL0":function(e,t,n){e.exports={Note:"Note-module--Note--3wcvj"}},FYay:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return b})),n.d(t,"default",(function(){return p}));var a=n("zLVn"),s=(n("q1tI"),n("7ljp")),l=n("LmON"),c=n("EYWl"),r=n("fVd4"),i=n("IuLF"),o=n("XWF4"),b={},u={_frontmatter:b},d=l.a;function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(s.b)(d,Object.assign({},u,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)(c.a,{title:"Disclosure",description:"Accessible disclosure component for React",mdxType:"SEO"}),Object(s.b)("h1",{id:"disclosure"},"Disclosure"),Object(s.b)(r.a,{mdxType:"TOC"},Object(s.b)(r.c,{mdxType:"TOCList"},Object(s.b)(r.b,{href:"#disclosure-1",mdxType:"TOCLink"},"Disclosure"),Object(s.b)(r.b,{href:"#disclosurebutton",mdxType:"TOCLink"},"DisclosureButton"),Object(s.b)(r.b,{href:"#disclosurepanel",mdxType:"TOCLink"},"DisclosurePanel"),Object(s.b)(r.b,{href:"#usedisclosurecontext",mdxType:"TOCLink"},"useDisclosureContext"))),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"Source: ",Object(s.b)("a",Object.assign({parentName:"li"},{href:"https://github.com/reach/reach-ui/tree/main/packages/disclosure"}),"https://github.com/reach/reach-ui/tree/main/packages/disclosure")),Object(s.b)("li",{parentName:"ul"},"WAI-ARIA: ",Object(s.b)("a",Object.assign({parentName:"li"},{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure"}),"https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure"))),Object(s.b)("p",null,"A disclosure is a button that controls the visibility of a panel of content. When the content inside the panel is hidden, it is often styled as a typical push button with a right-pointing arrow or triangle to hint that activating the button will display additional content. When the content is visible, the arrow or triangle typically points down."),Object(s.b)("p",null,"If you have a group of disclosures that stack vertically and exist within the same logical context, you may want to use ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"/accordion"}),Object(s.b)("inlineCode",{parentName:"a"},"@reach/accordion"))," instead."),Object(s.b)("h2",{id:"installation"},"Installation"),Object(s.b)("p",null,"From the command line in your project directory, run ",Object(s.b)("inlineCode",{parentName:"p"},"npm install @reach/disclosure")," or ",Object(s.b)("inlineCode",{parentName:"p"},"yarn add @reach/disclosure"),". Then import the components that you need:"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"npm install @reach/disclosure\n# or\nyarn add @reach/disclosure\n")),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'import {\n  Disclosure,\n  DisclosureButton,\n  DisclosurePanel,\n} from "@reach/disclosure";\n')),Object(s.b)("h2",{id:"usage"},"Usage"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"// jsx-demo\nfunction Example() {\n  return (\n    <Disclosure>\n      <DisclosureButton>Find out what lies beneath</DisclosureButton>\n      <DisclosurePanel>Here I am! I am the buried treasure!</DisclosurePanel>\n    </Disclosure>\n  );\n}\n")),Object(s.b)("h2",{id:"component-api"},"Component API"),Object(s.b)("h3",{id:"disclosure-1"},"Disclosure"),Object(s.b)("p",null,"The wrapper component and context provider for a disclosure's button and panel components. A disclosure should never have more than one button or panel descendants."),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Disclosure>\n  <DisclosureButton>Do a thing</DisclosureButton>\n  <DisclosurePanel>...</DisclosurePanel>\n</Disclosure>\n")),Object(s.b)("p",null,"It is important to note that the ",Object(s.b)("inlineCode",{parentName:"p"},"Disclosure")," component doesn't actually render a DOM node, so there is no way to add styles to a disclosure wrapper directly. If you want your disclosure to have a wrapper element you can nest one directly."),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Disclosure>\n  <div style={{ padding: 10 }}>\n    <DisclosureButton>Do a thing</DisclosureButton>\n    <DisclosurePanel>...</DisclosurePanel>\n  </div>\n</Disclosure>\n")),Object(s.b)("h4",{id:"controlled-disclosure"},"Controlled Disclosure"),Object(s.b)("p",null,"If you want to control the disclosure's value, you can do so by passing ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"#disclosure-open"}),Object(s.b)("inlineCode",{parentName:"a"},"open"))," and ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"#disclosure-onchange"}),Object(s.b)("inlineCode",{parentName:"a"},"onChange"))," props."),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"const [isOpen, setOpen] = React.useState(false);\nreturn (\n  <Disclosure open={isOpen} onChange={() => setOpen(!isOpen)}>\n    <DisclosureButton />\n    <DisclosurePanel />\n  </Disclosure>\n);\n")),Object(s.b)("h4",{id:"disclosure-props"},"Disclosure Props"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",Object.assign({parentName:"tr"},{align:null}),"Prop"),Object(s.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(s.b)("th",Object.assign({parentName:"tr"},{align:null}),"Required"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.b)("a",Object.assign({parentName:"td"},{href:"#disclosure-children"}),Object(s.b)("inlineCode",{parentName:"a"},"children"))),Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.b)("inlineCode",{parentName:"td"},"node")),Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),"true")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.b)("a",Object.assign({parentName:"td"},{href:"#disclosure-defaultopen"}),Object(s.b)("inlineCode",{parentName:"a"},"defaultOpen"))),Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.b)("inlineCode",{parentName:"td"},"boolean")),Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.b)("a",Object.assign({parentName:"td"},{href:"#disclosure-id"}),Object(s.b)("inlineCode",{parentName:"a"},"id"))),Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.b)("inlineCode",{parentName:"td"},"string")," ",Object(s.b)(o.a,{mdxType:"Pipe"})," ",Object(s.b)("inlineCode",{parentName:"td"},"number")),Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.b)("a",Object.assign({parentName:"td"},{href:"#disclosure-onchange"}),Object(s.b)("inlineCode",{parentName:"a"},"onChange"))),Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.b)("inlineCode",{parentName:"td"},"func")),Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.b)("a",Object.assign({parentName:"td"},{href:"#disclosure-open"}),Object(s.b)("inlineCode",{parentName:"a"},"open"))),Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.b)("inlineCode",{parentName:"td"},"boolean")),Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")))),Object(s.b)("h5",{id:"disclosure-children"},"Disclosure children"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"children: React.ReactNode")),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"Disclosure")," expects to receive accept ",Object(s.b)("inlineCode",{parentName:"p"},"DisclosureButton")," and ",Object(s.b)("inlineCode",{parentName:"p"},"DisclosurePanel")," components as either direct children or descendants. It can also accept wrapper elements if desired, though it is not recommended to pass other arbitrary components within a disclosure in most cases."),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<div>\n  {/* OK! */}\n  <Disclosure>\n    <DisclosureButton>Click Me</DisclosureButton>\n    <DisclosurePanel>Collapse or open this content!</DisclosurePanel>\n  </Disclosure>\n\n  {/* Also OK! */}\n  <Disclosure>\n    <div>\n      <DisclosureButton>Click Me</DisclosureButton>\n      <DisclosurePanel>Collapse or open this content!</DisclosurePanel>\n    </div>\n  </Disclosure>\n\n  {/* Probably confusing, you should avoid! */}\n  <Disclosure>\n    <div>Mary had a little lamb, little lamb, blah blah blah</div>\n    <DisclosureButton>Click Me</DisclosureButton>\n    <DisclosurePanel>Collapse or open this content!</DisclosurePanel>\n    <blockquote>You miss 100% of the shots you don't take</blockquote>\n  </Disclosure>\n</div>\n")),Object(s.b)("h5",{id:"disclosure-defaultopen"},"Disclosure defaultOpen"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"defaultOpen?: boolean")),Object(s.b)("p",null,"Whether or not an uncontrolled disclosure component should default to its ",Object(s.b)("inlineCode",{parentName:"p"},"open")," state on the initial render. Defaults to ",Object(s.b)("inlineCode",{parentName:"p"},"false"),"."),Object(s.b)("h5",{id:"disclosure-id"},"Disclosure id"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"id?: string | number")),Object(s.b)("p",null,"An id used to assign aria and id attributes to nested ",Object(s.b)("inlineCode",{parentName:"p"},"DisclosureButton")," and ",Object(s.b)("inlineCode",{parentName:"p"},"DisclosurePanel")," components."),Object(s.b)("p",null,"Since the Disclosure component itself does not render a DOM element, an ",Object(s.b)("inlineCode",{parentName:"p"},"id")," prop will not appear in the DOM directly as may be expected. Rather, we need to generate IDs for the panel and button based on a disclosure ID for aria compliance. If no ",Object(s.b)("inlineCode",{parentName:"p"},"id")," is passed we will generate descendant IDs for you."),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<Disclosure id="awesome-disclosure">\n  <div>\n    {" "}\n    {/* no ID passed here! */}\n    <DisclosureButton /> {/* <button id="awesome-disclosure--button" /> */}\n    <DisclosurePanel /> {/* <div id="awesome-disclosure--panel" /> */}\n  </div>\n</Disclosure>\n')),Object(s.b)("h5",{id:"disclosure-onchange"},"Disclosure onChange"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"onChange?: () => void")),Object(s.b)("p",null,"The callback that is fired when a disclosure's open state is changed."),Object(s.b)("h5",{id:"disclosure-open"},"Disclosure open"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"open?: boolean")),Object(s.b)("p",null,"The controlled open state of the disclosure. The ",Object(s.b)("inlineCode",{parentName:"p"},"open")," prop should be used along with ",Object(s.b)("inlineCode",{parentName:"p"},"onChange")," to create controlled disclosure components."),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"const [open, setOpen] = React.useState(false);\nreturn (\n  <Disclosure open={open} onChange={() => setOpen(!open)}>\n    <DisclosureButton>I have a secret</DisclosureButton>\n    <DisclosurePanel>\n      Ante rhoncus facilisis iaculis nostra faucibus vehicula ac consectetur\n      pretium, lacus nunc consequat id viverra facilisi ligula eleifend, congue\n      gravida malesuada proin scelerisque luctus est convallis.\n    </DisclosurePanel>\n  </Disclosure>\n);\n")),Object(s.b)("h3",{id:"disclosurebutton"},"DisclosureButton"),Object(s.b)("p",null,"The trigger button a user clicks to interact with a disclosure."),Object(s.b)("h4",{id:"disclosurebutton-css-selectors"},"DisclosureButton CSS Selectors"),Object(s.b)("p",null,"Please see the ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"/styling"}),"styling guide"),"."),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),'[data-reach-disclosure-button] {\n}\n[data-reach-disclosure-button][data-state="open"] {\n}\n[data-reach-disclosure-button][data-state="collapsed"] {\n}\n')),Object(s.b)("h4",{id:"disclosurebutton-props"},"DisclosureButton Props"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",Object.assign({parentName:"tr"},{align:null}),"Prop"),Object(s.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(s.b)("th",Object.assign({parentName:"tr"},{align:null}),"Required"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.b)("a",Object.assign({parentName:"td"},{href:"#disclosurebutton-as"}),Object(s.b)("inlineCode",{parentName:"a"},"as"))),Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.b)("inlineCode",{parentName:"td"},"string")," ",Object(s.b)(o.a,{mdxType:"Pipe"})," ",Object(s.b)("inlineCode",{parentName:"td"},"Component")),Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.b)("a",Object.assign({parentName:"td"},{href:"#disclosurebutton-children"}),Object(s.b)("inlineCode",{parentName:"a"},"children"))),Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.b)("inlineCode",{parentName:"td"},"node")),Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),"true")))),Object(s.b)("h5",{id:"disclosurebutton-as"},"DisclosureButton as"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"as?: keyof JSX.IntrinsicElements | React.ComponentType")),Object(s.b)("p",null,"A string representing an HTML element or a React component that will tell the ",Object(s.b)("inlineCode",{parentName:"p"},"DisclosureButton")," what element to render. Defaults to ",Object(s.b)("inlineCode",{parentName:"p"},"button"),"."),Object(s.b)(i.a,{mdxType:"AsPropWarning"}),Object(s.b)("h5",{id:"disclosurebutton-children"},"DisclosureButton children"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"children: React.ReactNode")),Object(s.b)("p",null,"Typically a text string that serves as a label for the disclosure button, though nested DOM nodes can be passed as well so long as they are valid children of interactive elements."),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"Further reading:")," ",Object(s.b)("a",Object.assign({parentName:"li"},{href:"https://adrianroselli.com/2016/12/be-wary-of-nesting-roles.html"}),Object(s.b)("em",{parentName:"a"},"Be Wary of Nesting Roles")," by Adrian Roselli"))),Object(s.b)("h3",{id:"disclosurepanel"},"DisclosurePanel"),Object(s.b)("p",null,"The collapsible panel in which inner content for a disclosure item is rendered."),Object(s.b)("h4",{id:"disclosurepanel-css-selectors"},"DisclosurePanel CSS Selectors"),Object(s.b)("p",null,"Please see the ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"/styling"}),"styling guide"),"."),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),'[data-reach-disclosure-panel] {\n}\n[data-reach-disclosure-panel][data-state="open"] {\n}\n[data-reach-disclosure-panel][data-state="collapsed"] {\n}\n')),Object(s.b)("h4",{id:"disclosurepanel-props"},"DisclosurePanel Props"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",Object.assign({parentName:"tr"},{align:null}),"Prop"),Object(s.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(s.b)("th",Object.assign({parentName:"tr"},{align:null}),"Required"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.b)("a",Object.assign({parentName:"td"},{href:"#disclosurepanel-as"}),Object(s.b)("inlineCode",{parentName:"a"},"as"))),Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.b)("inlineCode",{parentName:"td"},"string")," ",Object(s.b)(o.a,{mdxType:"Pipe"})," ",Object(s.b)("inlineCode",{parentName:"td"},"Component")),Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.b)("a",Object.assign({parentName:"td"},{href:"#disclosurepanel-children"}),Object(s.b)("inlineCode",{parentName:"a"},"children"))),Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.b)("inlineCode",{parentName:"td"},"node")),Object(s.b)("td",Object.assign({parentName:"tr"},{align:null}),"true")))),Object(s.b)("h5",{id:"disclosurepanel-as"},"DisclosurePanel as"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"as?: keyof JSX.IntrinsicElements | React.ComponentType")),Object(s.b)("p",null,"A string representing an HTML element or a React component that will tell the ",Object(s.b)("inlineCode",{parentName:"p"},"DisclosurePanel")," what element to render. Defaults to ",Object(s.b)("inlineCode",{parentName:"p"},"div"),"."),Object(s.b)(i.a,{mdxType:"AsPropWarning"}),Object(s.b)("h5",{id:"disclosurepanel-children"},"DisclosurePanel children"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"children: React.ReactNode")),Object(s.b)("p",null,"Inner collapsible content for the disclosure item."),Object(s.b)("h3",{id:"usedisclosurecontext"},"useDisclosureContext"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"function useDisclosureContext(): { id: string | undefined; panelId: string; open: boolean }")),Object(s.b)("p",null,"A hook that exposes data for a given ",Object(s.b)("inlineCode",{parentName:"p"},"Disclosure")," component to its descendants."))}p.isMDXComponent=!0},IuLF:function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var a=n("q1tI"),s=n("LZJn");function l(){return a.createElement(s.a,null,a.createElement("p",null,a.createElement("strong",null,"NOTE:")," Many semantic elements, such as"," ",a.createElement("code",null,"button")," elements, have meaning to assistive devices and browsers that provide context for the user and, in many cases, provide or restrict interactive behaviors. Use caution when overriding our defaults and make sure that the element you choose to render provides the same experience for all users."))}},LZJn:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var a=n("q1tI"),s=n("iuhU"),l=n("9YL0"),c=n.n(l);function r(e){return a.createElement("div",Object.assign({},e,{className:Object(s.a)(e.className,c.a.Note)}))}},XWF4:function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var a=n("q1tI");function s(){return a.createElement(a.Fragment,null,"|")}},fVd4:function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"c",(function(){return b})),n.d(t,"b",(function(){return u}));var a=n("rePB"),s=n("zLVn"),l=n("q1tI"),c=n("6XTH");function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){Object(a.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e){var t=e.children,n=e.label,a=void 0===n?"Table of Contents":n,r=Object(s.a)(e,["children","label"]);return l.createElement("nav",Object.assign({className:"toc"},r),l.createElement(c.a,null,l.createElement("h2",null,a)),t)}function b(e){var t=e.children,n=e.style,a=void 0===n?{}:n,c=Object(s.a)(e,["children","style"]);return l.createElement("ul",Object.assign({style:i({display:"block",padding:0,listStyle:"none"},a)},c),t)}function u(e){var t=e.href,n=e.children,a=Object(s.a)(e,["href","children"]);return l.createElement("li",{style:{display:"inline-block",margin:0,padding:0}},l.createElement("a",Object.assign({href:t},a),n))}}}]);
//# sourceMappingURL=component---src-pages-disclosure-mdx-a79a45560296dc19f844.js.map