(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{uXZO:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return u}));var s=n("zLVn"),a=(n("q1tI"),n("7ljp")),l=n("LmON"),o=n("EYWl"),c={},r={_frontmatter:c},i=l.a;function u(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(a.b)(i,Object.assign({},r,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)(o.a,{title:"Styling",description:"Guidelines for styling components in Reach UI",mdxType:"SEO"}),Object(a.b)("h1",{id:"styling"},"Styling"),Object(a.b)("p",null,Object(a.b)("a",Object.assign({parentName:"p"},{href:"#including-base-styles"}),"Including Base Styles")," -\n",Object(a.b)("a",Object.assign({parentName:"p"},{href:"#overriding--adding-new-styles"}),"Overriding and Adding New Styles")),Object(a.b)("p",null,"Styling a Reach component feels similar to styling any native element. There are no themes and you don't have to prescribe to any specific approach to styling. There are some basic styles to make the components usable off-the-shelf, but you can override and add to them with stylesheets, styled components, emotion, glamor, whatever you want."),Object(a.b)("h1",{id:"including-base-styles"},"Including Base Styles"),Object(a.b)("p",null,"Reach UI uses stylesheets for the components' base styles. You must include these styles in your app for the components to work properly."),Object(a.b)("h2",{id:"automatically-including-styles"},"Automatically Including Styles"),Object(a.b)("p",null,"A webpack plugin is in development that will automatically bundle the styles so you don't have to."),Object(a.b)("h2",{id:"skip-including-styles"},"Skip including styles"),Object(a.b)("p",null,"Normally, you'll receive a warning when you forget to include the matching CSS file. If you're implementing all styles yourself, you can disable this warning by setting a root CSS variable matching the package name to 1."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Please tread carefully")," - in most cases, the styles you import are better to override than remove completely."),Object(a.b)("p",null,"Here's an example:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),":root {\n  --reach-dialog: 1;\n}\n")),Object(a.b)("p",null,"If you still see the warning when running tests in Jest, you can skip them by mocking the function that checks the styles."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'jest.mock("@reach/utils", () => ({\n  ...jest.requireActual("@reach/utils"),\n  checkStyles: jest.fn()\n}));\n')),Object(a.b)("h2",{id:"using-a-bundler-webpack-parcel-etc"},"Using a Bundler (webpack, parcel, etc.)"),Object(a.b)("p",null,"If you are using a module bundler like webpack or parcel, you can import them where you import the component."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// import the components\nimport { Menu, MenuButton, MenuList, MenuItem } from "@reach/menu-button";\n\n// and the styles\nimport "@reach/menu-button/styles.css";\n\n// now you\'re good!\n')),Object(a.b)("p",null,"You will need to configure the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://webpack.js.org/loaders/css-loader"}),"webpack CSS")," loader if you haven't already. Parcel requires no configuration."),Object(a.b)("h2",{id:"not-using-a-bundler"},"Not Using a Bundler"),Object(a.b)("p",null,"If youâ€™re not using a bundler you can find the styles at:"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"your-app/node_modules/@reach/<package-name>/styles.css")),Object(a.b)("p",null,"Include those files however you include the rest of your stylesheets. Alternatively, you can use a CDN like Unpkg, but this is not recommended for production apps."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-html"}),'<link\n  rel="stylesheet"\n  type="text/css"\n  href="https://unpkg.com/@reach/<package-name>@<version>/styles.css"\n/>\n')),Object(a.b)("h1",{id:"overriding--adding-new-styles"},"Overriding & Adding New Styles"),Object(a.b)("p",null,"You should be able to style Reach UI components like any other element in your app. If not, report a bug!"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// Emotion and styled components\nlet YourMenuList = styled(MenuList)`\n  border: solid 2px black;\n  background: black;\n  color: red;\n  > [data-reach-menu-item][data-selected] {\n    background: red;\n    color: white;\n  }\n`\n\n// normal className\n<MenuList className="yep"/>\n\n// normal style\n<MenuList style={sure}/>\n\n// glamor CSS prop\n<MenuList css={absolutely}/>\n')),Object(a.b)("h2",{id:"css-selectors"},"CSS Selectors"),Object(a.b)("p",null,'Because Reach UI uses regular stylesheets for its own styles you can override them like any other element. All styles use the lowest possible "specificity score", so as long as you include the component styles before your own app styles you should not run into any specificity problems.'),Object(a.b)("p",null,'There are two types of selectors, "element" and "pseudo". The documentation for each component lists the selectors that apply to the component, but we\'re using ',Object(a.b)("inlineCode",{parentName:"p"},"MenuItem")," from ",Object(a.b)("inlineCode",{parentName:"p"},"@reach/menu-button")," as an example here."),Object(a.b)("h3",{id:"element-selectors"},'"Element" Selectors'),Object(a.b)("p",null,"Each component has a ",Object(a.b)("inlineCode",{parentName:"p"},"data-reach-*"),' attribute on the underlying DOM element that you can think of as the "element" for the component. For example, to style all dropdown menu items, you can use this CSS:'),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"[data-reach-menu-item] {\n  color: blue;\n}\n")),Object(a.b)("h3",{id:"pseudo-selectors"},'"Pseudo" Selectors'),Object(a.b)("p",null,'There are certain states an element can go into like "selected". To target these styles use a "pseudo" selector (more like a pseudo-pseudo selector!). For example, to style all dropdown menu items in their highlighted, or selected state, use this CSS:'),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"[data-reach-menu-item][data-selected] {\n  background: red;\n}\n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-styling-mdx-282ef0b6090900a02189.js.map