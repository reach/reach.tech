(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{"./src/markdown/pages/server-config.md":function(n,s,a){"use strict";a.r(s),a.d(s,"title",function(){return p});var e=a("./node_modules/react/index.js"),t=a.n(e);const p="Server Configuration";s.default=function(){return t.a.createElement("div",{className:"markdown",dangerouslySetInnerHTML:{__html:'<h1>Server Configuration</h1>\n<p>If your app works fine until you hit “reload” or manually type in a URL and then get a 404 error, then your server is not configured correctly.</p>\n<p>Whether you are server-rendering or not, all apps using Reach Router need to be configured to deliver the same JavaScript code at every URL.</p>\n<p>For non-server rendered apps, we recommend develping with <a href="https://github.com/facebook/create-react-app">create react app</a>, and for your production file server <a href="https://github.com/zeit/serve#readme">we recommend <code>serve</code></a>.</p>\n<p>If you can’t use either of these tools, you will need to learn how to configure your server to serve your <code>index.html</code> file at every url.</p>\n<p>Here’s an example in express:</p>\n<pre><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// requests for static files in the "public" directory</span>\n<span class="token comment">// like JavaScript, CSS, images will be served</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">"public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Every other request will send the index.html file that</span>\n<span class="token comment">// contains your application</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  resp<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span><span class="token string">"/public/index.html"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">"8000"</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Paul Sherman has written an in-depth article about this, if you’re still unclear we recommend you give it a read: <a href="https://blog.pshrmn.com/single-page-applications-and-the-server/">Single-Page Applications and the Server</a></p>\n'}})}}}]);