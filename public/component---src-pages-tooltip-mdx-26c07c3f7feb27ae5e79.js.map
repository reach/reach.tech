{"version":3,"sources":["webpack://reach-ui-website/./src/pages/tooltip.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","title","description","parentName","isMDXComponent"],"mappings":"+QASaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAI5E,QAAC,IAAD,CAAKC,MAAM,UAAUC,YAAY,0CAA0CF,QAAQ,SACnF,cACE,GAAM,WADR,YAGA,mBACE,cAAIG,WAAW,MAAf,YAAgC,aAAGA,WAAW,KAC1C,KAAQ,gEADoB,kEAGhC,cAAIA,WAAW,MAAf,cAAkC,aAAGA,WAAW,KAC5C,KAAQ,yDADsB,4DAIpC,uHACA,uDACA,mBACE,cAAIA,WAAW,MAAf,gPACA,cAAIA,WAAW,MAAf,8EACA,cAAIA,WAAW,MAAf,mDAAuE,aAAGA,WAAW,KACjF,KAAQ,WAD2D,UAAvE,OAIF,kBAAG,cAAIA,WAAW,KAAf,gBAAH,qQACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,6oBA6BL,cACE,GAAM,gBADR,iBAGA,0EAA4D,sBAAYA,WAAW,KAAvB,8BAA5D,QAA0I,sBAAYA,WAAW,KAAvB,2BAA1I,2DACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,iBADZ,iEAML,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,gHAKL,cACE,GAAM,SADR,UAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,8JAWL,6XAA+W,sBAAYA,WAAW,KAAvB,cAA/W,WACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,wSAgBL,yCAA2B,sBAAYA,WAAW,KAAvB,WAA3B,6BACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,yXAoBL,cACE,GAAM,iBADR,kBAGA,cACE,GAAM,aADR,YAGA,0DACA,cACE,GAAM,yBADR,0BAGA,oCAAsB,aAAGA,WAAW,IAChC,KAAQ,YADU,iBAAtB,MAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,iCAKL,cACE,GAAM,2BADR,6BAGA,kBAAG,sBAAYA,WAAW,KAAvB,WAAH,4BAAkF,sBAAYA,WAAW,KAAvB,cAAlF,cAAsJ,sBAAYA,WAAW,KAAvB,gBAAtJ,MACA,8IAAgI,aAAGA,WAAW,IAC1I,KAAQ,UADoH,6CAGhI,cACE,GAAM,SADR,UAGA,cACE,GAAM,uCADR,wCAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,45FA6FL,cACE,GAAM,aADR,cAGA,sFAAwE,aAAGA,WAAW,IAClF,KAAQ,0BAD4D,gBAAxE,MAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,yhCA6CTN,EAAWO,gBAAiB","file":"component---src-pages-tooltip-mdx-26c07c3f7feb27ae5e79.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/reach/reach-ui/website/src/components/mdx-layout.js\";\nimport SEO from \"../components/SEO\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <SEO title=\"Tooltip\" description=\"Accessible tooltips component for React\" mdxType=\"SEO\" />\n    <h1 {...{\n      \"id\": \"tooltip\"\n    }}>{`Tooltip`}</h1>\n    <ul>\n      <li parentName=\"ul\">{`Source: `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/reach/reach-ui/tree/main/packages/tooltip\"\n        }}>{`https://github.com/reach/reach-ui/tree/main/packages/tooltip`}</a></li>\n      <li parentName=\"ul\">{`WAI-ARIA: `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.w3.org/TR/wai-aria-practices-1.2/#tooltip\"\n        }}>{`https://www.w3.org/TR/wai-aria-practices-1.2/#tooltip`}</a></li>\n    </ul>\n    <p>{`When the user's mouse or focus rests on an element, a non-interactive popup is displayed near it.`}</p>\n    <p>{`A couple notes on using tooltips:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Do not use tooltips for information vital to task completion. The elements they are attached to should usually make sense on their own, but a tooltip can help provide a little bit more information--especially for new users of your app.`}</li>\n      <li parentName=\"ul\">{`Keep the content minimal, they are not intended to hide critical content.`}</li>\n      <li parentName=\"ul\">{`If you want interactive content, you can use a `}<a parentName=\"li\" {...{\n          \"href\": \"/dialog\"\n        }}>{`Dialog`}</a>{`.`}</li>\n    </ul>\n    <p><em parentName=\"p\">{`Touch Events`}</em>{`: Touch events are currently not supported. There's not a lot of research or examples of these types of tooltips on mobile. We have some ideas but need to validate them first before implementing. Please adjust your interfaces on mobile to account for this.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <div>\n      <Tooltip label=\"Notifications\">\n        <button style={{ fontSize: 25 }}>\n          <span>üîî</span>\n        </button>\n      </Tooltip>\n      <Tooltip label=\"Settings\">\n        <button style={{ fontSize: 25 }}>\n          <span aria-hidden>‚öôÔ∏è</span>\n        </button>\n      </Tooltip>\n\n      <div style={{ float: \"right\" }}>\n        <Tooltip label=\"Notifications\" aria-label=\"3 Notifications\">\n          <button style={{ fontSize: 25 }}>\n            <span>üîî</span>\n            <span>3</span>\n          </button>\n        </Tooltip>\n      </div>\n    </div>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p>{`From the command line in your project directory, run `}<inlineCode parentName=\"p\">{`npm install @reach/tooltip`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`yarn add @reach/tooltip`}</inlineCode>{`. Then import the components and styles that you need:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @reach/tooltip\n# or\nyarn add @reach/tooltip\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import Tooltip, { useTooltip, TooltipPopup } from \"@reach/tooltip\";\nimport \"@reach/tooltip/styles.css\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Tooltip label=\"Save\">\n      <button style={{ fontSize: 25 }}>üíæ</button>\n    </Tooltip>\n  );\n}\n`}</code></pre>\n    <p>{`Sometimes the button contains information that is relevant to the user, like a badge showing the count for notifications. In these cases we want the screen reader user to know both the content in the tooltip, but also the content in the badge. For screen reader users, the only content announced to them is whatever is in the tooltip. For these cases, use the `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` prop.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Tooltip\n      // What the tooltip renders\n      label=\"Notifications\"\n      // What the screen reader announces\n      aria-label=\"3 Notifications\"\n    >\n      <button style={{ fontSize: 25 }}>üîî 3</button>\n    </Tooltip>\n  );\n}\n`}</code></pre>\n    <p>{`All props passed to `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` will go to the popover.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Tooltip\n      label=\"Fall in love all over again\"\n      style={{\n        background: \"hsla(0, 0%, 0%, 0.75)\",\n        color: \"white\",\n        border: \"none\",\n        borderRadius: \"4px\",\n        padding: \"0.5em 1em\",\n      }}\n    >\n      <button style={{ fontSize: 25 }}>‚ù§Ô∏è</button>\n    </Tooltip>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"component-api\"\n    }}>{`Component API`}</h2>\n    <h3 {...{\n      \"id\": \"tooltip-1\"\n    }}>{`Tooltip`}</h3>\n    <p>{`Renders ‚Ä¶ you guessed it: a tooltip!`}</p>\n    <h4 {...{\n      \"id\": \"tooltip-css-selectors\"\n    }}>{`Tooltip CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-tooltip] {\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"usetooltip-tooltippopup\"\n    }}>{`useTooltip, TooltipPopup`}</h3>\n    <p><inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` is built on top of the `}<inlineCode parentName=\"p\">{`useTooltip`}</inlineCode>{` hook and `}<inlineCode parentName=\"p\">{`TooltipPopup`}</inlineCode>{`.`}</p>\n    <p>{`You may want to drop down to this lower level API if you need animation or you want to add the triangles to the tooltip. `}<a parentName=\"p\" {...{\n        \"href\": \"#demos\"\n      }}>{`Check out the demos below for examples.`}</a></p>\n    <h2 {...{\n      \"id\": \"demos\"\n    }}>{`Demos`}</h2>\n    <h3 {...{\n      \"id\": \"triangle-pointers-and-custom-styles\"\n    }}>{`Triangle pointers and custom styles`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\n(() => {\n  // Center the tooltip, but collisions will win\n  const centered = (triggerRect, tooltipRect) => {\n    const triggerCenter = triggerRect.left + triggerRect.width / 2;\n    const left = triggerCenter - tooltipRect.width / 2;\n    const maxLeft = window.innerWidth - tooltipRect.width - 2;\n    return {\n      left: Math.min(Math.max(2, left), maxLeft) + window.scrollX,\n      top: triggerRect.bottom + 8 + window.scrollY,\n    };\n  };\n\n  function TriangleTooltip({ children, label, \"aria-label\": ariaLabel }) {\n    // get the props from useTooltip\n    const [trigger, tooltip] = useTooltip();\n\n    // destructure off what we need to position the triangle\n    const { isVisible, triggerRect } = tooltip;\n\n    return (\n      <React.Fragment>\n        {React.cloneElement(children, trigger)}\n\n        {isVisible && (\n          // The Triangle. We position it relative to the trigger, not the popup\n          // so that collisions don't have a triangle pointing off to nowhere.\n          // Using a Portal may seem a little extreme, but we can keep the\n          // positioning logic simpler here instead of needing to consider\n          // the popup's position relative to the trigger and collisions\n          <Portal>\n            <div\n              style={{\n                position: \"absolute\",\n                left:\n                  triggerRect && triggerRect.left - 10 + triggerRect.width / 2,\n                top: triggerRect && triggerRect.bottom + window.scrollY,\n                width: 0,\n                height: 0,\n                borderLeft: \"10px solid transparent\",\n                borderRight: \"10px solid transparent\",\n                borderBottom: \"10px solid black\",\n              }}\n            />\n          </Portal>\n        )}\n        <TooltipPopup\n          {...tooltip}\n          label={label}\n          aria-label={ariaLabel}\n          style={{\n            background: \"black\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"3px\",\n            padding: \"0.5em 1em\",\n          }}\n          position={centered}\n        />\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <div>\n      <TriangleTooltip label=\"Notifications Really Long to Trigger Collision\">\n        <button style={{ fontSize: 25 }}>\n          <span aria-hidden>üîî</span>\n        </button>\n      </TriangleTooltip>\n      <TriangleTooltip label=\"Settings\">\n        <button style={{ fontSize: 25 }}>\n          <span aria-hidden>‚öôÔ∏è</span>\n        </button>\n      </TriangleTooltip>\n\n      <div style={{ float: \"right\" }}>\n        <TriangleTooltip\n          label=\"Notifications Really Long to Trigger Collision\"\n          aria-label=\"3 Notifications\"\n        >\n          <button style={{ fontSize: 25 }}>\n            <span>üîî</span>\n            <span>3</span>\n          </button>\n        </TriangleTooltip>\n      </div>\n    </div>\n  );\n})();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"animation\"\n    }}>{`Animation`}</h3>\n    <p>{`Here's some code you can copy/paste to make it happen along with `}<a parentName=\"p\" {...{\n        \"href\": \"http://react-spring.io\"\n      }}>{`React Spring`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import * as React from \"react\";\nimport { useTooltip, TooltipPopup } from \"@reach/tooltip\";\nimport { useTransition, animated } from \"@react-spring/web\";\n\nanimated.TooltipPopup = animated(TooltipPopup);\nanimated.TooltipContent = animated(TooltipPopup);\n\nfunction AnimatedTooltip({ children, ...rest }) {\n  const [trigger, tooltip, isVisible] = useTooltip();\n\n  const transitions = useTransition(isVisible, {\n    from: { opacity: 0 },\n    enter: { opacity: 1 },\n    leave: { opacity: 0 },\n    config: { mass: 1, tension: 500, friction: 40 },\n  });\n\n  return (\n    <React.Fragment>\n      {React.cloneElement(children, trigger)}\n      {transitions(\n        (styles, item) =>\n          item && (\n            <animated.TooltipContent {...tooltip} {...rest} style={styles} />\n          )\n      )}\n    </React.Fragment>\n  );\n}\n\n// Now you can replace \\`Tooltip\\` with \\`AnimatedTooltip\\`\nfunction App() {\n  return (\n    <AnimatedTooltip label=\"Compose Message\">\n      <button>üìù</button>\n    </AnimatedTooltip>\n  );\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}