{"version":3,"sources":["webpack://reach-ui-website/./src/components/PropTable.js","webpack://reach-ui-website/./src/componentDefs.js","webpack://reach-ui-website/./src/pages/listbox.mdx","webpack://reach-ui-website/./src/components/TOC.js"],"names":["PropTable","componentName","propDefs","tableProps","componentSlug","toLowerCase","propDefsSorted","sort","a","b","aName","name","toUpperCase","bName","Table","map","prop","propAnchor","key","href","Array","isArray","type","pt","i","src","length","isRequired","toString","defaultValue","listboxDefs","Listbox","ListboxInput","ListboxButton","ListboxArrow","ListboxList","ListboxPopover","ListboxOption","ListboxGroup","ListboxGroupLabel","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","SEO","title","description","TOC","parentName","isMDXComponent","children","label","className","TOCList","style","display","padding","listStyle","TOCLink","margin"],"mappings":"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","file":"component---src-pages-listbox-mdx-3f65e7922fbd2bf59f7f.js","sourcesContent":["import * as React from \"react\";\nimport { Table } from \"./Table\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\n\n/*\ntype PropDef = {\n  name: string;\n  type: string | string[];\n  isRequired: boolean;\n  defaultValue?: string;\n}\n*/\n\nexport function PropTable({ componentName, propDefs = [], ...tableProps }) {\n  const componentSlug = componentName.toLowerCase();\n  const propDefsSorted = propDefs.sort((a, b) => {\n    let aName = a.name.toUpperCase();\n    let bName = b.name.toUpperCase();\n    return aName < bName ? -1 : aName > bName ? 1 : 0;\n  });\n  return (\n    <Table {...tableProps} aria-label={`Component props for ${componentName}`}>\n      <thead>\n        <tr>\n          <th>Prop</th>\n          <th>Type</th>\n          <th>Required</th>\n          <th>Default</th>\n        </tr>\n      </thead>\n      <tbody>\n        {propDefsSorted.map((prop) => {\n          const propAnchor = `#${componentSlug}-${prop.name.toLowerCase()}`;\n          return (\n            <tr key={prop.name}>\n              <td>\n                <a href={propAnchor}>\n                  <code>{prop.name}</code>\n                </a>\n              </td>\n              <td>\n                {(Array.isArray(prop.type) ? prop.type : [prop.type]).map(\n                  (pt, i, src) => (\n                    <React.Fragment key={pt}>\n                      <code key={pt}>{pt}</code>\n                      {i !== src.length - 1 ? \"|\" : null}\n                    </React.Fragment>\n                  )\n                )}\n              </td>\n              <td>{prop.isRequired.toString()}</td>\n              <td>\n                {prop.defaultValue != null ? (\n                  <code>{prop.defaultValue}</code>\n                ) : (\n                  <VisuallyHidden>No default value</VisuallyHidden>\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n}\n","/*\ntype PropDef = {\n  name: string;\n  type: string | string[];\n  isRequired: boolean;\n  defaultValue?: string;\n}\n*/\n\n// NOTE: We should eventually be able to generate this from TS doc blocks I want\n// to make sure we have a good idea of what data we need before I spend too much\n// time on it.\n\nexport const listboxDefs = {\n  Listbox: {\n    name: \"Listbox\",\n    propDefs: [\n      {\n        name: \"arrow\",\n        type: [\"boolean\", \"node\"],\n        isRequired: false,\n        defaultValue: `\"▼\"`,\n      },\n      {\n        name: \"button\",\n        type: [\"node\", \"func\"],\n        isRequired: false,\n      },\n      {\n        name: \"children\",\n        type: [\"node\", \"func\"],\n        isRequired: true,\n      },\n      {\n        name: \"defaultValue\",\n        type: [\"string\"],\n        isRequired: false,\n      },\n      {\n        name: \"disabled\",\n        type: [\"boolean\"],\n        isRequired: false,\n        defaultValue: `false`,\n      },\n      {\n        name: \"form\",\n        type: [\"string\"],\n        isRequired: false,\n      },\n      {\n        name: \"name\",\n        type: [\"string\"],\n        isRequired: false,\n      },\n      {\n        name: \"onChange\",\n        type: [\"func\"],\n        isRequired: false,\n      },\n      {\n        name: \"portal\",\n        type: [\"boolean\"],\n        isRequired: false,\n        defaultValue: `true`,\n      },\n      {\n        name: \"required\",\n        type: [\"boolean\"],\n        isRequired: false,\n        defaultValue: `false`,\n      },\n      {\n        name: \"value\",\n        type: [\"string\"],\n        isRequired: false,\n      },\n    ],\n  },\n  ListboxInput: {\n    name: \"ListboxInput\",\n    propDefs: [\n      {\n        name: \"children\",\n        type: [\"node\", \"func\"],\n        isRequired: true,\n      },\n      {\n        name: \"defaultValue\",\n        type: [\"string\"],\n        isRequired: false,\n      },\n      {\n        name: \"disabled\",\n        type: [\"boolean\"],\n        isRequired: false,\n        defaultValue: `false`,\n      },\n      {\n        name: \"required\",\n        type: [\"boolean\"],\n        isRequired: false,\n        defaultValue: `false`,\n      },\n      {\n        name: \"form\",\n        type: [\"string\"],\n        isRequired: false,\n      },\n      {\n        name: \"name\",\n        type: [\"string\"],\n        isRequired: false,\n      },\n      {\n        name: \"value\",\n        type: [\"string\"],\n        isRequired: false,\n      },\n      {\n        name: \"onChange\",\n        type: [\"func\"],\n        isRequired: false,\n      },\n    ],\n  },\n  ListboxButton: {\n    name: \"ListboxButton\",\n    propDefs: [\n      {\n        name: \"arrow\",\n        type: [\"node\", \"boolean\"],\n        isRequired: false,\n        defaultValue: `false`,\n      },\n      {\n        name: \"children\",\n        type: [\"node\", \"func\"],\n        isRequired: true,\n      },\n    ],\n  },\n  ListboxArrow: {\n    name: \"ListboxArrow\",\n    propDefs: [\n      {\n        name: \"children\",\n        type: [\"node\", \"func\"],\n        isRequired: true,\n      },\n    ],\n  },\n  ListboxList: {\n    name: \"ListboxList\",\n    propDefs: [],\n  },\n  ListboxPopover: {\n    name: \"ListboxPopover\",\n    propDefs: [\n      {\n        name: \"children\",\n        type: [\"node\"],\n        isRequired: true,\n      },\n      {\n        name: \"portal\",\n        type: [\"boolean\"],\n        isRequired: false,\n        defaultValue: `true`,\n      },\n      {\n        name: \"position\",\n        type: [\"func\"],\n        isRequired: false,\n      },\n    ],\n  },\n  ListboxOption: {\n    name: \"ListboxOption\",\n    propDefs: [\n      {\n        name: \"disabled\",\n        type: [\"boolean\"],\n        isRequired: false,\n        defaultValue: `false`,\n      },\n      {\n        name: \"label\",\n        type: [\"string\"],\n        isRequired: false,\n      },\n      {\n        name: \"value\",\n        type: [\"string\"],\n        isRequired: true,\n      },\n    ],\n  },\n  ListboxGroup: {\n    name: \"ListboxGroup\",\n    propDefs: [\n      {\n        name: \"label\",\n        type: [\"string\"],\n        isRequired: false,\n      },\n    ],\n  },\n  ListboxGroupLabel: {\n    name: \"ListboxGroupLabel\",\n    propDefs: [],\n  },\n};\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/reach/reach-ui/website/src/components/mdx-layout.js\";\nimport SEO from \"../components/SEO\";\nimport { TOC, TOCList, TOCLink } from \"../components/TOC\";\nimport { PropTable } from \"../components/PropTable\";\nimport { listboxDefs } from \"../componentDefs\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <SEO title=\"Listbox\" description=\"Accessible listbox dropdown component for React\" mdxType=\"SEO\" />\n    <h1 {...{\n      \"id\": \"listbox\"\n    }}>{`Listbox`}</h1>\n    <TOC mdxType=\"TOC\">\n  <TOCList mdxType=\"TOCList\">\n    <TOCLink href=\"#listbox-1\" mdxType=\"TOCLink\">Listbox</TOCLink>\n    <TOCLink href=\"#listboxinput\" mdxType=\"TOCLink\">ListboxInput</TOCLink>\n    <TOCLink href=\"#listboxbutton\" mdxType=\"TOCLink\">ListboxButton</TOCLink>\n    <TOCLink href=\"#listboxarrow\" mdxType=\"TOCLink\">ListboxArrow</TOCLink>\n    <TOCLink href=\"#listboxpopover\" mdxType=\"TOCLink\">ListboxPopover</TOCLink>\n    <TOCLink href=\"#listboxlist\" mdxType=\"TOCLink\">ListboxList</TOCLink>\n    <TOCLink href=\"#listboxoption\" mdxType=\"TOCLink\">ListboxOption</TOCLink>\n    <TOCLink href=\"#listboxgroup\" mdxType=\"TOCLink\">ListboxGroup</TOCLink>\n    <TOCLink href=\"#listboxgrouplabel\" mdxType=\"TOCLink\">ListboxGroupLabel</TOCLink>\n    <TOCLink href=\"#uselistboxcontext\" mdxType=\"TOCLink\">useListboxContext</TOCLink>\n  </TOCList>\n    </TOC>\n    <ul>\n      <li parentName=\"ul\">{`Source: `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/reach/reach-ui/tree/main/packages/listbox\"\n        }}>{`https://github.com/reach/reach-ui/tree/main/packages/listbox`}</a></li>\n      <li parentName=\"ul\">{`WAI-ARIA: `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\"\n        }}>{`https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox`}</a></li>\n    </ul>\n    <p>{`A listbox presents a list of selectable options in a popover, which is toggled on or off by a button. Visually and behaviorally it is similar to `}<a parentName=\"p\" {...{\n        \"href\": \"https://reach.tech/menu-button\"\n      }}><inlineCode parentName=\"a\">{`@reach/menu-button`}</inlineCode></a>{` except that `}<inlineCode parentName=\"p\">{`ListboxOption`}</inlineCode>{` components hold a value. In this sense they are more directly comparable to HTML select elements.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\n(() => {\n  function BasicExample() {\n    let labelId = \\`taco-label--\\${useId()}\\`;\n    return (\n      <div>\n        <VisuallyHidden id={labelId}>Choose a taco</VisuallyHidden>\n        <Listbox aria-labelledby={labelId}>\n          <ListboxOption value=\"default\">Choose a taco</ListboxOption>\n          <ListboxOption value=\"asada\">Carne Asada</ListboxOption>\n          <ListboxOption value=\"pollo\" label=\"Pollo\" disabled>\n            Pollo <Tag>Sold Out!</Tag>\n          </ListboxOption>\n          <div style={{ background: \"#ccc\" }}>\n            <ListboxOption value=\"pastor\" label=\"Pastor\">\n              Pastor <Tag>Fan favorite!</Tag>\n            </ListboxOption>\n          </div>\n          <ListboxOption value=\"lengua\">Lengua</ListboxOption>\n        </Listbox>\n      </div>\n    );\n  }\n\n  function Tag(props) {\n    return (\n      <span\n        style={{\n          display: \"inline-block\",\n          lineHeight: 1,\n          fontSize: 11,\n          textTransform: \"uppercase\",\n          fontWeight: \"bolder\",\n          marginLeft: 6,\n          padding: 4,\n          background: \"crimson\",\n          borderRadius: 2,\n          color: \"#fff\",\n        }}\n        {...props}\n      />\n    );\n  }\n\n  return <BasicExample />;\n})();\n`}</code></pre>\n    <p>{`You can use `}<inlineCode parentName=\"p\">{`Listbox`}</inlineCode>{` as a simple standalone component, or compose its parts with `}<inlineCode parentName=\"p\">{`ListboxInput`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\n(() => {\n  function ComposedExample() {\n    let labelId = \\`taco-label--\\${useId()}\\`;\n    let [value, setValue] = React.useState(\"pollo\");\n    return (\n      <div>\n        <VisuallyHidden id={labelId}>Choose a taco</VisuallyHidden>\n        <ListboxInput\n          aria-labelledby={labelId}\n          value={value}\n          onChange={(value) => setValue(value)}\n        >\n          <ListboxButton arrow=\"▼\" />\n          <ListboxPopover>\n            <ListboxList>\n              <ListboxOption value=\"default\">Choose a taco</ListboxOption>\n              <ListboxOption value=\"asada\">Carne Asada</ListboxOption>\n              <ListboxOption value=\"pollo\">Pollo</ListboxOption>\n              <ListboxOption value=\"pastor\">Pastor</ListboxOption>\n              <ListboxOption value=\"lengua\">Lengua</ListboxOption>\n            </ListboxList>\n            <div\n              style={{\n                padding: \"10px 10px 0\",\n                marginTop: 10,\n                borderTop: \"1px solid gray\",\n              }}\n            >\n              <p>I really like tacos. I hope you enjoy them as well!</p>\n            </div>\n          </ListboxPopover>\n        </ListboxInput>\n      </div>\n    );\n  }\n\n  return <ComposedExample />;\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p>{`From the command line in your project directory, run `}<inlineCode parentName=\"p\">{`npm install @reach/listbox`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`yarn add @reach/listbox`}</inlineCode>{`. Then import the components and styles that you need:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @reach/listbox\n# or\nyarn add @reach/listbox\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  Listbox,\n  ListboxInput,\n  ListboxButton,\n  ListboxPopover,\n  ListboxList,\n  ListboxOption,\n} from \"@reach/listbox\";\nimport \"@reach/listbox/styles.css\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// Basic listbox\nfunction Example() {\n  return (\n    <Listbox defaultValue=\"popeyes\">\n      <ListboxOption value=\"bojangles\">Bojangles'</ListboxOption>\n      <ListboxOption value=\"churchs\">Church's</ListboxOption>\n      <ListboxOption value=\"kfc\">KFC</ListboxOption>\n      <ListboxOption value=\"popeyes\">Popeyes</ListboxOption>\n    </Listbox>\n  );\n}\n\n// Composed listbox components\nfunction ExampleComposed() {\n  return (\n    <ListboxInput defaultValue=\"popeyes\">\n      <ListboxButton />\n      <ListboxPopover>\n        <ListboxList>\n          <ListboxOption value=\"bojangles\">Bojangles'</ListboxOption>\n          <ListboxOption value=\"churchs\">Church's</ListboxOption>\n          <ListboxOption value=\"kfc\">KFC</ListboxOption>\n          <ListboxOption value=\"popeyes\">Popeyes</ListboxOption>\n        </ListboxList>\n      </ListboxPopover>\n    </ListboxInput>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"component-api\"\n    }}>{`Component API`}</h2>\n    <h3 {...{\n      \"id\": \"listbox-1\"\n    }}>{`Listbox`}</h3>\n    <p>{`The wrapper component for the high-level listbox API.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<div>\n  <span id=\"my-label\">Choose a topic</span>\n  <Listbox aria-labelledby=\"my-label\" defaultValue=\"comedy\">\n    <ListboxOption value=\"drama\">Drama</ListboxOption>\n    <ListboxOption value=\"comedy\">Comedy</ListboxOption>\n    <ListboxOption value=\"suspense\">Suspense</ListboxOption>\n    <ListboxOption value=\"horror\">Horror</ListboxOption>\n  </Listbox>\n</div>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"controlled-listbox\"\n    }}>{`Controlled Listbox`}</h4>\n    <p>{`If you want to control the state of the listbox's value, you can do so by passing `}<a parentName=\"p\" {...{\n        \"href\": \"#listboxinput-value\"\n      }}><inlineCode parentName=\"a\">{`value`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#listboxinput-onchange\"\n      }}><inlineCode parentName=\"a\">{`onChange`}</inlineCode></a>{` props. The value corresponds with the value of the selected `}<inlineCode parentName=\"p\">{`ListboxOption`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const [value, setValue] = React.useState(\"comedy\");\nreturn (\n  <div>\n    <span id=\"my-label\">Choose a movie genre</span>\n    <Listbox aria-labelledby=\"my-label\" value={value} onChange={setValue}>\n      <ListboxOption value=\"drama\">Drama</ListboxOption>\n      <ListboxOption value=\"comedy\">Comedy</ListboxOption>\n      <ListboxOption value=\"suspense\">Suspense</ListboxOption>\n      <ListboxOption value=\"horror\">Horror</ListboxOption>\n    </Listbox>\n  </div>\n);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"listbox-props\"\n    }}>{`Listbox Props`}</h4>\n    <PropTable componentName=\"Listbox\" propDefs={listboxDefs.Listbox.propDefs} mdxType=\"PropTable\" />\n    <h5 {...{\n      \"id\": \"listbox-arrow\"\n    }}>{`Listbox arrow`}</h5>\n    <p><inlineCode parentName=\"p\">{`arrow?: boolean | React.ReactNode`}</inlineCode></p>\n    <p>{`Renders a text string or React node to represent an arrow inside the `}<inlineCode parentName=\"p\">{`ListboxButton`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Listbox arrow /> // renders a default arrow character\n<Listbox arrow={<span>▼</span>} /> // renders a component as an arrow character\n`}</code></pre>\n    <p>{`If you want to customize the appearance and placement of the arrow inside the button further, you can drop down to the composed API and `}<a parentName=\"p\" {...{\n        \"href\": \"#listboxbutton-children\"\n      }}>{`render the button's children`}</a>{`.`}</p>\n    <h5 {...{\n      \"id\": \"listbox-button\"\n    }}>{`Listbox button`}</h5>\n    <p><inlineCode parentName=\"p\">{`button?: React.ReactNode | ((props: { value: string | null; label: string | null; }) => React.ReactNode)`}</inlineCode></p>\n    <p>{`A render function or React node to to render the Listbox button's inner content. `}<a parentName=\"p\" {...{\n        \"href\": \"#listboxbutton-children\"\n      }}>{`See the API for the ListboxButton children prop for details.`}</a></p>\n    <h5 {...{\n      \"id\": \"listbox-children\"\n    }}>{`Listbox children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode`}</inlineCode></p>\n    <p><inlineCode parentName=\"p\">{`Listbox`}</inlineCode>{` should accept `}<inlineCode parentName=\"p\">{`ListboxOption`}</inlineCode>{` components as children.`}</p>\n    <p>{`You can also pass arbitrary elements as needed, but be careful when passing elements that have semantic value into listbox directly (such as `}<inlineCode parentName=\"p\">{`button`}</inlineCode>{`). If you need such elements in the popover, chances are they either need to be nested inside an option or elsewhere outside of the list of options. In the latter case, use `}<inlineCode parentName=\"p\">{`ListboxInput`}</inlineCode>{` and the composed API.`}</p>\n    <h5 {...{\n      \"id\": \"listbox-defaultvalue\"\n    }}>{`Listbox defaultValue`}</h5>\n    <p><inlineCode parentName=\"p\">{`defaultValue?: string`}</inlineCode></p>\n    <p>{`The default value of an uncontrolled listbox.`}</p>\n    <h5 {...{\n      \"id\": \"listbox-disabled\"\n    }}>{`Listbox disabled`}</h5>\n    <p><inlineCode parentName=\"p\">{`disabled?: boolean`}</inlineCode></p>\n    <p>{`Whether or not the listbox is disabled.`}</p>\n    <h5 {...{\n      \"id\": \"listbox-form\"\n    }}>{`Listbox form`}</h5>\n    <p><inlineCode parentName=\"p\">{`form?: string`}</inlineCode></p>\n    <p>{`The ID of a form associated with the listbox and its hidden input field. If Listbox is passed directly inside of its associated form this prop can be omitted so long as the `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` prop is used.`}</p>\n    <h5 {...{\n      \"id\": \"listbox-name\"\n    }}>{`Listbox name`}</h5>\n    <p><inlineCode parentName=\"p\">{`name?: string`}</inlineCode></p>\n    <p>{`The name used for the listbo input's form value.`}</p>\n    <h5 {...{\n      \"id\": \"listbox-onchange\"\n    }}>{`Listbox onChange`}</h5>\n    <p><inlineCode parentName=\"p\">{`onChange?(newValue: string): void;`}</inlineCode></p>\n    <p>{`The callback that fires when the listbox value changes.`}</p>\n    <h5 {...{\n      \"id\": \"listbox-portal\"\n    }}>{`Listbox portal`}</h5>\n    <p><inlineCode parentName=\"p\">{`portal?: boolean`}</inlineCode></p>\n    <p>{`Whether or not the popover should be rendered inside a portal. Defaults to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n    <h5 {...{\n      \"id\": \"listbox-required\"\n    }}>{`Listbox required`}</h5>\n    <p><inlineCode parentName=\"p\">{`required?: boolean;`}</inlineCode></p>\n    <p>{`Whether or not the listbox input's form field is required.`}</p>\n    <h5 {...{\n      \"id\": \"listbox-value\"\n    }}>{`Listbox value`}</h5>\n    <p><inlineCode parentName=\"p\">{`value?: string`}</inlineCode></p>\n    <p>{`The current value of a controlled listbox.`}</p>\n    <h3 {...{\n      \"id\": \"listboxinput\"\n    }}>{`ListboxInput`}</h3>\n    <p>{`The top-level component and context provider for the listbox.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<div>\n  <span id=\"my-label\">Choose a topic</span>\n  <ListboxInput aria-labelledby=\"my-label\" defaultValue=\"comedy\">\n    <ListboxButton />\n    <ListboxPopover>\n      <ListboxList>\n        <ListboxOption value=\"drama\">Drama</ListboxOption>\n        <ListboxOption value=\"comedy\">Comedy</ListboxOption>\n        <ListboxOption value=\"suspense\">Suspense</ListboxOption>\n        <ListboxOption value=\"horror\">Horror</ListboxOption>\n      </ListboxList>\n    </ListboxPopover>\n  </ListboxInput>\n</div>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"listboxinput-css-selectors\"\n    }}>{`ListboxInput CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-listbox-input] {\n}\n[data-reach-listbox-input][data-state=\"idle\"] {\n}\n[data-reach-listbox-input][data-value=\"VALUE_REF\"] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"listboxinput-props\"\n    }}>{`ListboxInput Props`}</h4>\n    <PropTable componentName=\"ListboxInput\" propDefs={listboxDefs.ListboxInput.propDefs} mdxType=\"PropTable\" />\n    <h5 {...{\n      \"id\": \"listboxinput-children\"\n    }}>{`ListboxInput children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode | ((props: { value: string | null; valueLabel: string | null; isExpanded: boolean; }) => React.ReactNode)`}</inlineCode></p>\n    <p>{`The composed listbox expects to receive `}<inlineCode parentName=\"p\">{`ListboxButton`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ListboxPopover`}</inlineCode>{` as children. You can also pass in arbitrary wrapper elements if desired.`}</p>\n    <p>{`If you want access to the listbox's current value and associated label, or its expanded state, you can use a render function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<ListboxInput>\n  {({ value, valueLabel, isExpanded }) => (\n    <ListboxButton>\n      <span data-value={value}>{valueLabel}</span>\n    </ListboxButton>\n    <ListboxPopover>\n      <ListboxList>\n        <ListboxOption value=\"apple\">Apple 🍏</ListboxOption>\n        <ListboxOption value=\"orange\">Orange 🍊</ListboxOption>\n        <ListboxOption value=\"banana\">Banana 🍌</ListboxOption>\n      </ListboxList>\n    </ListboxPopover>\n  )}\n</ListboxInput>\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"listboxinput-defaultvalue\"\n    }}>{`ListboxInput defaultValue`}</h5>\n    <p><inlineCode parentName=\"p\">{`defaultValue?: string`}</inlineCode></p>\n    <p>{`The default value of an uncontrolled listbox.`}</p>\n    <h5 {...{\n      \"id\": \"listboxinput-disabled\"\n    }}>{`ListboxInput disabled`}</h5>\n    <p><inlineCode parentName=\"p\">{`disabled?: boolean`}</inlineCode></p>\n    <p>{`Whether or not the listbox is disabled.`}</p>\n    <h5 {...{\n      \"id\": \"listboxinput-form\"\n    }}>{`ListboxInput form`}</h5>\n    <p><inlineCode parentName=\"p\">{`form?: string`}</inlineCode></p>\n    <p>{`The ID of a form associated with the listbox and its hidden input field. If Listbox is passed directly inside of its associated form this prop can be omitted so long as the `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` prop is used.`}</p>\n    <h5 {...{\n      \"id\": \"listboxinput-name\"\n    }}>{`ListboxInput name`}</h5>\n    <p><inlineCode parentName=\"p\">{`name?: string`}</inlineCode></p>\n    <p>{`The name used for the listbo input's form value.`}</p>\n    <h5 {...{\n      \"id\": \"listboxinput-onchange\"\n    }}>{`ListboxInput onChange`}</h5>\n    <p><inlineCode parentName=\"p\">{`onChange?(newValue: string): void;`}</inlineCode></p>\n    <p>{`The callback that fires when the listbox value changes.`}</p>\n    <h5 {...{\n      \"id\": \"listboxinput-required\"\n    }}>{`ListboxInput required`}</h5>\n    <p><inlineCode parentName=\"p\">{`required?: boolean;`}</inlineCode></p>\n    <p>{`Whether or not the listbox input's form field is required.`}</p>\n    <h5 {...{\n      \"id\": \"listboxinput-value\"\n    }}>{`ListboxInput value`}</h5>\n    <p><inlineCode parentName=\"p\">{`value?: string`}</inlineCode></p>\n    <p>{`The current value of a controlled listbox.`}</p>\n    <h3 {...{\n      \"id\": \"listboxbutton\"\n    }}>{`ListboxButton`}</h3>\n    <p>{`The interactive toggle button that triggers the popover for the listbox.`}</p>\n    <h4 {...{\n      \"id\": \"listboxbutton-css-selectors\"\n    }}>{`ListboxButton CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-listbox-button] {\n}\n[data-reach-listbox-button][aria-expanded=\"true\"] {\n}\n[data-reach-listbox-button][aria-disabled=\"true\"] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"listboxbutton-props\"\n    }}>{`ListboxButton Props`}</h4>\n    <PropTable componentName=\"ListboxButton\" propDefs={listboxDefs.ListboxButton.propDefs} mdxType=\"PropTable\" />\n    <h5 {...{\n      \"id\": \"listboxbutton-arrow\"\n    }}>{`ListboxButton arrow`}</h5>\n    <p><inlineCode parentName=\"p\">{`arrow?: boolean | React.ReactNode`}</inlineCode></p>\n    <p>{`Renders a text string or React node to represent an arrow inside the button\\`.`}</p>\n    <h5 {...{\n      \"id\": \"listboxbutton-children\"\n    }}>{`ListboxButton children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode | ((props: { value: string | null; label: string; isExpanded: boolean; }) => React.ReactNode)`}</inlineCode></p>\n    <p>{`A render function or React node to to render the button's inner content.`}</p>\n    <p>{`By default, the button will display the text label of the selected option as its inner content. This label can be pulled from the option's inner text content or explicitly provided to the ListboxOption component via the label prop. If you want to render the button differently from its default, you must pass children.`}</p>\n    <h5 {...{\n      \"id\": \"rendering-listboxbutton-on-the-server\"\n    }}>{`Rendering ListboxButton on the server`}</h5>\n    <p>{`It's important to note that the ListboxButton's default inner content cannot be server-side rendered. On the initial render, the button has no contextual information about the available options in a Listbox. As each ListboxOption is rendered, it is registered in a context object and updated at the top of the Listbox tree, which evaluates the options and their props to determine which option is selectable and which label to display inside the button. If you need the inner content of the button on the first render you must control the listbox's state and keep its options' values and labels in data at the top of the tree, and render the button directly via children.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`let options = { one: \"One option\", two: \"Another option\" };\nlet [value, setValue] = React.useState(options.one);\nreturn (\n  <ListboxInput>\n    <ListboxButton>{options[value]}</ListboxButton>\n    <ListboxPopover>\n      <ListboxList>\n        {Object.keys(options).map((option) => (\n          <ListboxOption key={option} value={option} label={options[option]}>\n            {options[option]}\n          </ListboxOption>\n        ))}\n      </ListboxList>\n    </ListboxPopover>\n  </ListboxInput>\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"listboxarrow\"\n    }}>{`ListboxArrow`}</h3>\n    <p>{`A wrapper component for an arrow to display in the `}<inlineCode parentName=\"p\">{`ListboxButton`}</inlineCode>{`.`}</p>\n    <p>{`You can use your own wrapper component if you prefer, but if its inner content contains anything that can be read by assistive devices you should use `}<inlineCode parentName=\"p\">{`aria-hidden`}</inlineCode>{` on the wrapper element, as the arrow should have no semantic value.`}</p>\n    <h4 {...{\n      \"id\": \"listboxarrow-css-selectors\"\n    }}>{`ListboxArrow CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-listbox-arrow] {\n}\n[data-reach-listbox-arrow][data-expanded] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"listboxarrow-props\"\n    }}>{`ListboxArrow Props`}</h4>\n    <PropTable componentName=\"ListboxArrow\" propDefs={listboxDefs.ListboxArrow.propDefs} mdxType=\"PropTable\" />\n    <h5 {...{\n      \"id\": \"listboxarrow-children\"\n    }}>{`ListboxArrow children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode | ((props: { isExpanded: boolean }) => React.ReactNode)`}</inlineCode></p>\n    <p>{`Children to render as the listbox button's arrow. This can be a render function that accepts the listbox's `}<inlineCode parentName=\"p\">{`isExpanded`}</inlineCode>{` state as an argument.`}</p>\n    <h3 {...{\n      \"id\": \"listboxpopover\"\n    }}>{`ListboxPopover`}</h3>\n    <p>{`The popover containing the list of options.`}</p>\n    <h4 {...{\n      \"id\": \"listboxpopover-css-selectors\"\n    }}>{`ListboxPopover CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-listbox-popover] {\n}\n[data-reach-listbox-popover][hidden] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"listboxpopover-props\"\n    }}>{`ListboxPopover Props`}</h4>\n    <PropTable componentName=\"ListboxPopover\" propDefs={listboxDefs.ListboxPopover.propDefs} mdxType=\"PropTable\" />\n    <h5 {...{\n      \"id\": \"listboxpopover-children\"\n    }}>{`ListboxPopover children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode`}</inlineCode></p>\n    <p><inlineCode parentName=\"p\">{`ListboxPopover`}</inlineCode>{` expects to receive `}<inlineCode parentName=\"p\">{`ListboxList`}</inlineCode>{` as its children.`}</p>\n    <h5 {...{\n      \"id\": \"listboxpopover-portal\"\n    }}>{`ListboxPopover portal`}</h5>\n    <p><inlineCode parentName=\"p\">{`portal?: boolean`}</inlineCode></p>\n    <p>{`Whether or not the popover should be rendered inside a portal. Defaults to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n    <h5 {...{\n      \"id\": \"listboxpopover-position\"\n    }}>{`ListboxPopover position`}</h5>\n    <p><inlineCode parentName=\"p\">{`position?(targetRect?: DOMRect | null; popoverRect?: DOMRect | null): React.CSSProperties`}</inlineCode></p>\n    <p>{`The positioning function for the popover.`}</p>\n    <h3 {...{\n      \"id\": \"listboxlist\"\n    }}>{`ListboxList`}</h3>\n    <p>{`The list containing all listbox options.`}</p>\n    <h4 {...{\n      \"id\": \"listboxlist-css-selectors\"\n    }}>{`ListboxList CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-listbox-list] {\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"listboxoption\"\n    }}>{`ListboxOption`}</h3>\n    <p>{`A selectable option for the listbox.`}</p>\n    <h4 {...{\n      \"id\": \"listboxoption-css-selectors\"\n    }}>{`ListboxOption CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-listbox-option] {\n  /* styles for all listbox options */\n}\n[data-reach-listbox-option][data-current-selected] {\n  /* styles for the option matching the current value of the input */\n}\n[data-reach-listbox-option][data-current-nav] {\n  /* styles for the option matching the user's navigation selection */\n}\n[data-reach-listbox-option][aria-disabled=\"true\"] {\n  /* styles for disabled listbox options */\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"listboxoption-props\"\n    }}>{`ListboxOption Props`}</h4>\n    <PropTable componentName=\"ListboxOption\" propDefs={listboxDefs.ListboxOption.propDefs} mdxType=\"PropTable\" />\n    <h5 {...{\n      \"id\": \"listboxoption-disabled\"\n    }}>{`ListboxOption disabled`}</h5>\n    <p><inlineCode parentName=\"p\">{`disabled?: boolean`}</inlineCode></p>\n    <p>{`Whether or not the option is disabled from selection and navigation.`}</p>\n    <h5 {...{\n      \"id\": \"listboxoption-label\"\n    }}>{`ListboxOption label`}</h5>\n    <p><inlineCode parentName=\"p\">{`label?: string`}</inlineCode></p>\n    <p>{`The option's human-readable label. This prop is optional but highly encouraged if your option has multiple text nodes that may or may not correlate with the intended value, or if the inner text is really long (all text will be read by a screen reader by default, which can create a confusing experience).`}</p>\n    <p>{`It is also useful if the inner text node begins with a character other than a readable letter (like an emoji or symbol) so that typeahead works as expected for the user.`}</p>\n    <h5 {...{\n      \"id\": \"listboxoption-value\"\n    }}>{`ListboxOption value`}</h5>\n    <p><inlineCode parentName=\"p\">{`value: string`}</inlineCode></p>\n    <p>{`The option's value. This will be passed into a hidden input field for use in forms when the option is selected.`}</p>\n    <h3 {...{\n      \"id\": \"listboxgroup\"\n    }}>{`ListboxGroup`}</h3>\n    <p>{`A group of related listbox options.`}</p>\n    <h4 {...{\n      \"id\": \"listboxgroup-css-selectors\"\n    }}>{`ListboxGroup CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-listbox-group] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"listboxgroup-props\"\n    }}>{`ListboxGroup Props`}</h4>\n    <PropTable componentName=\"ListboxGroup\" propDefs={listboxDefs.ListboxGroup.propDefs} mdxType=\"PropTable\" />\n    <h5 {...{\n      \"id\": \"listboxgroup-label\"\n    }}>{`ListboxGroup label`}</h5>\n    <p><inlineCode parentName=\"p\">{`label?: string`}</inlineCode></p>\n    <p>{`The text label to use for the listbox group. This can be omitted if a group contains a `}<inlineCode parentName=\"p\">{`ListboxGroupLabel`}</inlineCode>{` component. The label should always be human-readable.`}</p>\n    <h3 {...{\n      \"id\": \"listboxgrouplabel\"\n    }}>{`ListboxGroupLabel`}</h3>\n    <p>{`A label identifier for a `}<inlineCode parentName=\"p\">{`ListboxGroup`}</inlineCode>{`. This can be used in lieu of the `}<inlineCode parentName=\"p\">{`label`}</inlineCode>{` prop in `}<inlineCode parentName=\"p\">{`ListboxGroup`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<ListboxGroup>\n  <ListboxGroupLabel>Veggies</ListboxGroupLabel>\n  <ListboxOption value=\"broccoli\">Broccoli 🥦</ListboxOption>\n  <ListboxOption value=\"carrot\">Carrot 🥕</ListboxOption>\n  <ListboxOption value=\"tomato\">Tomato 🍅</ListboxOption>\n</ListboxGroup>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"listboxgrouplabel-css-selectors\"\n    }}>{`ListboxGroupLabel CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-listbox-group-label] {\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"uselistboxcontext\"\n    }}>{`useListboxContext`}</h3>\n    <p><inlineCode parentName=\"p\">{`function useListboxContext(): { id: string | undefined; isExpanded: boolean; value: string | null; valueLabel: string | null }`}</inlineCode></p>\n    <p>{`A hook that exposes data for a given `}<inlineCode parentName=\"p\">{`ListboxContext`}</inlineCode>{` component to its descendants.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from \"react\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\n\nexport function TOC({ children, label = \"Table of Contents\", ...props }) {\n  return (\n    <nav className=\"toc\" {...props}>\n      <VisuallyHidden>\n        <h2>{label}</h2>\n      </VisuallyHidden>\n      {children}\n    </nav>\n  );\n}\n\nexport function TOCList({ children, style = {}, ...props }) {\n  return (\n    <ul\n      style={{\n        display: \"block\",\n        padding: 0,\n        listStyle: \"none\",\n        ...style,\n      }}\n      {...props}\n    >\n      {children}\n    </ul>\n  );\n}\n\nexport function TOCLink({ href, children, ...props }) {\n  return (\n    <li style={{ display: \"inline-block\", margin: 0, padding: 0 }}>\n      <a href={href} {...props}>\n        {children}\n      </a>\n    </li>\n  );\n}\n"],"sourceRoot":""}