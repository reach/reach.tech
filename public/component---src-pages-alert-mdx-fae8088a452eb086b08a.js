(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{rvlW:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return s})),n.d(t,"default",(function(){return c}));n("rzGZ"),n("Dq+y"),n("8npG"),n("Ggvi"),n("E5k/"),n("q1tI");var a=n("7ljp"),r=n("LmON"),l=n("EYWl");var s={},b={_frontmatter:s},i=r.a;function c(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(i,Object.assign({},b,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)(l.a,{title:"Alert",description:"Accessible component to create alert messages for React",mdxType:"SEO"}),Object(a.b)("h1",{id:"alert"},"Alert"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Source: ",Object(a.b)("a",Object.assign({parentName:"li"},{href:"https://github.com/reach/reach-ui/tree/main/packages/alert"}),"https://github.com/reach/reach-ui/tree/main/packages/alert")),Object(a.b)("li",{parentName:"ul"},"WAI-ARIA: ",Object(a.b)("a",Object.assign({parentName:"li"},{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#alert"}),"https://www.w3.org/TR/wai-aria-practices-1.2/#alert"))),Object(a.b)("p",null,'Screen-reader-friendly alert messages. In many apps developers add "alert" messages when network events or other things happen. Users with assistive technologies may not know about the message unless you develop for it.'),Object(a.b)("p",null,"The Alert component will announce to assistive technologies whatever you render to the screen. If you don't have a screen reader on you won't notice a difference between rendering ",Object(a.b)("inlineCode",{parentName:"p"},"<Alert>")," vs. a ",Object(a.b)("inlineCode",{parentName:"p"},"<div>"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"// jsx-demo\nfunction Example(props) {\n  const [messages, setMessages] = React.useState([]);\n  return (\n    <div>\n      <button\n        onClick={() => {\n          setMessages((prevMessages) =>\n            prevMessages.concat([`Message #${prevMessages.length + 1}`])\n          );\n          setTimeout(() => {\n            setMessages((prevMessages) => prevMessages.slice(1));\n          }, 5000);\n        }}\n      >\n        Add a message\n      </button>\n      <div>\n        {messages.map((message, index) => (\n          <Alert key={index}>{message}</Alert>\n        ))}\n      </div>\n    </div>\n  );\n}\n")),Object(a.b)("h2",{id:"installation"},"Installation"),Object(a.b)("p",null,"From the command line in your project directory, run ",Object(a.b)("inlineCode",{parentName:"p"},"npm install @reach/alert")," or ",Object(a.b)("inlineCode",{parentName:"p"},"yarn add @reach/alert"),". Then import the component:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"npm install @reach/alert\n# or\nyarn add @reach/alert\n")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'import Alert from "@reach/alert";\n')),Object(a.b)("h2",{id:"component-api"},"Component API"),Object(a.b)("h3",{id:"alert-1"},"Alert"),Object(a.b)("h4",{id:"alert-props"},"Alert Props"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Prop"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Required"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#alert-div-props"}),Object(a.b)("inlineCode",{parentName:"a"},"div")," props")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#alert-type"}),Object(a.b)("inlineCode",{parentName:"a"},"type"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"enum")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#alert-children"}),Object(a.b)("inlineCode",{parentName:"a"},"children"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"node")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"true`")))),Object(a.b)("h5",{id:"alert-div-props"},"Alert div props"),Object(a.b)("p",null,"Any props not listed above will be spread onto the underlying ",Object(a.b)("inlineCode",{parentName:"p"},"div")," element."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// jsx-demo\nfunction Example() {\n  return (\n    <Alert\n      style={{\n        background: "hsla(10, 50%, 50%, .10)",\n        padding: "10px",\n      }}\n    >\n      ❗️ Woah! Something went wrong.\n    </Alert>\n  );\n}\n')),Object(a.b)("h5",{id:"alert-type"},"Alert type"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},'type?: "assertive" | "polite"')),Object(a.b)("p",null,'Controls whether the assistive technology should read immediately ("assertive") or wait until the user is idle ("polite").'),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<Alert type="polite">\n  This is the default\n</Alert>\n\n<Alert type="assertive">\n  If a screen reader is currently reading something and\n  you render this, it will interrupt the user and read\n  this immediately.\n</Alert>\n')),Object(a.b)("p",null,"You should probably stick with polite most of the time."),Object(a.b)("h5",{id:"alert-children"},"Alert children"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"children: React.ReactNode;")),Object(a.b)("p",null,"Regular React children."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Alert>\n  <p>Whatever you want here</p>\n  <p>Is fine.</p>\n</Alert>\n")))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-alert-mdx-fae8088a452eb086b08a.js.map