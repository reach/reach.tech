(self.webpackChunkreach_ui_website=self.webpackChunkreach_ui_website||[]).push([[985],{9715:function(t,e,n){"use strict";n.r(e),n.d(e,{_frontmatter:function(){return i},default:function(){return m}});var a=n(2265),o=(n(7294),n(4983)),r=n(1255),p=n(2335),l=["components"],i={},d={_frontmatter:i},s=r.Z;function m(t){var e=t.components,n=(0,a.Z)(t,l);return(0,o.kt)(s,Object.assign({},d,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)(p.Z,{title:"Component Component",description:"A dynamic, functional version of a React.Component; a component component if you will.",mdxType:"SEO"}),(0,o.kt)("h1",{id:"component-component"},"Component Component"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"NOTE: This component was developed in the days before React Hooks.\nIn most cases, you should probably build your function components using hooks and use a class\ncomponent in the rare cases you need them. We may deprecate this component in the future.")),(0,o.kt)("p",null,"A dynamic, functional version of ",(0,o.kt)("inlineCode",{parentName:"p"},"React.Component"),", a component component if you will. Useful for inline lifecycles and state."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Component initialState={{ hue: 0 }}>\n  {({ setState, state }) => (\n    <div style={{ textAlign: "center" }}>\n      <button onClick={() => setState({ hue: Math.random() * 360 })}>\n        Generate Triad Colorscheme\n      </button>\n      <br />\n      {[1, 2, 3].map((n) => (\n        <div\n          key={n}\n          style={{\n            display: "inline-block",\n            margin: 10,\n            width: "2em",\n            height: "2em",\n            borderRadius: "50%",\n            background: `hsl(${state.hue + n * 120}, 50%, 50%)`,\n            transition: "background-color 200ms ease",\n          }}\n        />\n      ))}\n    </div>\n  )}\n</Component>\n')),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"From the command line in your project directory, run ",(0,o.kt)("inlineCode",{parentName:"p"},"npm install @reach/component-component")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn add @reach/component-component"),". Then import the component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @reach/component-component\n# or\nyarn add @reach/component-component\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import Component from "@reach/component-component";\n')),(0,o.kt)("h2",{id:"component-api"},"Component API"),(0,o.kt)("h3",{id:"props"},"Props"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Prop"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#initialstate"},(0,o.kt)("inlineCode",{parentName:"a"},"initialState"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"object"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#getinitialstate"},(0,o.kt)("inlineCode",{parentName:"a"},"getInitialState"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"func"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#refs"},(0,o.kt)("inlineCode",{parentName:"a"},"refs"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"object"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#getrefs"},(0,o.kt)("inlineCode",{parentName:"a"},"getRefs"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"func"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#didmount"},(0,o.kt)("inlineCode",{parentName:"a"},"didMount"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"func"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#didupdate"},(0,o.kt)("inlineCode",{parentName:"a"},"didUpdate"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"func"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"willunmount"},(0,o.kt)("inlineCode",{parentName:"a"},"willUnmount"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"func"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#getsnapshotbeforeupdate"},(0,o.kt)("inlineCode",{parentName:"a"},"getSnapshotBeforeUpdate"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"func"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#shouldupdate"},(0,o.kt)("inlineCode",{parentName:"a"},"shouldUpdate"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"func"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#children"},(0,o.kt)("inlineCode",{parentName:"a"},"children"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"func"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#render"},(0,o.kt)("inlineCode",{parentName:"a"},"render"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"func"))))),(0,o.kt)("h4",{id:"initialstate"},"initialState"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"initialState?: object")),(0,o.kt)("p",null,"An object of initial state."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// jsx-demo\nfunction Example() {\n  return (\n    <Component initialState={{ count: 10 }}>\n      {({ state }) => <div>Count is {state.count}</div>}\n    </Component>\n  );\n}\n")),(0,o.kt)("h4",{id:"getinitialstate"},"getInitialState"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"getInitialState?: () => object")),(0,o.kt)("p",null,"A function to return intitial state. Use this when initial state is computed."),(0,o.kt)("p",null,"In the following example, ",(0,o.kt)("inlineCode",{parentName:"p"},"Date.now()")," will ",(0,o.kt)("em",{parentName:"p"},"not")," be called every time a parent component causes this component to re-render."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"<Component getInitialState={() => ({ now: Date.now() })}>\n  {({ state }) => <div>Now is: {state.now}</div>}\n</Component>\n")),(0,o.kt)("p",null,"However, in the next example, ",(0,o.kt)("inlineCode",{parentName:"p"},"Date.now()")," would be called with every re-render, which is not what we want."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// ðŸ˜­\n<Component initialState={{ now: Date.now() }} />\n")),(0,o.kt)("h4",{id:"refs"},"refs"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"refs?: object")),(0,o.kt)("p",null,"Put any refs you need to keep track of here, stuff like DOM nodes, timers, and subcriptions."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'// jsx-demo\nfunction Example() {\n  return (\n    <Component refs={{ input: null }}>\n      {({ refs }) => (\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n            alert(refs.input.value);\n          }}\n        >\n          <input ref={(node) => (refs.input = node)} type="text" />{" "}\n          <button type="submit">Go</button>\n        </form>\n      )}\n    </Component>\n  );\n}\n')),(0,o.kt)("h4",{id:"getrefs"},"getRefs"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"getRefs?: () => object")),(0,o.kt)("p",null,"Use this when any of your refs are computed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Component\n  getRefs={() => {\n    return {\n      input: React.createRef(),\n      popupContainer: document.createElement("div"),\n    };\n  }}\n/>\n')),(0,o.kt)("h4",{id:"didmount"},"didMount"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"didMount?: (args: { state: object, props: object, refs: object, setState: Function, forceUpdate: Function }) => void")),(0,o.kt)("p",null,"Called when the component mounts."),(0,o.kt)("p",null,"Perhaps you want some async data but don't want to make an entirely new component just for the lifecycles to get it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Component\n  initialState={{ gists: null }}\n  didMount={({ setState }) => {\n    fetch("https://api.github.com/gists?per_page=5")\n      .then((res) => res.json())\n      .then((gists) => setState({ gists }));\n  }}\n>\n  {({ state }) =>\n    state.gists ? (\n      <ul>\n        {state.gists.map((gist) => (\n          <li key={gist.id}>\n            <a href={gist.html_url}>{gist.description || gist.id}</a>\n          </li>\n        ))}\n      </ul>\n    ) : (\n      <div>Loading...</div>\n    )\n  }\n</Component>\n')),(0,o.kt)("p",null,"See also ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/react-component.html#componentdidmount"},"React Docs"),"."),(0,o.kt)("h4",{id:"didupdate"},"didUpdate"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"didMount?: (args: { state: object, props: object, refs: object, setState: Function, forceUpdate: Function, prevProps?: object, prevState?: object }) => void")),(0,o.kt)("p",null,"Called when the component updates. See ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/react-component.html#componentdidupdate"},"React Docs"),"."),(0,o.kt)("h4",{id:"willunmount"},"willUnmount"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"willUnmount?: (args: { state: object, props: object, refs: object }) => void")),(0,o.kt)("p",null,"Called when the component will be removed from the page. See ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/react-component.html#componentwillunmount"},"React Docs"),"."),(0,o.kt)("h4",{id:"getsnapshotbeforeupdate"},"getSnapshotBeforeUpdate"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"getSnapshotBeforeUpdate?: (args: { state: object, props: object, refs: object, prevProps: object, prevState: object }) => any")),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/react-component.html#getsnapshotbeforeupdate"},"React Docs"),"."),(0,o.kt)("h3",{id:"shouldupdate"},"shouldUpdate"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"shouldUpdate?: (args: { state: object, props: object, nextProps: object, nextState: object }) => boolean")),(0,o.kt)("p",null,"Return ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to signify the component needs an update, ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," if it does not. Useful for wrapping up expensive parts of your app without having to refactor to new components."),(0,o.kt)("p",null,"For example: often you find just one part of your component is expensive to render, maybe because of a large SVG with a dynamic style or two. Rather than pulling the elements out of your component and putting them in a new ",(0,o.kt)("inlineCode",{parentName:"p"},"PureComponent"),", you can inline a ",(0,o.kt)("inlineCode",{parentName:"p"},"shoudlUpdate")," check:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'// jsx-demo\nfunction Example() {\n  return (\n    <Component initialState={{ hue: 0 }}>\n      {({ setState, state }) => (\n        <div>\n          <button\n            onClick={() => {\n              setState({ hue: Math.random() * 360 });\n            }}\n          >\n            Change Color\n          </button>\n\n          <Component\n            hue={state.hue}\n            shouldUpdate={({ nextProps, props }) => {\n              return nextProps.hue !== props.hue;\n            }}\n          >\n            <div>\n              <svg width="100" height="100">\n                <path\n                  d="M20,30 Q40,5 50,30 T90,30"\n                  fill="none"\n                  stroke={`hsl(${state.hue}, 50%, 50%)`}\n                  strokeWidth="5"\n                />\n              </svg>\n            </div>\n          </Component>\n        </div>\n      )}\n    </Component>\n  );\n}\n')),(0,o.kt)("p",null,"See also ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/react-component.html#shouldcomponentupdate"},"React Docs"),"."),(0,o.kt)("h4",{id:"children"},"children"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"children?: React.ReactNode | ((args: { state: object, props: object, refs: object, setState: Function, forceUpdate: Function }) => React.ReactNode)")),(0,o.kt)("p",null,"Usual React children prop or render prop callback to provide the stateful parts of your component at render time.."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// jsx-demo\nfunction Example() {\n  return (\n    <Component>\n      <div>Hey, I am the child</div>\n    </Component>\n  );\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'// jsx-demo\nfunction Example() {\n  return (\n    <Component initialState={{ hue: 0 }}>\n      {({ setState, state }) => (\n        <div>\n          <button onClick={() => setState({ hue: Math.random() * 360 })}>\n            Generate Color\n          </button>\n          <br />\n          <svg width="100" height="100">\n            <path\n              d="M20,30 Q40,5 50,30 T90,30"\n              fill="none"\n              stroke={`hsl(${state.hue}, 50%, 50%)`}\n              strokeWidth="5"\n            />\n          </svg>\n        </div>\n      )}\n    </Component>\n  );\n}\n')),(0,o.kt)("h4",{id:"render"},"render"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"render?: (args: { state: object, props: object, refs: object, setState: Function, forceUpdate: Function }) => React.ReactNode")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'// jsx-demo\nfunction Example() {\n  return (\n    <Component\n      initialState={{ hue: 0 }}\n      render={({ setState, state }) => (\n        <div>\n          <button onClick={() => setState({ hue: Math.random() * 360 })}>\n            Generate Color\n          </button>\n          <br />\n          <svg width="100" height="100">\n            <path\n              d="M20,30 Q40,5 50,30 T90,30"\n              fill="none"\n              stroke={`hsl(${state.hue}, 50%, 50%)`}\n              strokeWidth="5"\n            />\n          </svg>\n        </div>\n      )}\n    />\n  );\n}\n')),(0,o.kt)("h2",{id:"todo-app-example"},"Todo App Example"),(0,o.kt)("p",null,"Here is a pretty involved example showing just how composable this component is:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'"App state" containing all todos'),(0,o.kt)("li",{parentName:"ul"},'"Todo state" containing state for a specific todo'),(0,o.kt)("li",{parentName:"ul"},"Updates the document title to the number of todos in the list"),(0,o.kt)("li",{parentName:"ul"},"Optimized todo rendering, avoiding updates if the color has not changed"),(0,o.kt)("li",{parentName:"ul"},"Tracked refs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'// jsx-demo\nfunction Example() {\n  return (\n    <Component\n      getRefs={() => ({\n        input: React.createRef(),\n      })}\n      getInitialState={() => {\n        return {\n          todos: ["This is kinda weird"],\n        };\n      }}\n    >\n      {({ state, setState, refs }) => (\n        <>\n          <Component\n            didUpdate={() => (document.title = state.todos.length + " Todos")}\n          />\n          <div style={{ fontFamily: "sans-serif" }}>\n            <h4>Todo List</h4>\n            <form\n              onSubmit={(event) => {\n                event.preventDefault();\n                let node = refs.input.current;\n                setState({ todos: state.todos.concat([node.value]) });\n                node.value = "";\n              }}\n            >\n              <input ref={refs.input} />\n            </form>\n            <div>\n              {state.todos.map((todo, index) => (\n                <Component\n                  key={index}\n                  getInitialState={() => ({ hue: Math.random() * 360 })}\n                  todo={todo}\n                  shouldUpdate={({ nextProps, nextState, props, state }) => {\n                    return (\n                      nextProps.todo !== props.todo ||\n                      nextState.hue !== state.hue\n                    );\n                  }}\n                >\n                  {({ setState, state }) => (\n                    <div style={{ color: `hsl(${state.hue}, 50%, 50%)` }}>\n                      <button\n                        onClick={() => {\n                          setState({ hue: Math.random() * 360 });\n                        }}\n                      >\n                        Change Color\n                      </button>{" "}\n                      {todo}\n                    </div>\n                  )}\n                </Component>\n              ))}\n            </div>\n            <p>\n              <button onClick={() => setState({ todos: [] })}>Clear all</button>\n            </p>\n          </div>\n        </>\n      )}\n    </Component>\n  );\n}\n')))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-component-component-mdx-e8ce1fc9498723170723.js.map