(self.webpackChunkreach_ui_website=self.webpackChunkreach_ui_website||[]).push([[56],{2312:function(e,n,t){"use strict";t.r(n),t.d(n,{_frontmatter:function(){return p},default:function(){return h}});var o=t(2265),a=(t(7294),t(4983)),i=t(1255),r=t(2335),l=t(6182),c=t(8819),d=t(3989),s=["components"],p={},u={_frontmatter:p},m=i.Z;function h(e){var n=e.components,t=(0,o.Z)(e,s);return(0,a.kt)(m,Object.assign({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)(r.Z,{title:"Accordion",description:"Accessible accordion component for React",mdxType:"SEO"}),(0,a.kt)("h1",{id:"accordion"},"Accordion"),(0,a.kt)(l.Nt,{mdxType:"TOC"},(0,a.kt)(l.B$,{mdxType:"TOCList"},(0,a.kt)(l.G6,{href:"#accordion-1",mdxType:"TOCLink"},"Accordion"),(0,a.kt)(l.G6,{href:"#accordionitem",mdxType:"TOCLink"},"AccordionItem"),(0,a.kt)(l.G6,{href:"#accordionbutton",mdxType:"TOCLink"},"AccordionButton"),(0,a.kt)(l.G6,{href:"#accordionpanel",mdxType:"TOCLink"},"AccordionPanel"),(0,a.kt)(l.G6,{href:"#useaccordioncontext",mdxType:"TOCLink"},"useAccordionContext"),(0,a.kt)(l.G6,{href:"#useaccordionitemcontext",mdxType:"TOCLink"},"useAccordionItemContext"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Source: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/reach/reach-ui/tree/main/packages/accordion"},"https://github.com/reach/reach-ui/tree/main/packages/accordion")),(0,a.kt)("li",{parentName:"ul"},"WAI-ARIA: ",(0,a.kt)("a",{parentName:"li",href:"https://www.w3.org/TR/wai-aria-practices-1.2/#accordion"},"https://www.w3.org/TR/wai-aria-practices-1.2/#accordion"))),(0,a.kt)("p",null,"An accordion is a vertically stacked group of collapsible sections. An accordion is composed of grouped buttons and panels. When a user selects an accordion button, its corresponding panel should switch between 'open' and 'collapsed' states."),(0,a.kt)("p",null,"Accordions follow many consistent patterns but do allow for some variability in behavior. For example, some accordions only allow one panel to be open at a time, where others may allow multiple or all panels to be open simultaneously. Similarly, many accordions will allow all panels to be simultaneously collapsed, while others may require one panel to be open at all times."),(0,a.kt)("p",null,"If you are familiar with the disclosure pattern, an accordion will feel very similar. The key distinction is that a disclosure is a standalone component that consists of a single button-panel-group. Because of this, you cannot navigate between different disclosures with a keyboard the same way you can with an accordion. To provide users with a predictable behavior between components, it is important to keep disclosures and accordions visually distinct across your app."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"From the command line in your project directory, run ",(0,a.kt)("inlineCode",{parentName:"p"},"npm install @reach/accordion")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn add @reach/accordion"),". Then import the components and styles that you need:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @reach/accordion\n# or\nyarn add @reach/accordion\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import {\n  Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel,\n} from "@reach/accordion";\nimport "@reach/accordion/styles.css";\n')),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// jsx-demo\nfunction Example() {\n  return (\n    <Accordion>\n      <AccordionItem>\n        <h3>\n          <AccordionButton>Step 1: Do a thing</AccordionButton>\n        </h3>\n        <AccordionPanel>\n          Here are some detailed instructions about doing a thing. I am very\n          complex and probably contain a lot of content, so a user can hide or\n          show me by clicking the button above.\n        </AccordionPanel>\n      </AccordionItem>\n      <AccordionItem>\n        <h3>\n          <AccordionButton>Step 2: Do another thing</AccordionButton>\n        </h3>\n        <AccordionPanel>\n          Here are some detailed instructions about doing yet another thing.\n          There are a lot of things someone might want to do, so I am only going\n          to talk about doing that other thing. I'll let my fellow accordion\n          items go into detail about even more things.\n        </AccordionPanel>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n")),(0,a.kt)("h3",{id:"accordion-headings"},"Accordion Headings"),(0,a.kt)("p",null,"With most accordion components, the ",(0,a.kt)("inlineCode",{parentName:"p"},"AccordionPanel")," is treated as a semantic ",(0,a.kt)("inlineCode",{parentName:"p"},"region")," of the document, similar to an HTML ",(0,a.kt)("inlineCode",{parentName:"p"},"section")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," tag. By default, we assign ",(0,a.kt)("inlineCode",{parentName:"p"},'role="region"')," and to each ",(0,a.kt)("inlineCode",{parentName:"p"},"AccordionPanel"),", along with ",(0,a.kt)("inlineCode",{parentName:"p"},"aria-labelledby")," referencing the associated ",(0,a.kt)("inlineCode",{parentName:"p"},"AccordionButton")," component."),(0,a.kt)("p",null,"To improve the semantics of the markup further, the ARIA guidelines dictate that each accordion item's button should be wrapped in an element with ",(0,a.kt)("inlineCode",{parentName:"p"},'role="heading"'),", or more simply, and HTML heading tag. Because headings are necessarily dependent on the context of their surrounding content, we do not wrap the ",(0,a.kt)("inlineCode",{parentName:"p"},"AccordionButton")," inside of a heading tag by default. It is up to each developer to implement this detail in a way that makes sense for their application."),(0,a.kt)("p",null,"You can abstract a solution in a variety of ways. Perhaps you write an ",(0,a.kt)("inlineCode",{parentName:"p"},"AccordionHeader")," wrapper component that accepts a ",(0,a.kt)("inlineCode",{parentName:"p"},"headingLevel")," prop:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'function AccordionHeader({ headingLevel = 2, props }) {\n  let Comp = "h" + headingLevel;\n  return (\n    <Comp>\n      <AccordionButton {...props} />\n    </Comp>\n  );\n}\n')),(0,a.kt)("p",null,"You can also create a context-aware heading component so that the heading level increments appropriately as content is nested:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'// jsx-demo\n(() => {\n  const HeadingContext = createContext(2);\n\n  function MyAccordionSection(props) {\n    return (\n      <div>\n        <Heading>How to do a thing</Heading>\n        <p>\n          Below I am going to explain how you might do a thing, in two very\n          important steps.\n        </p>\n        <Accordion>\n          <ContextAwareAccordionItem>\n            <AccordionHeader>Step 1: Do a thing</AccordionHeader>\n            <AccordionPanel>\n              Here are some detailed instructions about doing a thing. I am very\n              complex and probably contain a lot of content, so a user can hide\n              or show me by clicking the button above.\n            </AccordionPanel>\n          </ContextAwareAccordionItem>\n          <AccordionItem>\n            <AccordionHeader>Step 2: Do another thing</AccordionHeader>\n            <AccordionPanel>\n              Here are some detailed instructions about doing yet another thing.\n              There are a lot of things someone might want to do, so I am only\n              going to talk about doing that other thing. I\'ll let my fellow\n              accordion items go into detail about even more things.\n            </AccordionPanel>\n          </AccordionItem>\n        </Accordion>\n      </div>\n    );\n  }\n\n  function AccordionHeader(props) {\n    return (\n      <Heading>\n        <AccordionButton {...props} />\n      </Heading>\n    );\n  }\n\n  function ContextAwareAccordionItem(props) {\n    return (\n      <Section>\n        <AccordionItem {...props} />\n      </Section>\n    );\n  }\n\n  function Heading(props) {\n    let Comp = "h" + Math.min(useContext(HeadingContext), 6);\n    return <Comp {...props} />;\n  }\n\n  function Section(props) {\n    let headingLevel = useContext(HeadingContext);\n    return (\n      <HeadingContext.Provider value={headingLevel + 1}>\n        {props.children}\n      </HeadingContext.Provider>\n    );\n  }\n\n  return <MyAccordionSection />;\n})();\n')),(0,a.kt)("h2",{id:"component-api"},"Component API"),(0,a.kt)("h3",{id:"accordion-1"},"Accordion"),(0,a.kt)("p",null,"The wrapper component for all other accordion components. Each accordion component will consist of accordion items whose buttons are keyboard navigable using arrow keys."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"<Accordion index={index} onChange={(value) => setIndex(value)}>\n  <AccordionItem>\n    <h3>\n      <AccordionButton>Step 1: Do a thing</AccordionButton>\n    </h3>\n    <AccordionPanel>...</AccordionPanel>\n  </AccordionItem>\n  <AccordionItem>\n    <h3>\n      <AccordionButton>Step 2: Do another thing</AccordionButton>\n    </h3>\n    <AccordionPanel>...</AccordionPanel>\n  </AccordionItem>\n</Accordion>\n")),(0,a.kt)("h4",{id:"accordion-css-selectors"},"Accordion CSS Selectors"),(0,a.kt)("p",null,"Please see the ",(0,a.kt)("a",{parentName:"p",href:"/styling"},"styling guide"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},"[data-reach-accordion] {\n}\n")),(0,a.kt)("h4",{id:"collapsible-and-multiple-props"},"collapsible and multiple props"),(0,a.kt)("p",null,"You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"collapsible")," prop to dictate that an accordion should allow all panels to be collapsed simultaneously. By default, one panel must be in an ",(0,a.kt)("inlineCode",{parentName:"p"},"open")," state at all times."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// jsx-demo\nfunction Example() {\n  return (\n    <Accordion collapsible>\n      <AccordionItem>\n        <h3>\n          <AccordionButton>Step 1: Do a thing</AccordionButton>\n        </h3>\n        <AccordionPanel>\n          Integer ad iaculis semper aenean nibh quisque hac eget volutpat, at\n          dui sem accumsan cras congue mi varius egestas interdum, molestie\n          blandit sociosqu sodales diam metus erat venenatis.\n        </AccordionPanel>\n      </AccordionItem>\n      <AccordionItem>\n        <h3>\n          <AccordionButton>Step 2: Do another thing</AccordionButton>\n        </h3>\n        <AccordionPanel>\n          Hendrerit faucibus litora justo aliquet inceptos gravida felis vel\n          aenean, natoque fermentum nostra tempus ornare nam diam est, neque\n          risus aliquam sapien vestibulum sociis integer eros.\n        </AccordionPanel>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"multiple")," prop dictates that any number of panels may be open at the same time. By default, when a user opens a new accordion item, the previously open item will be set to ",(0,a.kt)("inlineCode",{parentName:"p"},"collapsed"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// jsx-demo\nfunction Example() {\n  return (\n    <Accordion multiple>\n      <AccordionItem>\n        <h3>\n          <AccordionButton>Step 1: Do a thing</AccordionButton>\n        </h3>\n        <AccordionPanel>\n          Integer ad iaculis semper aenean nibh quisque hac eget volutpat, at\n          dui sem accumsan cras congue mi varius egestas interdum, molestie\n          blandit sociosqu sodales diam metus erat venenatis.\n        </AccordionPanel>\n      </AccordionItem>\n      <AccordionItem>\n        <h3>\n          <AccordionButton>Step 2: Do another thing</AccordionButton>\n        </h3>\n        <AccordionPanel>\n          Hendrerit faucibus litora justo aliquet inceptos gravida felis vel\n          aenean, natoque fermentum nostra tempus ornare nam diam est, neque\n          risus aliquam sapien vestibulum sociis integer eros.\n        </AccordionPanel>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n")),(0,a.kt)("p",null,"Using both props together dictates that any number of panels in an accordion can be ",(0,a.kt)("inlineCode",{parentName:"p"},"open")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"collapsed")," at any time without regard to the state of other accordion items. These props are only relevant for uncontrolled accordion components, as the state of controlled accordion items is determined only by the ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," prop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// jsx-demo\nfunction Example() {\n  return (\n    <Accordion collapsible multiple>\n      <AccordionItem>\n        <h3>\n          <AccordionButton>Step 1: Do a thing</AccordionButton>\n        </h3>\n        <AccordionPanel>\n          Integer ad iaculis semper aenean nibh quisque hac eget volutpat, at\n          dui sem accumsan cras congue mi varius egestas interdum, molestie\n          blandit sociosqu sodales diam metus erat venenatis.\n        </AccordionPanel>\n      </AccordionItem>\n      <AccordionItem>\n        <h3>\n          <AccordionButton>Step 2: Do another thing</AccordionButton>\n        </h3>\n        <AccordionPanel>\n          Hendrerit faucibus litora justo aliquet inceptos gravida felis vel\n          aenean, natoque fermentum nostra tempus ornare nam diam est, neque\n          risus aliquam sapien vestibulum sociis integer eros.\n        </AccordionPanel>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n")),(0,a.kt)("h4",{id:"controlled-accordion"},"Controlled Accordion"),(0,a.kt)("p",null,"If you want to control the accordion's open panels, you can do so by passing ",(0,a.kt)("a",{parentName:"p",href:"#accordion-index"},(0,a.kt)("inlineCode",{parentName:"a"},"index"))," and ",(0,a.kt)("a",{parentName:"p",href:"#accordion-onchange"},(0,a.kt)("inlineCode",{parentName:"a"},"onChange"))," props. The index corresponds with the order of each accordion item as they appear within an accordion. The index value passed sets its corresponding panel to an ",(0,a.kt)("inlineCode",{parentName:"p"},"open")," state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"const [index, setIndex] = React.useState(0);\nreturn (\n  <Accordion index={index} onChange={(value) => setIndex(value)}>\n    <AccordionItem {...items[0].props} />\n    <AccordionItem {...items[1].props} />\n    <AccordionItem {...items[2].props} />\n  </Accordion>\n);\n")),(0,a.kt)("p",null,"In a controlled accordion, multiple items can be set to ",(0,a.kt)("inlineCode",{parentName:"p"},"open")," by passing an array of indices to the ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," prop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"const [indices, setIndices] = React.useState([0, 2]);\nfunction toggleItem(toggledIndex) {\n  if (indices.includes(toggledIndex)) {\n    setIndices(indices.filter((currentIndex) => currentIndex !== toggledIndex));\n  } else {\n    setIndices([...indices, toggledIndex].sort());\n  }\n}\n\nreturn (\n  <Accordion index={indices} onChange={toggleItem}>\n    <AccordionItem {...items[0].props} />\n    <AccordionItem {...items[1].props} />\n    <AccordionItem {...items[2].props} />\n  </Accordion>\n);\n")),(0,a.kt)("h4",{id:"accordion-props"},"Accordion Props"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Prop"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#accordion-as"},(0,a.kt)("inlineCode",{parentName:"a"},"as"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string")," ",(0,a.kt)(d.E,{mdxType:"Pipe"})," ",(0,a.kt)("inlineCode",{parentName:"td"},"Component")),(0,a.kt)("td",{parentName:"tr",align:null},"false")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#accordion-children"},(0,a.kt)("inlineCode",{parentName:"a"},"children"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"node")),(0,a.kt)("td",{parentName:"tr",align:null},"true")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#accordion-collapsible"},(0,a.kt)("inlineCode",{parentName:"a"},"collapsible"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},"false")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#accordion-defaultindex"},(0,a.kt)("inlineCode",{parentName:"a"},"defaultIndex"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"number")," ",(0,a.kt)(d.E,{mdxType:"Pipe"})," ",(0,a.kt)("inlineCode",{parentName:"td"},"number[]")),(0,a.kt)("td",{parentName:"tr",align:null},"false")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#accordion-index"},(0,a.kt)("inlineCode",{parentName:"a"},"index"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"number")," ",(0,a.kt)(d.E,{mdxType:"Pipe"})," ",(0,a.kt)("inlineCode",{parentName:"td"},"number[]")),(0,a.kt)("td",{parentName:"tr",align:null},"false")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#accordion-multiple"},(0,a.kt)("inlineCode",{parentName:"a"},"multiple"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},"false")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#accordion-onchange"},(0,a.kt)("inlineCode",{parentName:"a"},"onChange"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"func")),(0,a.kt)("td",{parentName:"tr",align:null},"false")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#accordion-readonly"},(0,a.kt)("inlineCode",{parentName:"a"},"readOnly"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},"false")))),(0,a.kt)("h5",{id:"accordion-as"},"Accordion as"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"as?: keyof JSX.IntrinsicElements | React.ComponentType")),(0,a.kt)("p",null,"A string representing an HTML element or a React component that will tell the ",(0,a.kt)("inlineCode",{parentName:"p"},"Accordion")," what element to render. Defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},"div"),"."),(0,a.kt)(c.F,{mdxType:"AsPropWarning"}),(0,a.kt)("h5",{id:"accordion-children"},"Accordion children"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"children: React.ReactNode")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Accordion")," can accept ",(0,a.kt)("inlineCode",{parentName:"p"},"AccordionItem")," components as children."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"<Accordion>\n  <AccordionItem>\n    <AccordionButton />\n    <AccordionPanel />\n  </AccordionItem>\n  <AccordionItem>\n    <AccordionButton />\n    <AccordionPanel />\n  </AccordionItem>\n</Accordion>\n")),(0,a.kt)("h5",{id:"accordion-collapsible"},"Accordion collapsible"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"collapsible?: boolean")),(0,a.kt)("p",null,"Whether or not all panels of an uncontrolled accordion can be toggled to a closed state. See the ",(0,a.kt)("a",{parentName:"p",href:"#collapsible-and-multiple-props"},(0,a.kt)("inlineCode",{parentName:"a"},"collapsible")," and ",(0,a.kt)("inlineCode",{parentName:"a"},"multiple")," props")," section for details. Defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("h5",{id:"accordion-defaultindex"},"Accordion defaultIndex"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"defaultIndex?: number | number[]")),(0,a.kt)("p",null,"A default value for the open panel's index or indices in an uncontrolled accordion component when it is initially rendered."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"<Accordion defaultIndex={1}>\n  <AccordionItem>\n    <AccordionButton />\n    <AccordionPanel>I will be closed on the initial render!</AccordionPanel>\n  </AccordionItem>\n  <AccordionItem>\n    <AccordionButton />\n    <AccordionPanel>I will be open on the initial render!</AccordionPanel>\n  </AccordionItem>\n</Accordion>\n")),(0,a.kt)("p",null,"If an accordion has no defaultIndex, the initially rendered open panel depends on the ",(0,a.kt)("inlineCode",{parentName:"p"},"collapsible")," prop."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If ",(0,a.kt)("inlineCode",{parentName:"li"},"collapsible")," is set to ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),", without a ",(0,a.kt)("inlineCode",{parentName:"li"},"defaultIndex")," no panels will initially be open. Otherwise, the first panel at index ",(0,a.kt)("inlineCode",{parentName:"li"},"0")," will initially be open.")),(0,a.kt)("p",null,"You can only pass an array of indices to ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultIndex")," if you also set ",(0,a.kt)("inlineCode",{parentName:"p"},"multiple")," to true."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"<Accordion defaultIndex={[0, 1]} multiple>\n  <AccordionItem>\n    <AccordionButton />\n    <AccordionPanel>I will be open on the initial render!</AccordionPanel>\n  </AccordionItem>\n  <AccordionItem>\n    <AccordionButton />\n    <AccordionPanel>I will also be open on the initial render!</AccordionPanel>\n  </AccordionItem>\n</Accordion>\n")),(0,a.kt)("h5",{id:"accordion-index"},"Accordion index"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"index?: number | number[]")),(0,a.kt)("p",null,"The index or array of indices for open accordion panels. The ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," prop should be used along with ",(0,a.kt)("inlineCode",{parentName:"p"},"onChange")," to create controlled accordion components."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"const [indices, setIndices] = React.useState([0, 2]);\nfunction toggleItem(toggledIndex) {\n  if (indices.includes(toggledIndex)) {\n    setIndices(indices.filter((currentIndex) => currentIndex !== toggledIndex));\n  } else {\n    setIndices([...indices, toggledIndex].sort());\n  }\n}\n\nreturn (\n  <Accordion index={indices} onChange={toggleItem}>\n    <AccordionItem {...items[0].props} />\n    <AccordionItem {...items[1].props} />\n    <AccordionItem {...items[2].props} />\n  </Accordion>\n);\n")),(0,a.kt)("h5",{id:"accordion-multiple"},"Accordion multiple"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"multiple?: boolean")),(0,a.kt)("p",null,"Whether or not multiple panels in an uncontrolled accordion can be opened at the same time. See the ",(0,a.kt)("a",{parentName:"p",href:"#collapsible-and-multiple-props"},(0,a.kt)("inlineCode",{parentName:"a"},"collapsible")," and ",(0,a.kt)("inlineCode",{parentName:"a"},"multiple")," props")," section for details. Defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("h5",{id:"accordion-onchange"},"Accordion onChange"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"onChange?: (value: number) => void")),(0,a.kt)("p",null,"The callback that is fired when an accordion item's open state is changed."),(0,a.kt)("h5",{id:"accordion-readonly"},"Accordion readOnly"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"readOnly?: boolean")),(0,a.kt)("p",null,"Whether or not an uncontrolled accordion is read-only (meaning that the user cannot toggle its state with a normal interaction). Defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("p",null,"Generally speaking, you probably want to avoid this, as it can be confusing especially when navigating by keyboard. However, this may be useful if you want to lock an accordion under certain conditions (perhaps user authentication is required to access the content). In these instances, you may want to include an alert when a user tries to activate a read-only accordion panel to let them know why it does not toggle as may be expected."),(0,a.kt)("h3",{id:"accordionitem"},"AccordionItem"),(0,a.kt)("p",null,"A group that wraps an accordion's button and panel components."),(0,a.kt)("h4",{id:"accordionitem-css-selectors"},"AccordionItem CSS Selectors"),(0,a.kt)("p",null,"Please see the ",(0,a.kt)("a",{parentName:"p",href:"/styling"},"styling guide"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},'[data-reach-accordion-item] {\n  /* styles for all accordion items */\n}\n[data-reach-accordion-item][data-state="open"] {\n  /* styles for all open accordion items */\n}\n[data-reach-accordion-item][data-state="collapsed"] {\n  /* styles for all collapsed accordion items */\n}\n[data-reach-accordion-item][data-disabled] {\n  /* styles for all disabled accordion items */\n}\n[data-reach-accordion-item][data-read-only] {\n  /* styles for all read-only accordion items */\n}\n')),(0,a.kt)("h4",{id:"accordionitem-props"},"AccordionItem Props"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Prop"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#accordionitem-as"},(0,a.kt)("inlineCode",{parentName:"a"},"as"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string")," ",(0,a.kt)(d.E,{mdxType:"Pipe"})," ",(0,a.kt)("inlineCode",{parentName:"td"},"Component")),(0,a.kt)("td",{parentName:"tr",align:null},"false")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#accordionitem-children"},(0,a.kt)("inlineCode",{parentName:"a"},"children"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"node")),(0,a.kt)("td",{parentName:"tr",align:null},"true")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#accordionitem-disabled"},(0,a.kt)("inlineCode",{parentName:"a"},"disabled"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},"false")))),(0,a.kt)("h5",{id:"accordionitem-as"},"AccordionItem as"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"as?: keyof JSX.IntrinsicElements | React.ComponentType")),(0,a.kt)("p",null,"A string representing an HTML element or a React component that will tell the ",(0,a.kt)("inlineCode",{parentName:"p"},"AccordionItem")," what element to render. Defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},"div"),"."),(0,a.kt)(c.F,{mdxType:"AsPropWarning"}),(0,a.kt)("h5",{id:"accordionitem-children"},"AccordionItem children"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"children: React.ReactNode")),(0,a.kt)("p",null,"An ",(0,a.kt)("inlineCode",{parentName:"p"},"AccordionItem")," expects to receive an ",(0,a.kt)("inlineCode",{parentName:"p"},"AccordionButton")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"AccordionPanel")," components as its children, though you can also nest other components within an ",(0,a.kt)("inlineCode",{parentName:"p"},"AccordionItem")," if you want some persistant content that is relevant to the section but not collapsible when the ",(0,a.kt)("inlineCode",{parentName:"p"},"AccordionButton")," is toggled."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"<Accordion defaultIndex={[0, 1]} multiple>\n  <AccordionItem>\n    <AccordionButton>Step 1: Do this important thing</AccordionButton>\n    <AccordionPanel>Detailed instructions about step 1.</AccordionPanel>\n  </AccordionItem>\n  <AccordionItem>\n    <AccordionButton>Step 2: Do this other important thing</AccordionButton>\n    <AccordionPanel>Detailed instructions about step 1.</AccordionPanel>\n    {/* the following component will not collapse! */}\n    <SomeCalloutBox>\n      Important: you should always consult the user manual before doing step 2!\n    </SomeCalloutBox>\n  </AccordionItem>\n</Accordion>\n")),(0,a.kt)("h5",{id:"accordionitem-disabled"},"AccordionItem disabled"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"disabled?: boolean")),(0,a.kt)("p",null,"Whether or not an accordion panel is disabled from user interaction. Defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("h3",{id:"accordionbutton"},"AccordionButton"),(0,a.kt)("p",null,"The trigger button a user clicks to interact with an accordion."),(0,a.kt)("h4",{id:"accordionbutton-css-selectors"},"AccordionButton CSS Selectors"),(0,a.kt)("p",null,"Please see the ",(0,a.kt)("a",{parentName:"p",href:"/styling"},"styling guide"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},"[data-reach-accordion-button] {\n  /* styles for buttons in all accordion items */\n}\n[data-reach-accordion-button][aria-expanded] {\n  /* styles for buttons in open accordion items */\n}\n[data-reach-accordion-button][disabled] {\n  /* styles for all buttons in disabled accordion items */\n}\n")),(0,a.kt)("h4",{id:"accordionbutton-props"},"AccordionButton Props"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Prop"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#accordionbutton-as"},(0,a.kt)("inlineCode",{parentName:"a"},"as"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string")," ",(0,a.kt)(d.E,{mdxType:"Pipe"})," ",(0,a.kt)("inlineCode",{parentName:"td"},"Component")),(0,a.kt)("td",{parentName:"tr",align:null},"false")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#accordionbutton-children"},(0,a.kt)("inlineCode",{parentName:"a"},"children"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"node")),(0,a.kt)("td",{parentName:"tr",align:null},"true")))),(0,a.kt)("h5",{id:"accordionbutton-as"},"AccordionButton as"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"as?: keyof JSX.IntrinsicElements | React.ComponentType")),(0,a.kt)("p",null,"A string representing an HTML element or a React component that will tell the ",(0,a.kt)("inlineCode",{parentName:"p"},"AccordionButton")," what element to render. Defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},"button"),"."),(0,a.kt)(c.F,{mdxType:"AsPropWarning"}),(0,a.kt)("h5",{id:"accordionbutton-children"},"AccordionButton children"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"children: React.ReactNode")),(0,a.kt)("p",null,"Typically a text string that serves as a label for the accordion, though nested DOM nodes can be passed as well so long as they are valid children of interactive elements."),(0,a.kt)("p",null,"If you need to group interactive elements within an accordion's button, we recommend grouping the button inside of a wrapper element rather than including invalid HTML inside the button:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'// jsx-demo\n(() => {\n  function Example() {\n    return (\n      <Accordion>\n        <AccordionItem>\n          <GroupedAccordionHeader>Option 1</GroupedAccordionHeader>\n          <StyledAccordionPanel>\n            Ante rhoncus facilisis iaculis nostra faucibus vehicula ac\n            consectetur pretium, lacus nunc consequat id viverra facilisi ligula\n            eleifend, congue gravida malesuada proin scelerisque luctus est\n            convallis.\n          </StyledAccordionPanel>\n        </AccordionItem>\n        <AccordionItem>\n          <GroupedAccordionHeader>Option 2</GroupedAccordionHeader>\n          <StyledAccordionPanel>\n            Ante rhoncus facilisis iaculis nostra faucibus vehicula ac\n            consectetur pretium, lacus nunc consequat id viverra facilisi ligula\n            eleifend, congue gravida malesuada proin scelerisque luctus est\n            convallis.\n          </StyledAccordionPanel>\n        </AccordionItem>\n        <AccordionItem>\n          <GroupedAccordionHeader>Option 3</GroupedAccordionHeader>\n          <StyledAccordionPanel>\n            Ante rhoncus facilisis iaculis nostra faucibus vehicula ac\n            consectetur pretium, lacus nunc consequat id viverra facilisi ligula\n            eleifend, congue gravida malesuada proin scelerisque luctus est\n            convallis.\n          </StyledAccordionPanel>\n        </AccordionItem>\n      </Accordion>\n    );\n  }\n\n  function StyledAccordionPanel(props) {\n    return <AccordionPanel style={{ padding: 10 }} {...props} />;\n  }\n\n  function GroupedAccordionHeader({ children }) {\n    return (\n      <div\n        style={{\n          alignItems: "center",\n          background: "#eee",\n          border: "1px solid #888",\n          borderRadius: 3,\n          margin: "9px 0",\n          display: "flex",\n          justifyContent: "space-between",\n          padding: "4px 10px",\n        }}\n      >\n        <AccordionButton\n          style={{\n            appearance: "none",\n            background: 0,\n            border: 0,\n            boxShadow: "none",\n            color: "inherit",\n            display: "block",\n            textAlign: "inherit",\n            flexGrow: 1,\n            flexShrink: 0,\n            font: "inherit",\n            fontWeight: "bolder",\n            margin: 0,\n            padding: "10px 0",\n          }}\n        >\n          {children}\n        </AccordionButton>\n        <Menu>\n          <MenuButton style={{ margin: 0 }}>\n            <span>Actions</span>\n          </MenuButton>\n          <MenuList>\n            <MenuItem onSelect={() => console.log("Download")}>\n              Download\n            </MenuItem>\n            <MenuItem onSelect={() => console.log("Copy")}>\n              Create a Copy\n            </MenuItem>\n          </MenuList>\n        </Menu>\n      </div>\n    );\n  }\n  return <Example />;\n})();\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Further reading:")," ",(0,a.kt)("a",{parentName:"li",href:"https://adrianroselli.com/2016/12/be-wary-of-nesting-roles.html"},(0,a.kt)("em",{parentName:"a"},"Be Wary of Nesting Roles")," by Adrian Roselli"))),(0,a.kt)("h3",{id:"accordionpanel"},"AccordionPanel"),(0,a.kt)("p",null,"The collapsible panel in which inner content for an accordion item is rendered."),(0,a.kt)("h4",{id:"accordionpanel-css-selectors"},"AccordionPanel CSS Selectors"),(0,a.kt)("p",null,"Please see the ",(0,a.kt)("a",{parentName:"p",href:"/styling"},"styling guide"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},'[data-reach-accordion-panel] {\n  /* styles for all accordion panels */\n}\n[data-reach-accordion-panel][data-state="open"] {\n  /* styles for all open accordion panels */\n}\n[data-reach-accordion-panel][data-state="collapsed"] {\n  /* styles for all collapsed accordion panels */\n}\n[data-reach-accordion-panel][data-disabled] {\n  /* styles for all disabled accordion panels */\n}\n')),(0,a.kt)("h4",{id:"accordionpanel-props"},"AccordionPanel Props"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Prop"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#accordionpanel-as"},(0,a.kt)("inlineCode",{parentName:"a"},"as"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string")," ",(0,a.kt)(d.E,{mdxType:"Pipe"})," ",(0,a.kt)("inlineCode",{parentName:"td"},"Component")),(0,a.kt)("td",{parentName:"tr",align:null},"false")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#accordionpanel-children"},(0,a.kt)("inlineCode",{parentName:"a"},"children"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"node")),(0,a.kt)("td",{parentName:"tr",align:null},"true")))),(0,a.kt)("h5",{id:"accordionpanel-as"},"AccordionPanel as"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"as?: keyof JSX.IntrinsicElements | React.ComponentType")),(0,a.kt)("p",null,"A string representing an HTML element or a React component that will tell the ",(0,a.kt)("inlineCode",{parentName:"p"},"AccordionPanel")," what element to render. Defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},"div"),"."),(0,a.kt)(c.F,{mdxType:"AsPropWarning"}),(0,a.kt)("h5",{id:"accordionpanel-children"},"AccordionPanel children"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"children: React.ReactNode")),(0,a.kt)("p",null,"Inner collapsible content for the accordion item."),(0,a.kt)("h3",{id:"useaccordioncontext"},"useAccordionContext"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function useAccordionContext(): { id: string | undefined; openPanels: number[] }")),(0,a.kt)("p",null,"A hook that exposes data for a given ",(0,a.kt)("inlineCode",{parentName:"p"},"Accordion")," component to its descendants."),(0,a.kt)("h3",{id:"useaccordionitemcontext"},"useAccordionItemContext"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function useAccordionItemContext(): { index: number; isExpanded: boolean }")),(0,a.kt)("p",null,"A hook that exposes data for a given ",(0,a.kt)("inlineCode",{parentName:"p"},"AccordionItem")," component to its descendants."))}h.isMDXComponent=!0},8819:function(e,n,t){"use strict";t.d(n,{F:function(){return i}});var o=t(7294),a=t(9699);function i(){return o.createElement(a.j,null,o.createElement("p",null,o.createElement("strong",null,"NOTE:")," Many semantic elements, such as"," ",o.createElement("code",null,"button")," elements, have meaning to assistive devices and browsers that provide context for the user and, in many cases, provide or restrict interactive behaviors. Use caution when overriding our defaults and make sure that the element you choose to render provides the same experience for all users."))}},9699:function(e,n,t){"use strict";t.d(n,{j:function(){return i}});var o=t(7294),a=t(5505);function i(e){return o.createElement("div",Object.assign({},e,{className:(0,a.Z)(e.className,"Note-module--Note--2Ujzs")}))}},3989:function(e,n,t){"use strict";t.d(n,{E:function(){return a}});var o=t(7294);function a(){return o.createElement(o.Fragment,null,"|")}},6182:function(e,n,t){"use strict";t.d(n,{Nt:function(){return u},B$:function(){return m},G6:function(){return h}});var o=t(5167),a=t(2265),i=t(7294),r=t(9042),l=["children","label"],c=["children","style"],d=["href","children"];function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){(0,o.Z)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e){var n=e.children,t=e.label,o=void 0===t?"Table of Contents":t,c=(0,a.Z)(e,l);return i.createElement("nav",Object.assign({className:"toc"},c),i.createElement(r.Z,null,i.createElement("h2",null,o)),n)}function m(e){var n=e.children,t=e.style,o=void 0===t?{}:t,r=(0,a.Z)(e,c);return i.createElement("ul",Object.assign({style:p({display:"block",padding:0,listStyle:"none"},o)},r),n)}function h(e){var n=e.href,t=e.children,o=(0,a.Z)(e,d);return i.createElement("li",{style:{display:"inline-block",margin:0,padding:0}},i.createElement("a",Object.assign({href:n},o),t))}}}]);
//# sourceMappingURL=component---src-pages-accordion-mdx-722326f962f45df4c87f.js.map