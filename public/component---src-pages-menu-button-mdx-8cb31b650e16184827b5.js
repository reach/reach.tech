(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{"/6/h":function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return i})),t.d(n,"default",(function(){return o}));t("rzGZ"),t("Dq+y"),t("8npG"),t("Ggvi"),t("E5k/"),t("q1tI");var a=t("7ljp"),b=t("LmON"),r=t("EYWl"),l=t("fVd4");var i={},c={_frontmatter:i},s=b.a;function o(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,b={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(b[t]=e[t]);return b}(e,["components"]);return Object(a.b)(s,Object.assign({},c,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)(r.a,{title:"Menu Button",description:"An accessible component for the common dropdown menu button design pattern in React",mdxType:"SEO"}),Object(a.b)("h1",{id:"menu-button"},"Menu Button"),Object(a.b)(l.a,{mdxType:"TOC"},Object(a.b)(l.c,{mdxType:"TOCList"},Object(a.b)(l.b,{href:"#menu",mdxType:"TOCLink"},"Menu"),Object(a.b)(l.b,{href:"#menubutton",mdxType:"TOCLink"},"MenuButton"),Object(a.b)(l.b,{href:"#menulist",mdxType:"TOCLink"},"MenuList"),Object(a.b)(l.b,{href:"#menupopover",mdxType:"TOCLink"},"MenuPopover"),Object(a.b)(l.b,{href:"#menuitems",mdxType:"TOCLink"},"MenuItems"),Object(a.b)(l.b,{href:"#menuitem",mdxType:"TOCLink"},"MenuItem"),Object(a.b)(l.b,{href:"#menulink",mdxType:"TOCLink"},"MenuLink"),Object(a.b)(l.b,{href:"#usemenubuttoncontext",mdxType:"TOCLink"},"useMenuButtonContext"))),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Source: ",Object(a.b)("a",Object.assign({parentName:"li"},{href:"https://github.com/reach/reach-ui/tree/main/packages/menu-button"}),"https://github.com/reach/reach-ui/tree/main/packages/menu-button")),Object(a.b)("li",{parentName:"ul"},"WAI-ARIA: ",Object(a.b)("a",Object.assign({parentName:"li"},{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton"}),"https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton"))),Object(a.b)("p",null,"An accessible dropdown menu for the common dropdown menu button design pattern."),Object(a.b)("p",null,"Please note that the buttons on this page are styled by this website. They are just buttons, so they will appear the same as any other button in your app."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// jsx-demo\nfunction Example() {\n  return (\n    <Menu>\n      <MenuButton>\n        Actions <span aria-hidden>▾</span>\n      </MenuButton>\n      <MenuList>\n        <MenuItem onSelect={() => alert("Download")}>Download</MenuItem>\n        <MenuItem onSelect={() => alert("Copy")}>Create a Copy</MenuItem>\n        <MenuItem onSelect={() => alert("Mark as Draft")}>\n          Mark as Draft\n        </MenuItem>\n        <MenuItem onSelect={() => alert("Delete")}>Delete</MenuItem>\n        <MenuLink as="a" href="https://reacttraining.com/workshops/">\n          Attend a Workshop\n        </MenuLink>\n      </MenuList>\n    </Menu>\n  );\n}\n')),Object(a.b)("h2",{id:"installation"},"Installation"),Object(a.b)("p",null,"From the command line in your project directory, run ",Object(a.b)("inlineCode",{parentName:"p"},"npm install @reach/menu-button")," or ",Object(a.b)("inlineCode",{parentName:"p"},"yarn add @reach/menu-button"),". Then import the components and styles that you need:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"npm install @reach/menu-button\n# or\nyarn add @reach/menu-button\n")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'import {\n  Menu,\n  MenuList,\n  MenuButton,\n  MenuItem,\n  MenuItems,\n  MenuPopover,\n  MenuLink,\n} from "@reach/menu-button";\nimport "@reach/menu-button/styles.css";\n')),Object(a.b)("h2",{id:"component-api"},"Component API"),Object(a.b)("h3",{id:"menu"},"Menu"),Object(a.b)("p",null,"The wrapper component for the other components. No DOM element is rendered."),Object(a.b)("h4",{id:"menu-props"},"Menu Props"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Prop"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Required"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#menu-children"}),Object(a.b)("inlineCode",{parentName:"a"},"children"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"node")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")))),Object(a.b)("h5",{id:"menu-children"},"Menu children"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"children: React.ReactNode | ((props: { isExpanded: boolean }) => React.ReactNode)")),Object(a.b)("p",null,"Requires two children: a ",Object(a.b)("inlineCode",{parentName:"p"},"MenuButton")," and a ",Object(a.b)("inlineCode",{parentName:"p"},"MenuList"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// jsx-demo\nfunction Example() {\n  return (\n    <Menu>\n      <MenuButton>Actions</MenuButton>\n      <MenuList>\n        <MenuItem>Download</MenuItem>\n        <MenuLink to="view">View</MenuLink>\n      </MenuList>\n    </Menu>\n  );\n}\n')),Object(a.b)("p",null,"Alternatively, you can provide a render callback. This is helpful if you need to access the internal state of the Menu."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// jsx-demo\nfunction Example() {\n  return (\n    <Menu>\n      {({ isExpanded }) => (\n        <React.Fragment>\n          <MenuButton>\n            {isExpanded ? "Close" : "Open"} <span aria-hidden="true">▾</span>\n          </MenuButton>\n          <MenuList>\n            <MenuItem>Download</MenuItem>\n            <MenuItem>Create a Copy</MenuItem>\n          </MenuList>\n        </React.Fragment>\n      )}\n    </Menu>\n  );\n}\n')),Object(a.b)("h3",{id:"menubutton"},"MenuButton"),Object(a.b)("p",null,"Wraps a DOM ",Object(a.b)("inlineCode",{parentName:"p"},"button")," that toggles the opening and closing of the dropdown menu. Must be rendered inside of a ",Object(a.b)("inlineCode",{parentName:"p"},"<Menu>"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Menu>\n  <MenuButton>Profile</MenuButton>\n  {/* ... */}\n</Menu>\n")),Object(a.b)("h4",{id:"menubutton-css-selectors"},"MenuButton CSS Selectors"),Object(a.b)("p",null,"Please see the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/reach-ui/styling"}),"styling guide"),"."),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"<MenuButton>")," wraps a normal ",Object(a.b)("inlineCode",{parentName:"p"},"<button>")," and no styles are applied to it, so any global button styles you have will be applied."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"button {\n  /* your normal button styles will be applied */\n}\n")),Object(a.b)("p",null,"You can use the ",Object(a.b)("inlineCode",{parentName:"p"},"[data-reach-menu-button]")," selector to style only the dropdown buttons:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"[data-reach-menu-button] {\n  color: blue;\n}\n")),Object(a.b)("p",null,"If you'd like to target when the menu is open use ",Object(a.b)("inlineCode",{parentName:"p"},"aria-expanded"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),'[data-reach-menu-button][aria-expanded="true"] {\n  background: #000;\n  color: white;\n}\n')),Object(a.b)("h4",{id:"menubutton-props"},"MenuButton Props"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Prop"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Required"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#menubutton-button-props"}),Object(a.b)("inlineCode",{parentName:"a"},"button")," props")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#menubutton-children"}),Object(a.b)("inlineCode",{parentName:"a"},"children"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"node")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"onMouseDown")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"preventableEventFunc")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"onKeyDown")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"preventableEventFunc")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")))),Object(a.b)("h5",{id:"menubutton-button-props"},"MenuButton button props"),Object(a.b)("p",null,"Any props not listed above will be spread onto the underlying button element. You can treat it like any other button in your app for styling."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<Menu>\n  <MenuButton\n    className="button-primary"\n    style={{ boxShadow: "2px 2px 2px hsla(0, 0%, 0%, 0.25)" }}\n  >\n    Actions <span aria-hidden>▾</span>\n  </MenuButton>\n  <MenuList>\n    <MenuItem onSelect={() => {}}>Do nothing</MenuItem>\n  </MenuList>\n</Menu>\n')),Object(a.b)("h5",{id:"menubutton-as"},"MenuButton as"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"as?: keyof JSX.IntrinsicElements | React.ComponentType")),Object(a.b)("p",null,"A string representing an HTML element or a React component that will tell the ",Object(a.b)("inlineCode",{parentName:"p"},"MenuButton")," what underlying element to render. Defaults to ",Object(a.b)("inlineCode",{parentName:"p"},"button"),"."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"NOTE:")," Many semantic elements, such as ",Object(a.b)("inlineCode",{parentName:"p"},"button")," elements, have meaning to assistive devices and browsers that provide context for the user and, in many cases, provide or restrict interactive behaviors. Use caution when overriding our defaults and make sure that the element you choose to render provides the same experience for all users. While this prop is useful for passing custom implementations, such as styled or design-system components, using anything that renders the wrong semantic HTML element will require stubbing specific behaviors and attributes. This is highly discouraged.")),Object(a.b)("h5",{id:"menubutton-children"},"MenuButton children"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"children: React.ReactNode")),Object(a.b)("p",null,"Accepts any renderable content."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<MenuButton>\n  Actions{" "}\n  <span aria-hidden>\n    <Gear />\n  </span>\n</MenuButton>\n')),Object(a.b)("h3",{id:"menulist"},"MenuList"),Object(a.b)("p",null,"Wraps a DOM element that renders the menu items. Must be rendered inside of a ",Object(a.b)("inlineCode",{parentName:"p"},"<Menu>"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Menu>\n  {/* ... */}\n  <MenuList>\n    <MenuItem onSelect={() => {}}>Download</MenuItem>\n  </MenuList>\n</Menu>\n")),Object(a.b)("h4",{id:"menulist-css-selectors"},"MenuList CSS Selectors"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"[data-reach-menu-list] {\n  padding: 20px 10px;\n}\n")),Object(a.b)("h4",{id:"menulist-props"},"MenuList Props"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Prop"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Required"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#menuitems-div-props"}),Object(a.b)("inlineCode",{parentName:"a"},"div")," props")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#menuitems-children"}),Object(a.b)("inlineCode",{parentName:"a"},"children"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"node")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#menuitems-portal"}),Object(a.b)("inlineCode",{parentName:"a"},"portal"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"boolean")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")))),Object(a.b)("h5",{id:"menulist-div-props"},"MenuList div props"),Object(a.b)("p",null,"All props are spread to the underlying element. Here we apply a ",Object(a.b)("inlineCode",{parentName:"p"},"className")," the element."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// jsx-demo\nfunction Example() {\n  return (\n    <Menu>\n      <MenuButton>\n        Actions <span aria-hidden>▾</span>\n      </MenuButton>\n      <MenuList className="slide-down">\n        <MenuItem onSelect={() => {}}>Start Video</MenuItem>\n        <MenuItem onSelect={() => {}}>Start Screenshare</MenuItem>\n        <MenuItem onSelect={() => {}}>Send a Message</MenuItem>\n      </MenuList>\n    </Menu>\n  );\n}\n')),Object(a.b)("p",null,"The stylesheet contains these rules to create the animation."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"@keyframes slide-down {\n  0% {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.slide-down[data-reach-menu-list],\n.slide-down[data-reach-menu-items] {\n  border-radius: 5px;\n  animation: slide-down 0.2s ease;\n}\n")),Object(a.b)("h5",{id:"menulist-children"},"MenuList children"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"children: React.ReactNode")),Object(a.b)("p",null,"Can contain only ",Object(a.b)("inlineCode",{parentName:"p"},"MenuItem")," or a ",Object(a.b)("inlineCode",{parentName:"p"},"MenuLink")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<MenuList>\n  <MenuItem />\n  <MenuLink />\n</MenuList>\n")),Object(a.b)("h5",{id:"menulist-portal"},"MenuList portal"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"portal?: boolean")),Object(a.b)("p",null,"Whether or not the popover should be rendered inside a portal. Defaults to ",Object(a.b)("inlineCode",{parentName:"p"},"true"),"."),Object(a.b)("h3",{id:"menupopover"},"MenuPopover"),Object(a.b)("p",null,"A low-level wrapper for the popover that appears when a menu button is open. You can compose it with ",Object(a.b)("inlineCode",{parentName:"p"},"MenuItems")," for more control over the nested components and their rendered DOM nodes, or if you need to nest arbitrary components between the outer wrapper and your list."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<Menu>\n  {/* ... */}\n  <MenuPopover>\n    <div className="arbitrary-element">\n      <MenuItems>\n        <MenuItem onSelect={() => {}}>Download</MenuItem>\n      </MenuItems>\n    </div>\n  </MenuPopover>\n</Menu>\n')),Object(a.b)("h4",{id:"menupopover-css-selectors"},"MenuPopover CSS Selectors"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"[data-reach-menu-popover] {\n}\n")),Object(a.b)("h4",{id:"menupopover-props"},"MenuPopover Props"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Prop"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Required"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#menupopover-children"}),Object(a.b)("inlineCode",{parentName:"a"},"children"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"node")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"true")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#menupopover-portal"}),Object(a.b)("inlineCode",{parentName:"a"},"portal"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"boolean")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#menupopover-position"}),Object(a.b)("inlineCode",{parentName:"a"},"position"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"func")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")))),Object(a.b)("h5",{id:"menupopover-children-props"},"MenuPopover children props"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"children: React.ReactNode")),Object(a.b)("h5",{id:"menupopover-portal"},"MenuPopover portal"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"portal?: boolean")),Object(a.b)("p",null,"Whether or not the popover should be rendered inside a portal. Defaults to ",Object(a.b)("inlineCode",{parentName:"p"},"true"),"."),Object(a.b)("h5",{id:"menupopover-position"},"MenuPopover position"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"position?: (targetRect?: DOMRect | null, popoverRect?: DOMRect | null) => React.CSSProperties")),Object(a.b)("p",null,"A function used to determine the position of the popover in relation to the menu button. By default, the menu button will attempt to position the popover below the button aligned with its left edge. If this positioning results in collisions with any side of the window, the popover will be anchored to a different side to avoid those collisions if possible."),Object(a.b)("p",null,"The function accepts the DOMRect of the menu button element, and the DOMRect of the popover element as arguments, and returns a CSS properties object that is then applied to the popover as inline styles."),Object(a.b)("h3",{id:"menuitems"},"MenuItems"),Object(a.b)("p",null,"A low-level wrapper for menu items. Compose it with ",Object(a.b)("inlineCode",{parentName:"p"},"MenuPopover")," for more control over the nested components and their rendered DOM nodes, or if you need to nest arbitrary components between the outer wrapper and your list."),Object(a.b)("p",null,"See ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"#menupopover"}),Object(a.b)("inlineCode",{parentName:"a"},"MenuPopover"))," for details."),Object(a.b)("h4",{id:"menuitems-css-selectors"},"MenuItems CSS Selectors"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"[data-reach-menu-items] {\n}\n")),Object(a.b)("h3",{id:"menuitem"},"MenuItem"),Object(a.b)("p",null,"Handles menu selection. Must be a direct child of a ",Object(a.b)("inlineCode",{parentName:"p"},"<MenuList>"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<MenuList>\n  <MenuItem onSelect={() => alert("download!")}>Download</MenuItem>\n</MenuList>\n')),Object(a.b)("h4",{id:"menuitem-css-selectors"},"MenuItem CSS Selectors"),Object(a.b)("p",null,"Please see the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/reach-ui/styling"}),"styling guide"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"[data-reach-menu-item] {\n  padding: 20px 10px;\n}\n")),Object(a.b)("p",null,"To change the styles of a highlighted menu item, use this pseudo-pseudo selector:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"[data-reach-menu-item][data-selected] {\n  background: red;\n}\n")),Object(a.b)("p",null,"The following example has this css applied:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),".red-highlight[data-reach-menu-item][data-selected] {\n  background: red;\n}\n")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// jsx-demo\nfunction Example() {\n  return (\n    <Menu>\n      <MenuButton>\n        Actions <span aria-hidden>▾</span>\n      </MenuButton>\n      <MenuList>\n        <MenuItem className="red-highlight" onSelect={() => {}}>\n          Start Video\n        </MenuItem>\n        <MenuItem className="red-highlight" onSelect={() => {}}>\n          Start Screenshare\n        </MenuItem>\n      </MenuList>\n    </Menu>\n  );\n}\n')),Object(a.b)("h4",{id:"menuitem-props"},"MenuItem Props"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Prop"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Required"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#menuitem-element-props"}),"element props")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#menuitem-as"}),Object(a.b)("inlineCode",{parentName:"a"},"as"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"string")," ","|"," ",Object(a.b)("inlineCode",{parentName:"td"},"Component")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#menuitem-children"}),Object(a.b)("inlineCode",{parentName:"a"},"children"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"node")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#menuitem-onselect"}),Object(a.b)("inlineCode",{parentName:"a"},"onSelect"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"func")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"true")))),Object(a.b)("h5",{id:"menuitem-element-props"},"MenuItem element props"),Object(a.b)("p",null,"All props are spread to the underlying element."),Object(a.b)("p",null,"In this example the ",Object(a.b)("inlineCode",{parentName:"p"},"onFocus")," prop is passed down to the element."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"// jsx-demo\nfunction Example(props) {\n  const [focusCount, setFocusCount] = React.useState(0);\n  return (\n    <Menu>\n      <MenuButton>Actions</MenuButton>\n      <MenuList>\n        <MenuItem\n          onFocus={() => {\n            setFocusCount((prevFocusCount) => prevFocusCount + 1);\n          }}\n          onSelect={() => {}}\n        >\n          Focused {focusCount} Times\n        </MenuItem>\n        <MenuItem onSelect={() => {}}>Start Screenshare</MenuItem>\n        <MenuItem onSelect={() => {}}>Send a Message</MenuItem>\n      </MenuList>\n    </Menu>\n  );\n}\n")),Object(a.b)("h5",{id:"menuitem-as"},"MenuItem as"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"as?: keyof JSX.IntrinsicElements | React.ComponentType")),Object(a.b)("p",null,"A string representing an HTML element or a React component that will tell the ",Object(a.b)("inlineCode",{parentName:"p"},"MenuItem")," what underlying element to render. Defaults to ",Object(a.b)("inlineCode",{parentName:"p"},"div"),"."),Object(a.b)("p",null,"You can pass another element or use this prop to render a styled component."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'const StyledItem = styled.div`\n  &[data-selected] {\n    background: palevioletred;\n  }\n`;\n\nfunction Example() {\n  return (\n    <Menu>\n      <MenuButton id="example-button">\n        Actions <span aria-hidden="true">▾</span>\n      </MenuButton>\n      <MenuList>\n        <MenuItem as={StyledItem} onSelect={action("Download")}>\n          Download\n        </MenuItem>\n        <MenuItem as={StyledItem} onSelect={action("Copy")}>\n          Create a Copy\n        </MenuItem>\n        <MenuItem as={StyledItem} onSelect={action("Mark as Draft")}>\n          Mark as Draft\n        </MenuItem>\n        <MenuItem as={StyledItem} onSelect={action("Delete")}>\n          Delete\n        </MenuItem>\n      </MenuList>\n    </Menu>\n  );\n}\n')),Object(a.b)("h5",{id:"menuitem-children"},"MenuItem children"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"children: React.ReactNode")),Object(a.b)("p",null,"You can put any type of content inside of a ",Object(a.b)("inlineCode",{parentName:"p"},"<MenuItem>"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// jsx-demo\nfunction Example(props) {\n  return (\n    <Menu>\n      <MenuButton>\n        Your Cats <span aria-hidden>▾</span>\n      </MenuButton>\n      <MenuList className="kittys">\n        <MenuItem onSelect={() => {}}>\n          <img\n            src="https://placekitten.com/100/100"\n            alt="Fluffybuns the destroyer"\n          />\n          <span>Fluffybuns the Destroyer</span>\n        </MenuItem>\n        <MenuItem onSelect={() => {}}>\n          <img src="https://placekitten.com/120/120" alt="Simon the pensive" />\n          <span>Simon the pensive</span>\n        </MenuItem>\n      </MenuList>\n    </Menu>\n  );\n}\n')),Object(a.b)("h5",{id:"menuitem-onselect"},"MenuItem onSelect"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"onSelect(): void")),Object(a.b)("p",null,"Callback that fires when a ",Object(a.b)("inlineCode",{parentName:"p"},"MenuItem")," is selected."),Object(a.b)("h3",{id:"menulink"},"MenuLink"),Object(a.b)("p",null,"Handles linking to a different page in the menu. By default it renders ",Object(a.b)("inlineCode",{parentName:"p"},"<a>"),", but also accepts any other kind of Link as long as the ",Object(a.b)("inlineCode",{parentName:"p"},"Link")," uses the ",Object(a.b)("inlineCode",{parentName:"p"},"React.forwardRef")," API."),Object(a.b)("p",null,"Must be a direct child of a ",Object(a.b)("inlineCode",{parentName:"p"},"<MenuList>"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'import { Link } from "@reach/router";\n<MenuList>\n  <MenuLink as={Link} to="somewhere/else">\n    Somewhere w/ Reach Router\n  </MenuLink>\n  <MenuLink href="https://reactjs.org">Official React Site</MenuLink>\n  <MenuLink as={GatsbyLink} to="/somewhere/with/gatsby">\n    Some Gatsby Page\n  </MenuLink>\n</MenuList>;\n')),Object(a.b)("h4",{id:"menulink-css-selectors"},"MenuLink CSS Selectors"),Object(a.b)("p",null,"Please see the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/reach-ui/styling"}),"styling guide"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"[data-reach-menu-item] {\n  padding: 20px 10px;\n}\n")),Object(a.b)("p",null,"To change the styles of a highlighted menu item, use this pseudo-pseudo selector:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"[data-reach-menu-item][data-selected] {\n  background: red;\n}\n")),Object(a.b)("h4",{id:"menulink-props"},"MenuLink Props"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Prop"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Required"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#menulink-element-props"}),"element props")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#menulink-as"}),Object(a.b)("inlineCode",{parentName:"a"},"as"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"string")," ","|"," ",Object(a.b)("inlineCode",{parentName:"td"},"Component")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#menulink-children"}),Object(a.b)("inlineCode",{parentName:"a"},"children"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"node")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("a",Object.assign({parentName:"td"},{href:"#menulink-onselect"}),Object(a.b)("inlineCode",{parentName:"a"},"onSelect"))),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"func")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"false")))),Object(a.b)("h5",{id:"menulink-element-props"},"MenuLink element props"),Object(a.b)("p",null,"All props are spread to the underlying element"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// the `to` prop is spread onto the Reach Router Link\n<MenuLink as={Link} to="somewhere/else">\n  Somewhere\n</MenuLink>\n\n// the `href` prop is spread onto the underlying `a`\n<MenuLink href="https://reactjs.org">Official React Site</MenuLink>\n')),Object(a.b)("h5",{id:"menulink-as"},"MenuLink as"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"as?: keyof JSX.IntrinsicElements | React.ComponentType")),Object(a.b)("p",null,"A string representing an HTML element or a React component that will tell the ",Object(a.b)("inlineCode",{parentName:"p"},"MenuLink")," what underlying element to render. Defaults to ",Object(a.b)("inlineCode",{parentName:"p"},"a"),"."),Object(a.b)("p",null,"While ",Object(a.b)("inlineCode",{parentName:"p"},"MenuLink")," should always render an HTML anchor tag, this is useful to pass a styled component or if you are using a router and need to use its ",Object(a.b)("inlineCode",{parentName:"p"},"Link")," component."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'import { Link } from "react-router";\n<Menu>\n  <MenuButton>Products</MenuButton>\n  <MenuList>\n    <MenuLink as={Link} to="/settings">\n      Settings\n    </MenuLink>\n    <MenuLink href="https://reacttraining.com/workshops">Workshops</MenuLink>\n    <MenuLink href="https://reacttraining.com/courses">Online Courses</MenuLink>\n  </MenuList>\n</Menu>;\n')),Object(a.b)("p",null,"Additionally, if other routers' ",Object(a.b)("inlineCode",{parentName:"p"},"Link")," component uses the ",Object(a.b)("inlineCode",{parentName:"p"},"React.forwardRef")," API, you can pass them in as well. If they don’t it won't work because we will not be able to manage focus on the element the component renders."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'import { Link } from "gatsby";\n<MenuLink as={GatsbyLink} to="/somewhere" />;\n')),Object(a.b)("h5",{id:"menulink-children"},"MenuLink children"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"children: React.ReactNode")),Object(a.b)("p",null,"You can render any kind of content inside of a MenuLink."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<MenuLink>\n  <ProfileImage userId="4" />\n  <UserName>Ryan Florence</UserName>\n</MenuLink>\n')),Object(a.b)("h5",{id:"menulink-onselect"},"MenuLink onSelect"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"onSelect?(): void")),Object(a.b)("p",null,"Callback that fires when a ",Object(a.b)("inlineCode",{parentName:"p"},"MenuLink")," is selected."),Object(a.b)("h3",{id:"usemenubuttoncontext"},"useMenuButtonContext"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"function useMenuButtonContext(): { isExpanded: boolean }")),Object(a.b)("p",null,"A hook that exposes data for a given ",Object(a.b)("inlineCode",{parentName:"p"},"Menu")," component to its descendants."),Object(a.b)("h2",{id:"notes"},"Notes"),Object(a.b)("h3",{id:"unmounting-the-menu-after-an-action"},"Unmounting the Menu after an action"),Object(a.b)("p",null,"If one of your menu items causes the ",Object(a.b)("inlineCode",{parentName:"p"},"<Menu>")," itself to unmount, it is your job to move focus to the changed content. One exception to this is if you're using ",Object(a.b)("inlineCode",{parentName:"p"},"MenuLink")," and Reach Router. In this case, the router will handle focus for you."),Object(a.b)("p",null,"Note the callbacks given to ",Object(a.b)("inlineCode",{parentName:"p"},"setState")," in the following demo app where focus is managed between screens. If you don't do this you'll drop keyboard and screen reader users off at the top of the document. It'll then be hard for them to know what changed and how to find it. Moving focus helps them stay where you want them the very same way visual design does."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'function Example(props) {\n  const screen1FocusRef = React.useRef();\n  const screen2ButtonFocusRef = React.useRef();\n  React.useEffect(() => {\n    requestAnimationFrame(() => {\n      if (screen === 1) {\n        screen1FocusRef.current.focus();\n      }\n      if (screen === 2) {\n        screen2ButtonFocusRef.current.focus();\n      }\n    });\n  }, [screen]);\n\n  const [screen, setScreen] = React.useState(1);\n  if (screen === 1) {\n    return (\n      <div ref={screen1FocusRef} tabIndex="-1">\n        <h4>Screen One</h4>\n        <Menu>\n          <MenuButton>Actions</MenuButton>\n          <MenuList>\n            <MenuItem onSelect={() => setScreen(2)}>Go to screen 2</MenuItem>\n            <MenuItem onSelect={() => {}}>Do nothing</MenuItem>\n          </MenuList>\n        </Menu>\n        <Menu />\n      </div>\n    );\n  }\n  if (screen === 2) {\n    return (\n      <div>\n        <h4>Screen 2</h4>\n        <button ref={screen2ButtonFocusRef} onClick={() => setScreen(1)}>\n          Back to screen 1\n        </button>\n      </div>\n    );\n  }\n  return null;\n}\n')),Object(a.b)("h3",{id:"icons"},"Icons"),Object(a.b)("p",null,"If you add an icon to indicate to users the button is a dropdown menu, use ",Object(a.b)("inlineCode",{parentName:"p"},"aria-hidden")," on the icon. Screen readers will already announce to the user that the element is a dropdown menu; adding a label to your icon would be redundant."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<MenuButton>\n  Actions <span aria-hidden>▾</span>\n</MenuButton>\n")),Object(a.b)("p",null,"However, if you have no text and only an icon, please make sure your icon has a screen reader friendly label:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// we\'d rather it said "Actions" than\n// "downward pointing triangle"\n<MenuButton>\n  <span aria-label="Actions">▾</span>\n</MenuButton>\n\n// add screen reader only text for svgs\nimport VisuallyHidden from "@reach/visually-hidden"\n<MenuButton>\n  <VisuallyHidden>Actions</VisuallyHidden>\n  <svg aria-hidden>\n    <polygon points="0,0 20,0 10,10 " />\n  </svg>\n</MenuButton>\n\n// and your images an alt attribute\n<MenuButton>\n  <img src="gear.png" alt="gear"/>\n</MenuButton>\n\n// Or just label the button and hide everything\n<MenuButton aria-label="Actions">\n  <span aria-hidden>\n    <TripleDots/>\n  </span>\n</MenuButton>\n')),Object(a.b)("h3",{id:"events"},"Events"),Object(a.b)("p",null,"You may want to pass your own click handler to a MenuButton, MenuItem or MenuLink that, in some cases, intercepts and prevents the default behavior from ocurring. You may think to do this by passing a handler to the ",Object(a.b)("inlineCode",{parentName:"p"},"onClick")," prop:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<Menu>\n  <MenuButton>Actions</MenuButton>\n  <MenuList>\n    <MenuItem\n      onClick={(event) => {\n        if (!userLoggedIn) {\n          event.preventDefault();\n          openDialog();\n        }\n      }}\n      onSelect={() => alert("Download")}\n    >\n      Download\n    </MenuItem>\n  </MenuList>\n</Menu>\n')),Object(a.b)("p",null,"This won't work because we actually do not call the ",Object(a.b)("inlineCode",{parentName:"p"},"onClick")," handler to activate ",Object(a.b)("inlineCode",{parentName:"p"},"Menu")," or select ",Object(a.b)("inlineCode",{parentName:"p"},"MenuItem")," or ",Object(a.b)("inlineCode",{parentName:"p"},"MenuLink")," components. This is because a user may mouse down on a menu button, drag over a menu item and then select it by releasing the mouse trigger. A user may also start clicking one item, then drag to another item before ",Object(a.b)("inlineCode",{parentName:"p"},"mouseup")," to change their selectiion."),Object(a.b)("p",null,"As such, events for each component look more like this:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"MenuButton"),": Activates ",Object(a.b)("inlineCode",{parentName:"li"},"Menu")," in ",Object(a.b)("inlineCode",{parentName:"li"},"onMouseDown")," or ",Object(a.b)("inlineCode",{parentName:"li"},"onKeyDown")," (",Object(a.b)("kbd",null,"Enter")," or ",Object(a.b)("kbd",null,"Spacebar")," keys)"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"MenuItem"),": Selects itself in ",Object(a.b)("inlineCode",{parentName:"li"},"onMouseUp")," or ",Object(a.b)("inlineCode",{parentName:"li"},"onKeyDown")," (",Object(a.b)("kbd",null,"Enter")," or ",Object(a.b)("kbd",null,"Spacebar")," keys)"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"MenuLink"),": Selects itself in ",Object(a.b)("inlineCode",{parentName:"li"},"onMouseUp")," or ",Object(a.b)("inlineCode",{parentName:"li"},"onKeyDown")," (",Object(a.b)("kbd",null,"Enter")," or ",Object(a.b)("kbd",null,"Spacebar")," keys).",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"For ",Object(a.b)("inlineCode",{parentName:"li"},"MenuLink"),", the ",Object(a.b)("inlineCode",{parentName:"li"},"click")," event is fired after the selection events. So if you only need to intercept the event that triggers the anchor link, you can still use ",Object(a.b)("inlineCode",{parentName:"li"},"onClick"),", but the rest of the event handlers called in ",Object(a.b)("inlineCode",{parentName:"li"},"MenuLink")," will still be which means the ",Object(a.b)("inlineCode",{parentName:"li"},"Menu")," will close and your ",Object(a.b)("inlineCode",{parentName:"li"},"onSelect")," handler will be triggered.")))),Object(a.b)("h3",{id:"keyboard-accessibility"},"Keyboard Accessibility"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Key"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Action"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("kbd",null,"Enter")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"Open/close while focused on the ",Object(a.b)("inlineCode",{parentName:"td"},"MenuButton"),"; Selects an item when navigating.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("kbd",null,"Spacebar")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"Open/close while focused on the ",Object(a.b)("inlineCode",{parentName:"td"},"MenuButton"),"; Selects an item when navigating.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("kbd",null,"ArrowUp")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"Highlight previous item")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("kbd",null,"ArrowDown")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"Highlight next item")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("kbd",null,"Home")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"Highlight first item")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("kbd",null,"End")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"Highlight last item")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("kbd",null,"Escape")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"Close menu")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(a.b)("kbd",null,"Tab")),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"No effect")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"Type characters"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"Highlights matching item")))))}o.isMDXComponent=!0},fVd4:function(e,n,t){"use strict";t.d(n,"a",(function(){return o})),t.d(n,"c",(function(){return u})),t.d(n,"b",(function(){return p}));t("xtjI"),t("4DPX"),t("rzGZ"),t("Dq+y"),t("8npG"),t("Ggvi"),t("E5k/");var a=t("q1tI"),b=t.n(a),r=t("mh+Z");function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){if(null==e)return{};var t,a,b={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(b[t]=e[t]);return b}function o(e){var n=e.children,t=e.label,a=void 0===t?"Table of Contents":t,l=s(e,["children","label"]);return b.a.createElement("nav",Object.assign({className:"toc"},l),b.a.createElement(r.a,null,b.a.createElement("h2",null,a)),n)}function u(e){var n=e.children,t=e.style,a=void 0===t?{}:t,r=s(e,["children","style"]);return b.a.createElement("ul",Object.assign({style:i({display:"block",padding:0,listStyle:"none"},a)},r),n)}function p(e){var n=e.href,t=e.children,a=s(e,["href","children"]);return b.a.createElement("li",{style:{display:"inline-block",margin:0,padding:0}},b.a.createElement("a",Object.assign({href:n},a),t))}}}]);
//# sourceMappingURL=component---src-pages-menu-button-mdx-8cb31b650e16184827b5.js.map