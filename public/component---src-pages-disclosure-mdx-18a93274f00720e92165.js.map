{"version":3,"sources":["webpack://reach-ui-website/./src/pages/disclosure.mdx","webpack://reach-ui-website/./src/components/AsPropWarning.js","webpack://reach-ui-website/./src/components/Note.js","webpack://reach-ui-website/./src/components/Note.module.scss","webpack://reach-ui-website/./src/components/Pipe.js","webpack://reach-ui-website/./src/components/TOC.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","title","description","href","parentName","isMDXComponent","AsPropWarning","Note","className","cx","Pipe","TOC","children","label","TOCList","style","display","padding","listStyle","TOCLink","margin"],"mappings":"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","file":"component---src-pages-disclosure-mdx-18a93274f00720e92165.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/reach/reach-ui/website/src/components/mdx-layout.js\";\nimport SEO from \"../components/SEO\";\nimport { TOC, TOCList, TOCLink } from \"../components/TOC\";\nimport { AsPropWarning } from \"../components/AsPropWarning\";\nimport { Pipe } from \"../components/Pipe\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <SEO title=\"Disclosure\" description=\"Accessible disclosure component for React\" mdxType=\"SEO\" />\n    <h1 {...{\n      \"id\": \"disclosure\"\n    }}>{`Disclosure`}</h1>\n    <TOC mdxType=\"TOC\">\n  <TOCList mdxType=\"TOCList\">\n    <TOCLink href=\"#disclosure-1\" mdxType=\"TOCLink\">Disclosure</TOCLink>\n    <TOCLink href=\"#disclosurebutton\" mdxType=\"TOCLink\">DisclosureButton</TOCLink>\n    <TOCLink href=\"#disclosurepanel\" mdxType=\"TOCLink\">DisclosurePanel</TOCLink>\n    <TOCLink href=\"#usedisclosurecontext\" mdxType=\"TOCLink\">useDisclosureContext</TOCLink>\n  </TOCList>\n    </TOC>\n    <ul>\n      <li parentName=\"ul\">{`Source: `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/reach/reach-ui/tree/main/packages/disclosure\"\n        }}>{`https://github.com/reach/reach-ui/tree/main/packages/disclosure`}</a></li>\n      <li parentName=\"ul\">{`WAI-ARIA: `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure\"\n        }}>{`https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure`}</a></li>\n    </ul>\n    <p>{`A disclosure is a button that controls the visibility of a panel of content. When the content inside the panel is hidden, it is often styled as a typical push button with a right-pointing arrow or triangle to hint that activating the button will display additional content. When the content is visible, the arrow or triangle typically points down.`}</p>\n    <p>{`If you have a group of disclosures that stack vertically and exist within the same logical context, you may want to use `}<a parentName=\"p\" {...{\n        \"href\": \"/accordion\"\n      }}><inlineCode parentName=\"a\">{`@reach/accordion`}</inlineCode></a>{` instead.`}</p>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p>{`From the command line in your project directory, run `}<inlineCode parentName=\"p\">{`npm install @reach/disclosure`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`yarn add @reach/disclosure`}</inlineCode>{`. Then import the components that you need:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @reach/disclosure\n# or\nyarn add @reach/disclosure\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  Disclosure,\n  DisclosureButton,\n  DisclosurePanel,\n} from \"@reach/disclosure\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Disclosure>\n      <DisclosureButton>Find out what lies beneath</DisclosureButton>\n      <DisclosurePanel>Here I am! I am the buried treasure!</DisclosurePanel>\n    </Disclosure>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"component-api\"\n    }}>{`Component API`}</h2>\n    <h3 {...{\n      \"id\": \"disclosure-1\"\n    }}>{`Disclosure`}</h3>\n    <p>{`The wrapper component and context provider for a disclosure's button and panel components. A disclosure should never have more than one button or panel descendants.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Disclosure>\n  <DisclosureButton>Do a thing</DisclosureButton>\n  <DisclosurePanel>...</DisclosurePanel>\n</Disclosure>\n`}</code></pre>\n    <p>{`It is important to note that the `}<inlineCode parentName=\"p\">{`Disclosure`}</inlineCode>{` component doesn't actually render a DOM node, so there is no way to add styles to a disclosure wrapper directly. If you want your disclosure to have a wrapper element you can nest one directly.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Disclosure>\n  <div style={{ padding: 10 }}>\n    <DisclosureButton>Do a thing</DisclosureButton>\n    <DisclosurePanel>...</DisclosurePanel>\n  </div>\n</Disclosure>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"controlled-disclosure\"\n    }}>{`Controlled Disclosure`}</h4>\n    <p>{`If you want to control the disclosure's value, you can do so by passing `}<a parentName=\"p\" {...{\n        \"href\": \"#disclosure-open\"\n      }}><inlineCode parentName=\"a\">{`open`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#disclosure-onchange\"\n      }}><inlineCode parentName=\"a\">{`onChange`}</inlineCode></a>{` props.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const [isOpen, setOpen] = React.useState(false);\nreturn (\n  <Disclosure open={isOpen} onChange={() => setOpen(!isOpen)}>\n    <DisclosureButton />\n    <DisclosurePanel />\n  </Disclosure>\n);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"disclosure-props\"\n    }}>{`Disclosure Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#disclosure-children\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`node`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#disclosure-defaultopen\"\n            }}><inlineCode parentName=\"a\">{`defaultOpen`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#disclosure-id\"\n            }}><inlineCode parentName=\"a\">{`id`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode>{` `}<Pipe mdxType=\"Pipe\" />{` `}<inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#disclosure-onchange\"\n            }}><inlineCode parentName=\"a\">{`onChange`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#disclosure-open\"\n            }}><inlineCode parentName=\"a\">{`open`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"disclosure-children\"\n    }}>{`Disclosure children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode`}</inlineCode></p>\n    <p><inlineCode parentName=\"p\">{`Disclosure`}</inlineCode>{` expects to receive accept `}<inlineCode parentName=\"p\">{`DisclosureButton`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`DisclosurePanel`}</inlineCode>{` components as either direct children or descendants. It can also accept wrapper elements if desired, though it is not recommended to pass other arbitrary components within a disclosure in most cases.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<div>\n  {/* OK! */}\n  <Disclosure>\n    <DisclosureButton>Click Me</DisclosureButton>\n    <DisclosurePanel>Collapse or open this content!</DisclosurePanel>\n  </Disclosure>\n\n  {/* Also OK! */}\n  <Disclosure>\n    <div>\n      <DisclosureButton>Click Me</DisclosureButton>\n      <DisclosurePanel>Collapse or open this content!</DisclosurePanel>\n    </div>\n  </Disclosure>\n\n  {/* Probably confusing, you should avoid! */}\n  <Disclosure>\n    <div>Mary had a little lamb, little lamb, blah blah blah</div>\n    <DisclosureButton>Click Me</DisclosureButton>\n    <DisclosurePanel>Collapse or open this content!</DisclosurePanel>\n    <blockquote>You miss 100% of the shots you don't take</blockquote>\n  </Disclosure>\n</div>\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"disclosure-defaultopen\"\n    }}>{`Disclosure defaultOpen`}</h5>\n    <p><inlineCode parentName=\"p\">{`defaultOpen?: boolean`}</inlineCode></p>\n    <p>{`Whether or not an uncontrolled disclosure component should default to its `}<inlineCode parentName=\"p\">{`open`}</inlineCode>{` state on the initial render. Defaults to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`.`}</p>\n    <h5 {...{\n      \"id\": \"disclosure-id\"\n    }}>{`Disclosure id`}</h5>\n    <p><inlineCode parentName=\"p\">{`id?: string | number`}</inlineCode></p>\n    <p>{`An id used to assign aria and id attributes to nested `}<inlineCode parentName=\"p\">{`DisclosureButton`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`DisclosurePanel`}</inlineCode>{` components.`}</p>\n    <p>{`Since the Disclosure component itself does not render a DOM element, an `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` prop will not appear in the DOM directly as may be expected. Rather, we need to generate IDs for the panel and button based on a disclosure ID for aria compliance. If no `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` is passed we will generate descendant IDs for you.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Disclosure id=\"awesome-disclosure\">\n  <div>\n    {\" \"}\n    {/* no ID passed here! */}\n    <DisclosureButton /> {/* <button id=\"awesome-disclosure--button\" /> */}\n    <DisclosurePanel /> {/* <div id=\"awesome-disclosure--panel\" /> */}\n  </div>\n</Disclosure>\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"disclosure-onchange\"\n    }}>{`Disclosure onChange`}</h5>\n    <p><inlineCode parentName=\"p\">{`onChange?: () => void`}</inlineCode></p>\n    <p>{`The callback that is fired when a disclosure's open state is changed.`}</p>\n    <h5 {...{\n      \"id\": \"disclosure-open\"\n    }}>{`Disclosure open`}</h5>\n    <p><inlineCode parentName=\"p\">{`open?: boolean`}</inlineCode></p>\n    <p>{`The controlled open state of the disclosure. The `}<inlineCode parentName=\"p\">{`open`}</inlineCode>{` prop should be used along with `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` to create controlled disclosure components.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const [open, setOpen] = React.useState(false);\nreturn (\n  <Disclosure open={open} onChange={() => setOpen(!open)}>\n    <DisclosureButton>I have a secret</DisclosureButton>\n    <DisclosurePanel>\n      Ante rhoncus facilisis iaculis nostra faucibus vehicula ac consectetur\n      pretium, lacus nunc consequat id viverra facilisi ligula eleifend, congue\n      gravida malesuada proin scelerisque luctus est convallis.\n    </DisclosurePanel>\n  </Disclosure>\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"disclosurebutton\"\n    }}>{`DisclosureButton`}</h3>\n    <p>{`The trigger button a user clicks to interact with a disclosure.`}</p>\n    <h4 {...{\n      \"id\": \"disclosurebutton-css-selectors\"\n    }}>{`DisclosureButton CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-disclosure-button] {\n}\n[data-reach-disclosure-button][data-state=\"open\"] {\n}\n[data-reach-disclosure-button][data-state=\"collapsed\"] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"disclosurebutton-props\"\n    }}>{`DisclosureButton Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#disclosurebutton-as\"\n            }}><inlineCode parentName=\"a\">{`as`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode>{` `}<Pipe mdxType=\"Pipe\" />{` `}<inlineCode parentName=\"td\">{`Component`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#disclosurebutton-children\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`node`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"disclosurebutton-as\"\n    }}>{`DisclosureButton as`}</h5>\n    <p><inlineCode parentName=\"p\">{`as?: keyof JSX.IntrinsicElements | React.ComponentType`}</inlineCode></p>\n    <p>{`A string representing an HTML element or a React component that will tell the `}<inlineCode parentName=\"p\">{`DisclosureButton`}</inlineCode>{` what element to render. Defaults to `}<inlineCode parentName=\"p\">{`button`}</inlineCode>{`.`}</p>\n    <AsPropWarning mdxType=\"AsPropWarning\" />\n    <h5 {...{\n      \"id\": \"disclosurebutton-children\"\n    }}>{`DisclosureButton children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode`}</inlineCode></p>\n    <p>{`Typically a text string that serves as a label for the disclosure button, though nested DOM nodes can be passed as well so long as they are valid children of interactive elements.`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Further reading:`}</strong>{` `}<a parentName=\"li\" {...{\n          \"href\": \"https://adrianroselli.com/2016/12/be-wary-of-nesting-roles.html\"\n        }}><em parentName=\"a\">{`Be Wary of Nesting Roles`}</em>{` by Adrian Roselli`}</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"disclosurepanel\"\n    }}>{`DisclosurePanel`}</h3>\n    <p>{`The collapsible panel in which inner content for a disclosure item is rendered.`}</p>\n    <h4 {...{\n      \"id\": \"disclosurepanel-css-selectors\"\n    }}>{`DisclosurePanel CSS Selectors`}</h4>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/styling\"\n      }}>{`styling guide`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`[data-reach-disclosure-panel] {\n}\n[data-reach-disclosure-panel][data-state=\"open\"] {\n}\n[data-reach-disclosure-panel][data-state=\"collapsed\"] {\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"disclosurepanel-props\"\n    }}>{`DisclosurePanel Props`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#disclosurepanel-as\"\n            }}><inlineCode parentName=\"a\">{`as`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode>{` `}<Pipe mdxType=\"Pipe\" />{` `}<inlineCode parentName=\"td\">{`Component`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#disclosurepanel-children\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`node`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h5 {...{\n      \"id\": \"disclosurepanel-as\"\n    }}>{`DisclosurePanel as`}</h5>\n    <p><inlineCode parentName=\"p\">{`as?: keyof JSX.IntrinsicElements | React.ComponentType`}</inlineCode></p>\n    <p>{`A string representing an HTML element or a React component that will tell the `}<inlineCode parentName=\"p\">{`DisclosurePanel`}</inlineCode>{` what element to render. Defaults to `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{`.`}</p>\n    <AsPropWarning mdxType=\"AsPropWarning\" />\n    <h5 {...{\n      \"id\": \"disclosurepanel-children\"\n    }}>{`DisclosurePanel children`}</h5>\n    <p><inlineCode parentName=\"p\">{`children: React.ReactNode`}</inlineCode></p>\n    <p>{`Inner collapsible content for the disclosure item.`}</p>\n    <h3 {...{\n      \"id\": \"usedisclosurecontext\"\n    }}>{`useDisclosureContext`}</h3>\n    <p><inlineCode parentName=\"p\">{`function useDisclosureContext(): { id: string | undefined; panelId: string; open: boolean }`}</inlineCode></p>\n    <p>{`A hook that exposes data for a given `}<inlineCode parentName=\"p\">{`Disclosure`}</inlineCode>{` component to its descendants.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from \"react\";\nimport { Note } from \"./Note\";\n\nexport function AsPropWarning() {\n  return (\n    <Note>\n      <p>\n        <strong>NOTE:</strong> Many semantic elements, such as{\" \"}\n        <code>button</code> elements, have meaning to assistive devices and\n        browsers that provide context for the user and, in many cases, provide\n        or restrict interactive behaviors. Use caution when overriding our\n        defaults and make sure that the element you choose to render provides\n        the same experience for all users.\n      </p>\n    </Note>\n  );\n}\n","import * as React from \"react\";\nimport cx from \"clsx\";\nimport * as styles from \"./Note.module.scss\";\n\nexport function Note(props) {\n  return <div {...props} className={cx(props.className, styles.Note)} />;\n}\n","// extracted by mini-css-extract-plugin\nexport var Note = \"Note-module--Note--2Ujzs\";","import * as React from \"react\";\n\nexport function Pipe() {\n  return <>|</>;\n}\n","import * as React from \"react\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\n\nexport function TOC({ children, label = \"Table of Contents\", ...props }) {\n  return (\n    <nav className=\"toc\" {...props}>\n      <VisuallyHidden>\n        <h2>{label}</h2>\n      </VisuallyHidden>\n      {children}\n    </nav>\n  );\n}\n\nexport function TOCList({ children, style = {}, ...props }) {\n  return (\n    <ul\n      style={{\n        display: \"block\",\n        padding: 0,\n        listStyle: \"none\",\n        ...style,\n      }}\n      {...props}\n    >\n      {children}\n    </ul>\n  );\n}\n\nexport function TOCLink({ href, children, ...props }) {\n  return (\n    <li style={{ display: \"inline-block\", margin: 0, padding: 0 }}>\n      <a href={href} {...props}>\n        {children}\n      </a>\n    </li>\n  );\n}\n"],"sourceRoot":""}