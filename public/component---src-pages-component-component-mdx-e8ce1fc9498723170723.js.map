{"version":3,"sources":["webpack://reach-ui-website/./src/pages/component-component.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","title","description","parentName","isMDXComponent"],"mappings":"+QASaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAI5E,QAAC,IAAD,CAAKC,MAAM,sBAAsBC,YAAY,yFAAyFF,QAAQ,SAC9I,cACE,GAAM,uBADR,wBAGA,2BACE,aAAGG,WAAW,cAAd,kQAIF,sDAAwC,sBAAYA,WAAW,KAAvB,mBAAxC,iFACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,4qBA2BL,cACE,GAAM,gBADR,iBAGA,0EAA4D,sBAAYA,WAAW,KAAvB,0CAA5D,QAAsJ,sBAAYA,WAAW,KAAvB,uCAAtJ,iCACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,iBADZ,yFAML,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,2DAIL,cACE,GAAM,iBADR,kBAGA,cACE,GAAM,SADR,UAGA,sBACE,iBAAOA,WAAW,UAChB,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,MADX,SAGA,cAAIA,WAAW,KACb,MAAS,MADX,WAKJ,iBAAOA,WAAW,UAChB,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,aAAGA,WAAW,KACb,KAAQ,kBACP,sBAAYA,WAAW,KAAvB,mBACL,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,aAEL,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,aAAGA,WAAW,KACb,KAAQ,qBACP,sBAAYA,WAAW,KAAvB,sBACL,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,WAEL,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,aAAGA,WAAW,KACb,KAAQ,UACP,sBAAYA,WAAW,KAAvB,WACL,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,aAEL,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,aAAGA,WAAW,KACb,KAAQ,aACP,sBAAYA,WAAW,KAAvB,cACL,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,WAEL,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,aAAGA,WAAW,KACb,KAAQ,cACP,sBAAYA,WAAW,KAAvB,eACL,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,WAEL,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,aAAGA,WAAW,KACb,KAAQ,eACP,sBAAYA,WAAW,KAAvB,gBACL,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,WAEL,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,aAAGA,WAAW,KACb,KAAQ,gBACP,sBAAYA,WAAW,KAAvB,kBACL,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,WAEL,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,aAAGA,WAAW,KACb,KAAQ,6BACP,sBAAYA,WAAW,KAAvB,8BACL,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,WAEL,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,aAAGA,WAAW,KACb,KAAQ,kBACP,sBAAYA,WAAW,KAAvB,mBACL,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,WAEL,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,aAAGA,WAAW,KACb,KAAQ,cACP,sBAAYA,WAAW,KAAvB,eACL,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,WAEL,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,aAAGA,WAAW,KACb,KAAQ,YACP,sBAAYA,WAAW,KAAvB,aACL,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,aAIT,cACE,GAAM,gBADR,iBAGA,kBAAG,sBAAYA,WAAW,KAAvB,2BACH,iDACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,wLAWL,cACE,GAAM,mBADR,oBAGA,kBAAG,sBAAYA,WAAW,KAAvB,oCACH,mGACA,+CAAiC,sBAAYA,WAAW,KAAvB,cAAjC,UAAiG,cAAIA,WAAW,KAAf,OAAjG,iFACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,kIAML,mDAAqC,sBAAYA,WAAW,KAAvB,cAArC,sEACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,+DAKL,cACE,GAAM,QADR,SAGA,kBAAG,sBAAYA,WAAW,KAAvB,mBACH,kHACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,ubAqBL,cACE,GAAM,WADR,YAGA,kBAAG,sBAAYA,WAAW,KAAvB,4BACH,kEACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,6JAWL,cACE,GAAM,YADR,aAGA,kBAAG,sBAAYA,WAAW,KAAvB,0HACH,uDACA,0IACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,ghBAyBL,8BAAgB,aAAGA,WAAW,IAC1B,KAAQ,mEADI,cAAhB,MAGA,cACE,GAAM,aADR,cAGA,kBAAG,sBAAYA,WAAW,KAAvB,kKACH,4DAA8C,aAAGA,WAAW,IACxD,KAAQ,oEADkC,cAA9C,MAGA,cACE,GAAM,eADR,gBAGA,kBAAG,sBAAYA,WAAW,KAAvB,kFACH,kFAAoE,aAAGA,WAAW,IAC9E,KAAQ,sEADwD,cAApE,MAGA,cACE,GAAM,2BADR,4BAGA,kBAAG,sBAAYA,WAAW,KAAvB,mIACH,yBAAW,aAAGA,WAAW,IACrB,KAAQ,yEADD,cAAX,MAGA,cACE,GAAM,gBADR,iBAGA,kBAAG,sBAAYA,WAAW,KAAvB,8GACH,4BAAc,sBAAYA,WAAW,KAAvB,QAAd,+CAA6G,sBAAYA,WAAW,KAAvB,SAA7G,sHACA,oPAAsO,sBAAYA,WAAW,KAAvB,iBAAtO,uBAAsT,sBAAYA,WAAW,KAAvB,gBAAtT,YACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,k5BAuCL,8BAAgB,aAAGA,WAAW,IAC1B,KAAQ,uEADI,cAAhB,MAGA,cACE,GAAM,YADR,aAGA,kBAAG,sBAAYA,WAAW,KAAvB,yJACH,wIACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,uIAWL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,ilBA0BL,cACE,GAAM,UADR,WAGA,kBAAG,sBAAYA,WAAW,KAAvB,mIACH,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,olBA2BL,cACE,GAAM,oBADR,qBAGA,sGACA,mBACE,cAAIA,WAAW,MAAf,qCACA,cAAIA,WAAW,MAAf,sDACA,cAAIA,WAAW,MAAf,kEACA,cAAIA,WAAW,MAAf,4EACA,cAAIA,WAAW,MAAf,kBAEF,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,0jEA0ETN,EAAWO,gBAAiB","file":"component---src-pages-component-component-mdx-e8ce1fc9498723170723.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/reach/reach-ui/website/src/components/mdx-layout.js\";\nimport SEO from \"../components/SEO\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <SEO title=\"Component Component\" description=\"A dynamic, functional version of a React.Component; a component component if you will.\" mdxType=\"SEO\" />\n    <h1 {...{\n      \"id\": \"component-component\"\n    }}>{`Component Component`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: This component was developed in the days before React Hooks.\nIn most cases, you should probably build your function components using hooks and use a class\ncomponent in the rare cases you need them. We may deprecate this component in the future.`}</p>\n    </blockquote>\n    <p>{`A dynamic, functional version of `}<inlineCode parentName=\"p\">{`React.Component`}</inlineCode>{`, a component component if you will. Useful for inline lifecycles and state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ hue: 0 }}>\n  {({ setState, state }) => (\n    <div style={{ textAlign: \"center\" }}>\n      <button onClick={() => setState({ hue: Math.random() * 360 })}>\n        Generate Triad Colorscheme\n      </button>\n      <br />\n      {[1, 2, 3].map((n) => (\n        <div\n          key={n}\n          style={{\n            display: \"inline-block\",\n            margin: 10,\n            width: \"2em\",\n            height: \"2em\",\n            borderRadius: \"50%\",\n            background: \\`hsl(\\${state.hue + n * 120}, 50%, 50%)\\`,\n            transition: \"background-color 200ms ease\",\n          }}\n        />\n      ))}\n    </div>\n  )}\n</Component>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p>{`From the command line in your project directory, run `}<inlineCode parentName=\"p\">{`npm install @reach/component-component`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`yarn add @reach/component-component`}</inlineCode>{`. Then import the component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @reach/component-component\n# or\nyarn add @reach/component-component\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import Component from \"@reach/component-component\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"component-api\"\n    }}>{`Component API`}</h2>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#initialstate\"\n            }}><inlineCode parentName=\"a\">{`initialState`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`object`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#getinitialstate\"\n            }}><inlineCode parentName=\"a\">{`getInitialState`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#refs\"\n            }}><inlineCode parentName=\"a\">{`refs`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`object`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#getrefs\"\n            }}><inlineCode parentName=\"a\">{`getRefs`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#didmount\"\n            }}><inlineCode parentName=\"a\">{`didMount`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#didupdate\"\n            }}><inlineCode parentName=\"a\">{`didUpdate`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"willunmount\"\n            }}><inlineCode parentName=\"a\">{`willUnmount`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#getsnapshotbeforeupdate\"\n            }}><inlineCode parentName=\"a\">{`getSnapshotBeforeUpdate`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#shouldupdate\"\n            }}><inlineCode parentName=\"a\">{`shouldUpdate`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#children\"\n            }}><inlineCode parentName=\"a\">{`children`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#render\"\n            }}><inlineCode parentName=\"a\">{`render`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`func`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"initialstate\"\n    }}>{`initialState`}</h4>\n    <p><inlineCode parentName=\"p\">{`initialState?: object`}</inlineCode></p>\n    <p>{`An object of initial state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Component initialState={{ count: 10 }}>\n      {({ state }) => <div>Count is {state.count}</div>}\n    </Component>\n  );\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"getinitialstate\"\n    }}>{`getInitialState`}</h4>\n    <p><inlineCode parentName=\"p\">{`getInitialState?: () => object`}</inlineCode></p>\n    <p>{`A function to return intitial state. Use this when initial state is computed.`}</p>\n    <p>{`In the following example, `}<inlineCode parentName=\"p\">{`Date.now()`}</inlineCode>{` will `}<em parentName=\"p\">{`not`}</em>{` be called every time a parent component causes this component to re-render.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component getInitialState={() => ({ now: Date.now() })}>\n  {({ state }) => <div>Now is: {state.now}</div>}\n</Component>\n`}</code></pre>\n    <p>{`However, in the next example, `}<inlineCode parentName=\"p\">{`Date.now()`}</inlineCode>{` would be called with every re-render, which is not what we want.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// 😭\n<Component initialState={{ now: Date.now() }} />\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"refs\"\n    }}>{`refs`}</h4>\n    <p><inlineCode parentName=\"p\">{`refs?: object`}</inlineCode></p>\n    <p>{`Put any refs you need to keep track of here, stuff like DOM nodes, timers, and subcriptions.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Component refs={{ input: null }}>\n      {({ refs }) => (\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n            alert(refs.input.value);\n          }}\n        >\n          <input ref={(node) => (refs.input = node)} type=\"text\" />{\" \"}\n          <button type=\"submit\">Go</button>\n        </form>\n      )}\n    </Component>\n  );\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"getrefs\"\n    }}>{`getRefs`}</h4>\n    <p><inlineCode parentName=\"p\">{`getRefs?: () => object`}</inlineCode></p>\n    <p>{`Use this when any of your refs are computed.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component\n  getRefs={() => {\n    return {\n      input: React.createRef(),\n      popupContainer: document.createElement(\"div\"),\n    };\n  }}\n/>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"didmount\"\n    }}>{`didMount`}</h4>\n    <p><inlineCode parentName=\"p\">{`didMount?: (args: { state: object, props: object, refs: object, setState: Function, forceUpdate: Function }) => void`}</inlineCode></p>\n    <p>{`Called when the component mounts.`}</p>\n    <p>{`Perhaps you want some async data but don't want to make an entirely new component just for the lifecycles to get it:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component\n  initialState={{ gists: null }}\n  didMount={({ setState }) => {\n    fetch(\"https://api.github.com/gists?per_page=5\")\n      .then((res) => res.json())\n      .then((gists) => setState({ gists }));\n  }}\n>\n  {({ state }) =>\n    state.gists ? (\n      <ul>\n        {state.gists.map((gist) => (\n          <li key={gist.id}>\n            <a href={gist.html_url}>{gist.description || gist.id}</a>\n          </li>\n        ))}\n      </ul>\n    ) : (\n      <div>Loading...</div>\n    )\n  }\n</Component>\n`}</code></pre>\n    <p>{`See also `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/react-component.html#componentdidmount\"\n      }}>{`React Docs`}</a>{`.`}</p>\n    <h4 {...{\n      \"id\": \"didupdate\"\n    }}>{`didUpdate`}</h4>\n    <p><inlineCode parentName=\"p\">{`didMount?: (args: { state: object, props: object, refs: object, setState: Function, forceUpdate: Function, prevProps?: object, prevState?: object }) => void`}</inlineCode></p>\n    <p>{`Called when the component updates. See `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/react-component.html#componentdidupdate\"\n      }}>{`React Docs`}</a>{`.`}</p>\n    <h4 {...{\n      \"id\": \"willunmount\"\n    }}>{`willUnmount`}</h4>\n    <p><inlineCode parentName=\"p\">{`willUnmount?: (args: { state: object, props: object, refs: object }) => void`}</inlineCode></p>\n    <p>{`Called when the component will be removed from the page. See `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/react-component.html#componentwillunmount\"\n      }}>{`React Docs`}</a>{`.`}</p>\n    <h4 {...{\n      \"id\": \"getsnapshotbeforeupdate\"\n    }}>{`getSnapshotBeforeUpdate`}</h4>\n    <p><inlineCode parentName=\"p\">{`getSnapshotBeforeUpdate?: (args: { state: object, props: object, refs: object, prevProps: object, prevState: object }) => any`}</inlineCode></p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/react-component.html#getsnapshotbeforeupdate\"\n      }}>{`React Docs`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"shouldupdate\"\n    }}>{`shouldUpdate`}</h3>\n    <p><inlineCode parentName=\"p\">{`shouldUpdate?: (args: { state: object, props: object, nextProps: object, nextState: object }) => boolean`}</inlineCode></p>\n    <p>{`Return `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` to signify the component needs an update, `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` if it does not. Useful for wrapping up expensive parts of your app without having to refactor to new components.`}</p>\n    <p>{`For example: often you find just one part of your component is expensive to render, maybe because of a large SVG with a dynamic style or two. Rather than pulling the elements out of your component and putting them in a new `}<inlineCode parentName=\"p\">{`PureComponent`}</inlineCode>{`, you can inline a `}<inlineCode parentName=\"p\">{`shoudlUpdate`}</inlineCode>{` check:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Component initialState={{ hue: 0 }}>\n      {({ setState, state }) => (\n        <div>\n          <button\n            onClick={() => {\n              setState({ hue: Math.random() * 360 });\n            }}\n          >\n            Change Color\n          </button>\n\n          <Component\n            hue={state.hue}\n            shouldUpdate={({ nextProps, props }) => {\n              return nextProps.hue !== props.hue;\n            }}\n          >\n            <div>\n              <svg width=\"100\" height=\"100\">\n                <path\n                  d=\"M20,30 Q40,5 50,30 T90,30\"\n                  fill=\"none\"\n                  stroke={\\`hsl(\\${state.hue}, 50%, 50%)\\`}\n                  strokeWidth=\"5\"\n                />\n              </svg>\n            </div>\n          </Component>\n        </div>\n      )}\n    </Component>\n  );\n}\n`}</code></pre>\n    <p>{`See also `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/react-component.html#shouldcomponentupdate\"\n      }}>{`React Docs`}</a>{`.`}</p>\n    <h4 {...{\n      \"id\": \"children\"\n    }}>{`children`}</h4>\n    <p><inlineCode parentName=\"p\">{`children?: React.ReactNode | ((args: { state: object, props: object, refs: object, setState: Function, forceUpdate: Function }) => React.ReactNode)`}</inlineCode></p>\n    <p>{`Usual React children prop or render prop callback to provide the stateful parts of your component at render time..`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Component>\n      <div>Hey, I am the child</div>\n    </Component>\n  );\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Component initialState={{ hue: 0 }}>\n      {({ setState, state }) => (\n        <div>\n          <button onClick={() => setState({ hue: Math.random() * 360 })}>\n            Generate Color\n          </button>\n          <br />\n          <svg width=\"100\" height=\"100\">\n            <path\n              d=\"M20,30 Q40,5 50,30 T90,30\"\n              fill=\"none\"\n              stroke={\\`hsl(\\${state.hue}, 50%, 50%)\\`}\n              strokeWidth=\"5\"\n            />\n          </svg>\n        </div>\n      )}\n    </Component>\n  );\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"render\"\n    }}>{`render`}</h4>\n    <p><inlineCode parentName=\"p\">{`render?: (args: { state: object, props: object, refs: object, setState: Function, forceUpdate: Function }) => React.ReactNode`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Component\n      initialState={{ hue: 0 }}\n      render={({ setState, state }) => (\n        <div>\n          <button onClick={() => setState({ hue: Math.random() * 360 })}>\n            Generate Color\n          </button>\n          <br />\n          <svg width=\"100\" height=\"100\">\n            <path\n              d=\"M20,30 Q40,5 50,30 T90,30\"\n              fill=\"none\"\n              stroke={\\`hsl(\\${state.hue}, 50%, 50%)\\`}\n              strokeWidth=\"5\"\n            />\n          </svg>\n        </div>\n      )}\n    />\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"todo-app-example\"\n    }}>{`Todo App Example`}</h2>\n    <p>{`Here is a pretty involved example showing just how composable this component is:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`\"App state\" containing all todos`}</li>\n      <li parentName=\"ul\">{`\"Todo state\" containing state for a specific todo`}</li>\n      <li parentName=\"ul\">{`Updates the document title to the number of todos in the list`}</li>\n      <li parentName=\"ul\">{`Optimized todo rendering, avoiding updates if the color has not changed`}</li>\n      <li parentName=\"ul\">{`Tracked refs`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// jsx-demo\nfunction Example() {\n  return (\n    <Component\n      getRefs={() => ({\n        input: React.createRef(),\n      })}\n      getInitialState={() => {\n        return {\n          todos: [\"This is kinda weird\"],\n        };\n      }}\n    >\n      {({ state, setState, refs }) => (\n        <>\n          <Component\n            didUpdate={() => (document.title = state.todos.length + \" Todos\")}\n          />\n          <div style={{ fontFamily: \"sans-serif\" }}>\n            <h4>Todo List</h4>\n            <form\n              onSubmit={(event) => {\n                event.preventDefault();\n                let node = refs.input.current;\n                setState({ todos: state.todos.concat([node.value]) });\n                node.value = \"\";\n              }}\n            >\n              <input ref={refs.input} />\n            </form>\n            <div>\n              {state.todos.map((todo, index) => (\n                <Component\n                  key={index}\n                  getInitialState={() => ({ hue: Math.random() * 360 })}\n                  todo={todo}\n                  shouldUpdate={({ nextProps, nextState, props, state }) => {\n                    return (\n                      nextProps.todo !== props.todo ||\n                      nextState.hue !== state.hue\n                    );\n                  }}\n                >\n                  {({ setState, state }) => (\n                    <div style={{ color: \\`hsl(\\${state.hue}, 50%, 50%)\\` }}>\n                      <button\n                        onClick={() => {\n                          setState({ hue: Math.random() * 360 });\n                        }}\n                      >\n                        Change Color\n                      </button>{\" \"}\n                      {todo}\n                    </div>\n                  )}\n                </Component>\n              ))}\n            </div>\n            <p>\n              <button onClick={() => setState({ todos: [] })}>Clear all</button>\n            </p>\n          </div>\n        </>\n      )}\n    </Component>\n  );\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}